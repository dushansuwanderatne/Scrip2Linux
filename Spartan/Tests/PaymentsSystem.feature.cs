// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SCRIPAU.Automation.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PaymentsSystem")]
    public partial class PaymentsSystemFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PaymentsSystem.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PaymentsSystem", "Ensure PaymentsSystem Actions functionality covered", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Dividend Setup1")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Payment1", "", "N", "0010", "IN", "0010 AUTOMATION TEST", "D", "N", "Y", "N", "", "Y", "DIV1", "D", "", "", "", "", "", "", "", "", "N", "", "N", "", "", "N", "N", "N", "", "", "", "", "", "", "", "", "Y", "", "", "", "ORD", "", "Ordinary", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "Y", "Y", "A", "N", "AUS", "I9999999112", "", "", "Y", "ORD", "DIV1", "D", "(Dividend)", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", "Y", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "1.10000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "AUD", "B", "Y", "N", "Y", "Y", "1.0", "", "N", "", "N", "T", "9999", "N", "N", "S", "AUD", "", "", "2", "GBP", "0.66", "AUD->GBP", "N", "Y", "GBR", "", "99", "N", "NZD", "1.15", "AUD->NZD", "M", "", "NZL", "", "", "", "N", "", "EX", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "DIV1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Payment2", "", "N", "0011", "IN", "0011 AUTOMATION TEST", "D", "N", "N", "N", "", "Y", "DIV1", "D", "", "", "", "", "", "", "", "", "N", "", "N", "", "", "N", "N", "Y", "1", "", "DRP1", "", "I9999999104", "Y", "", "", "Y", "Y", "", "I", "", "", "Ordinary", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "Y", "Y", "A", "N", "AUS", "I9999999112", "", "", "Y", "01", "DIV1", "D", "(Dividend)", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", "Y", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "1.10000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "AUD", "B", "Y", "N", "Y", "Y", "1.0", "", "N", "", "N", "T", "9999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "N", "", "EX", "N", "A", "", "", "", "N", "", "", "N", "N", "", "", "", "Y", "", "Y", "", "Y", "", "", "DIV1", "1", null)]
        public virtual void TestCaseDividendSetup1(
                    string test, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string option2, 
                    string planScalebackApply, 
                    string statementScripSeq, 
                    string costShares, 
                    string certAllotDate, 
                    string planStartRef, 
                    string overrideMnyClassInd, 
                    string overrideMnyBFClass, 
                    string overrideMnyCFClass, 
                    string minPartOption, 
                    string maxRestriction, 
                    string tranTypeCode, 
                    string tradeRef, 
                    string deductionCode1, 
                    string deductionCodeInd1, 
                    string deductionCode2, 
                    string deductionCodeInd2, 
                    string deductionCode3, 
                    string deductionCodeInd3, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string subPayCodeX1, 
                    string paymentsPerYear, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Dividend Setup1", @__tags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table1.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 11
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table2.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 14
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table3.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 17
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table4.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 20
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table5.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 23
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table6.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 26
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table7.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 29
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table8.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 32
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table9.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 35
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table10.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 38
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table11.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 41
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table12.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 44
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table13.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3)});
#line 47
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table14.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 50
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount"});
            table15.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount)});
#line 53
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlanScalebackApply",
                        "StatementScripSeq"});
            table16.AddRow(new string[] {
                        string.Format("{0}", planScalebackApply),
                        string.Format("{0}", statementScripSeq)});
#line 56
  testRunner.And("In DIVX1050 I setup the Dividend Control Update as:", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "CostShares",
                        "CertAllotDate",
                        "PlanStartRef",
                        "OverrideMnyClassInd",
                        "OverrideMnyBFClass",
                        "OverrideMnyCFClass",
                        "MinPartOption",
                        "MaxRestriction",
                        "TranTypeCode",
                        "TradeRef",
                        "DeductionCode1",
                        "DeductionCodeInd1",
                        "DeductionCode2",
                        "DeductionCodeInd2",
                        "DeductionCode3",
                        "DeductionCodeInd3"});
            table17.AddRow(new string[] {
                        string.Format("{0}", costShares),
                        string.Format("{0}", certAllotDate),
                        string.Format("{0}", planStartRef),
                        string.Format("{0}", overrideMnyClassInd),
                        string.Format("{0}", overrideMnyBFClass),
                        string.Format("{0}", overrideMnyCFClass),
                        string.Format("{0}", minPartOption),
                        string.Format("{0}", maxRestriction),
                        string.Format("{0}", tranTypeCode),
                        string.Format("{0}", tradeRef),
                        string.Format("{0}", deductionCode1),
                        string.Format("{0}", deductionCodeInd1),
                        string.Format("{0}", deductionCode2),
                        string.Format("{0}", deductionCodeInd2),
                        string.Format("{0}", deductionCode3),
                        string.Format("{0}", deductionCodeInd3)});
#line 59
  testRunner.And("In DIVX1052 I setup the Dividend Control Update as:", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table18.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 62
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table18, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case DFA Setup")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Test1", "A", "00020", "00012 AUTOMATION TEST", "", "D", "30", "AUD", "N", "", "N", "", "Y", "Y", "Y", "Y", "Y", "1", "1", "1", "1", "", "M", "A", "N", "", "", "", "", "N", "", "", "", "", "N", "", "N", "", "N", "", "", "N", "", "", "N", "", "", "", "", null)]
        public virtual void TestCaseDFASetup(
                    string test, 
                    string action, 
                    string payAccountNumber, 
                    string paymentDesc, 
                    string paymentDate, 
                    string paymentType, 
                    string imputationRate, 
                    string baseCurrency, 
                    string dualCurrency, 
                    string paidCurrency, 
                    string combinedPayment, 
                    string reconciliationAcct, 
                    string reconBYCshare, 
                    string accurateReconciled, 
                    string webReporting, 
                    string dissenterAccountInd, 
                    string replaceAllowedInd, 
                    string lineSelectionXOC, 
                    string lineSelectionXRC, 
                    string lineSelectionOD, 
                    string lineSelectionRD, 
                    string lineSelectionFC, 
                    string dcrReplaceType, 
                    string action1, 
                    string unclaimedMoneyReport, 
                    string unclaimedMoniesFileRecipientType, 
                    string paymentAccountBalanced, 
                    string reportGroup, 
                    string departmentCode, 
                    string austTaxFlag, 
                    string aiirConvRateAus, 
                    string financialYear, 
                    string subCoyCode, 
                    string investmentType, 
                    string nZTaxFlag, 
                    string conversionRateNZ, 
                    string gbrTaxFlag, 
                    string conversionRateGbr, 
                    string uSTaxFlag, 
                    string conversionRateUS, 
                    string uSTaxYear, 
                    string irlTaxFlag, 
                    string conversionRateIrl, 
                    string irlTaxYear, 
                    string zafTaxFlag, 
                    string conversionRateZaf, 
                    string zafTaxYear, 
                    string lastBatchChequeNbr, 
                    string lastBankTapeNbr, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case DFA Setup", @__tags);
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "PayAccountNumber",
                        "PaymentDesc",
                        "PaymentDate",
                        "PaymentType",
                        "ImputationRate",
                        "BaseCurrency",
                        "DualCurrency",
                        "PaidCurrency",
                        "CombinedPayment",
                        "ReconciliationAcct",
                        "ReconBYCshare",
                        "AccurateReconciled",
                        "WebReporting",
                        "DissenterAccountInd",
                        "ReplaceAllowedInd"});
            table19.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", payAccountNumber),
                        string.Format("{0}", paymentDesc),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", imputationRate),
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dualCurrency),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", combinedPayment),
                        string.Format("{0}", reconciliationAcct),
                        string.Format("{0}", reconBYCshare),
                        string.Format("{0}", accurateReconciled),
                        string.Format("{0}", webReporting),
                        string.Format("{0}", dissenterAccountInd),
                        string.Format("{0}", replaceAllowedInd)});
#line 78
  testRunner.And("In PAS01000 I setup the Payment Account Number Details as:", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1"});
            table20.AddRow(new string[] {
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1)});
#line 81
  testRunner.And("In PAS01004 I setup the Payment Account Number Details as:", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "UnclaimedMoneyReport",
                        "UnclaimedMoniesFileRecipientType",
                        "PaymentAccountBalanced",
                        "ReportGroup",
                        "DepartmentCode"});
            table21.AddRow(new string[] {
                        string.Format("{0}", unclaimedMoneyReport),
                        string.Format("{0}", unclaimedMoniesFileRecipientType),
                        string.Format("{0}", paymentAccountBalanced),
                        string.Format("{0}", reportGroup),
                        string.Format("{0}", departmentCode)});
#line 84
  testRunner.And("In PAS01005 I setup the Payment Account Number Details as:", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "AustTaxFlag",
                        "AiirConvRateAus",
                        "FinancialYear",
                        "SubCoyCode",
                        "InvestmentType",
                        "NZTaxFlag",
                        "ConversionRateNZ",
                        "GbrTaxFlag",
                        "ConversionRateGbr",
                        "USTaxFlag",
                        "ConversionRateUS",
                        "USTaxYear",
                        "IrlTaxFlag",
                        "ConversionRateIrl",
                        "IrlTaxYear",
                        "ZafTaxFlag",
                        "ConversionRateZaf",
                        "ZafTaxYear",
                        "LastBatchChequeNbr",
                        "LastBankTapeNbr"});
            table22.AddRow(new string[] {
                        string.Format("{0}", austTaxFlag),
                        string.Format("{0}", aiirConvRateAus),
                        string.Format("{0}", financialYear),
                        string.Format("{0}", subCoyCode),
                        string.Format("{0}", investmentType),
                        string.Format("{0}", nZTaxFlag),
                        string.Format("{0}", conversionRateNZ),
                        string.Format("{0}", gbrTaxFlag),
                        string.Format("{0}", conversionRateGbr),
                        string.Format("{0}", uSTaxFlag),
                        string.Format("{0}", conversionRateUS),
                        string.Format("{0}", uSTaxYear),
                        string.Format("{0}", irlTaxFlag),
                        string.Format("{0}", conversionRateIrl),
                        string.Format("{0}", irlTaxYear),
                        string.Format("{0}", zafTaxFlag),
                        string.Format("{0}", conversionRateZaf),
                        string.Format("{0}", zafTaxYear),
                        string.Format("{0}", lastBatchChequeNbr),
                        string.Format("{0}", lastBankTapeNbr)});
#line 87
  testRunner.And("In PAS01002 I setup the Payment Account Number Details as:", ((string)(null)), table22, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Dividend Setup-BSP")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Payment3", "", "1", "1", "1", "1", "", "M", "C", "S", "00012", "A", "", "N", "0012", "IN", "0012 AUTOMATION TEST", "D", "N", "N", "N", "", "Y", "DIV1", "D", "", "", "", "", "", "", "", "", "N", "", "N", "", "", "N", "N", "Y", "1", "", "BSP1", "", "I9999999104", "Y", "", "", "Y", "N", "", "I", "", "", "Ordinary", "", "B", "DIVIDEND PAYMENT LISTING", "A", "A", "Y", "Y", "A", "N", "AUS", "I9999999112", "", "", "N", "01", "DIV1", "D", "(Dividend)", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", "Y", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "1.1", "", "", "", "30", "", "", "", "", "", "", "", "AUD", "", "", "", "", "", "", "", "", "", "", "", "99", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Y", "00012", "N", "A", "0.33", "", "", "", "", "", "N", "N", "", "", "", "Y", "", "Y", "", "Y", "D", "EX", "D", "Y", "Y", "N", "Y", "", "999", "", "", "N", "00112", "00112", "", "", "DIV1", "1", null)]
        public virtual void TestCaseDividendSetup_BSP(
                    string test, 
                    string paymentDate1, 
                    string lineSelectionXOC, 
                    string lineSelectionXRC, 
                    string lineSelectionOD, 
                    string lineSelectionRD, 
                    string lineSelectionFC, 
                    string dcrReplaceType, 
                    string action1, 
                    string action, 
                    string reinitiateSearch, 
                    string action2, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string planScalebackApply, 
                    string statementScripSeq, 
                    string costShares, 
                    string certAllotDate, 
                    string planStartRef, 
                    string overrideMnyClassInd, 
                    string overrideMnyBFClass, 
                    string overrideMnyCFClass, 
                    string minPartOption, 
                    string maxRestriction, 
                    string tranTypeCode, 
                    string tradeRef, 
                    string deductionCode1, 
                    string deductionCodeInd1, 
                    string deductionCode2, 
                    string deductionCodeInd2, 
                    string deductionCode3, 
                    string deductionCodeInd3, 
                    string option2, 
                    string option3, 
                    string dIDCApply1, 
                    string dcrProcessInd1, 
                    string fgnChqApplyInd1, 
                    string orideFCThresInd1, 
                    string coyNamePrint1, 
                    string orideFCThresAmt1, 
                    string didcStartRef1, 
                    string dISortFlag1, 
                    string dCTapeDate1, 
                    string separateBulk1, 
                    string reconAccount1, 
                    string reinitiateSearch1, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string subPayCodeX1, 
                    string paymentsPerYear, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Dividend Setup-BSP", @__tags);
#line 97
this.ScenarioSetup(scenarioInfo);
#line 98
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 99
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table23.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 103
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table23, "And ");
#line 106
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table24.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch1),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 111
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table24, "And ");
#line 114
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 115
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table25.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 119
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table26.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 122
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table27.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 125
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table28.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 128
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table28, "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table29.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 131
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table30.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 134
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table31.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 137
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table32.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 140
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table33.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 143
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table34.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 146
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table35.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 149
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table36.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 152
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table37.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3)});
#line 155
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table37, "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table38.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 158
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount"});
            table39.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount)});
#line 161
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table39, "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlanScalebackApply",
                        "StatementScripSeq"});
            table40.AddRow(new string[] {
                        string.Format("{0}", planScalebackApply),
                        string.Format("{0}", statementScripSeq)});
#line 164
  testRunner.And("In DIVX1050 I setup the Dividend Control Update as:", ((string)(null)), table40, "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "CostShares",
                        "CertAllotDate",
                        "PlanStartRef",
                        "OverrideMnyClassInd",
                        "OverrideMnyBFClass",
                        "OverrideMnyCFClass",
                        "MinPartOption",
                        "MaxRestriction",
                        "TranTypeCode",
                        "TradeRef",
                        "DeductionCode1",
                        "DeductionCodeInd1",
                        "DeductionCode2",
                        "DeductionCodeInd2",
                        "DeductionCode3",
                        "DeductionCodeInd3"});
            table41.AddRow(new string[] {
                        string.Format("{0}", costShares),
                        string.Format("{0}", certAllotDate),
                        string.Format("{0}", planStartRef),
                        string.Format("{0}", overrideMnyClassInd),
                        string.Format("{0}", overrideMnyBFClass),
                        string.Format("{0}", overrideMnyCFClass),
                        string.Format("{0}", minPartOption),
                        string.Format("{0}", maxRestriction),
                        string.Format("{0}", tranTypeCode),
                        string.Format("{0}", tradeRef),
                        string.Format("{0}", deductionCode1),
                        string.Format("{0}", deductionCodeInd1),
                        string.Format("{0}", deductionCode2),
                        string.Format("{0}", deductionCodeInd2),
                        string.Format("{0}", deductionCode3),
                        string.Format("{0}", deductionCodeInd3)});
#line 167
  testRunner.And("In DIVX1052 I setup the Dividend Control Update as:", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table42.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 170
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table42, "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table43.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 173
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table44.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 176
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table45.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 179
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table46.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 182
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table46, "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table47.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3)});
#line 185
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table48.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply1),
                        string.Format("{0}", dcrProcessInd1),
                        string.Format("{0}", fgnChqApplyInd1),
                        string.Format("{0}", orideFCThresInd1),
                        string.Format("{0}", coyNamePrint1),
                        string.Format("{0}", orideFCThresAmt1),
                        string.Format("{0}", didcStartRef1),
                        string.Format("{0}", dISortFlag1),
                        string.Format("{0}", dCTapeDate1),
                        string.Format("{0}", separateBulk1),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 188
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table48, "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount"});
            table49.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount1)});
#line 191
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlanScalebackApply",
                        "StatementScripSeq"});
            table50.AddRow(new string[] {
                        string.Format("{0}", planScalebackApply),
                        string.Format("{0}", statementScripSeq)});
#line 194
  testRunner.And("In DIVX1050 I setup the Dividend Control Update as:", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "CostShares",
                        "CertAllotDate",
                        "PlanStartRef",
                        "OverrideMnyClassInd",
                        "OverrideMnyBFClass",
                        "OverrideMnyCFClass",
                        "MinPartOption",
                        "MaxRestriction",
                        "TranTypeCode",
                        "TradeRef",
                        "DeductionCode1",
                        "DeductionCodeInd1",
                        "DeductionCode2",
                        "DeductionCodeInd2",
                        "DeductionCode3",
                        "DeductionCodeInd3"});
            table51.AddRow(new string[] {
                        string.Format("{0}", costShares),
                        string.Format("{0}", certAllotDate),
                        string.Format("{0}", planStartRef),
                        string.Format("{0}", overrideMnyClassInd),
                        string.Format("{0}", overrideMnyBFClass),
                        string.Format("{0}", overrideMnyCFClass),
                        string.Format("{0}", minPartOption),
                        string.Format("{0}", maxRestriction),
                        string.Format("{0}", tranTypeCode),
                        string.Format("{0}", tradeRef),
                        string.Format("{0}", deductionCode1),
                        string.Format("{0}", deductionCodeInd1),
                        string.Format("{0}", deductionCode2),
                        string.Format("{0}", deductionCodeInd2),
                        string.Format("{0}", deductionCode3),
                        string.Format("{0}", deductionCodeInd3)});
#line 197
  testRunner.And("In DIVX1052 I setup the Dividend Control Update as:", ((string)(null)), table51, "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table52.AddRow(new string[] {
                        string.Format("{0}", option3)});
#line 200
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table52, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Interest Payment Setup")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Payment4", "", "1", "1", "1", "1", "", "M", "C", "S", "00013", "A", "", "N", "0013", "IN", "0013 AUTOMATION TEST", "I", "N", "N", "N", "N", "Y", "INT1", "I", "", "", "", "", "", "", "", "", "N", "", "", "", "", "N", "N", "N", "", "", "", "", "", "", "", "", "N", "", "", "", "INT", "", "Interest", "", "30", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "N", "N", "A", "N", "AUS", "I9999999112", "", "", "N", "INT", "INT1", "I", "(Interest)", "$1.10 payment rate", "1.10000000", "0.00000000", "0.00000000", "R", "", "", "", "", "", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "1.1", "", "", "", "", "", "", "", "", "", "", "", "AUD", "B", "Y", "Y", "Y", "Y", "1.00", "999", "N", "", "N", "T", "999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Y", "00013", "EX", "INT1", "1", null)]
        public virtual void TestCaseInterestPaymentSetup(
                    string test, 
                    string paymentDate1, 
                    string lineSelectionXOC, 
                    string lineSelectionXRC, 
                    string lineSelectionOD, 
                    string lineSelectionRD, 
                    string lineSelectionFC, 
                    string dcrReplaceType, 
                    string action1, 
                    string action, 
                    string reinitiateSearch, 
                    string action2, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string option2, 
                    string subPayCodeX1, 
                    string paymentsPerYear, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Interest Payment Setup", @__tags);
#line 210
this.ScenarioSetup(scenarioInfo);
#line 211
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 212
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 213
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table53.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 216
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table53, "And ");
#line 219
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 220
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 221
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table54.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 224
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table54, "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table55.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 227
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table55, "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table56.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 230
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table56, "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table57.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 233
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table57, "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table58.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 236
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table58, "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table59.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 239
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table60.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 242
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table60, "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table61.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 245
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table61, "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table62.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 248
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table63.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 251
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table63, "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table64.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 254
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table64, "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table65.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 257
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table65, "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table66.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3)});
#line 260
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table66, "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table67.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 263
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table67, "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount"});
            table68.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount)});
#line 266
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table68, "And ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table69.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 269
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table69, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Distribution Payment Setup1")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Payment6", "", "1", "1", "1", "1", "", "M", "C", "S", "00015", "A", "", "N", "0015", "IN", "0015 AUTOMATION TEST", "D", "N", "", "N", "", "Y", "DIS1", "S", "", "", "", "", "", "", "", "", "N", "", "N", "", "", "N", "N", "N", "", "", "", "", "", "", "", "", "Y", "", "", "", "ORD", "", "Ordinary", "", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "N", "", "A", "N", "AUS", "I9999999112", "", "", "N", "ORD", "DIS1", "S", "(Distribution)", "$1.10 payment rate", "1.10000000", "0.00000000", "0.00000000", "R", "", "", "", "", "", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "Y", "N", "Y", "Y", "N", "0.1", "", "", "", "0.5", "", "", "", "0.5", "", "", "", "AUD", "B", "Y", "Y", "Y", "N", "1.0", "9999", "N", "", "N", "T", "9999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Y", "00015", "EX", "", "", "", "", "DIS1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Payment7", "", "1", "1", "1", "1", "", "M", "C", "S", "00016", "A", "", "N", "0016", "IN", "0016 AUTOMATION TEST", "D", "Y", "", "N", "", "Y", "DIS1", "S", "", "", "", "", "", "", "", "", "N", "", "N", "", "", "N", "N", "N", "", "", "", "", "", "", "", "", "Y", "", "", "", "LON", "", "Employee Loan Class", "", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "N", "", "A", "N", "AUS", "I9999999112", "", "", "N", "LON", "DIS1", "S", "(Distribution)", "$1.10 payment rate", "1.10000000", "0.00000000", "0.00000000", "R", "", "", "", "", "", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "Y", "N", "Y", "Y", "N", "0.1", "", "", "", "0.5", "", "", "", "0.5", "", "", "", "AUD", "B", "Y", "Y", "Y", "N", "1.0", "9999", "N", "", "N", "T", "9999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Y", "00016", "EX", "LNM", "", "50.0000000", "80", "DIS1", "1", null)]
        public virtual void TestCaseDistributionPaymentSetup1(
                    string test, 
                    string paymentDate1, 
                    string lineSelectionXOC, 
                    string lineSelectionXRC, 
                    string lineSelectionOD, 
                    string lineSelectionRD, 
                    string lineSelectionFC, 
                    string dcrReplaceType, 
                    string action1, 
                    string action, 
                    string reinitiateSearch, 
                    string action2, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string option2, 
                    string loanClass1, 
                    string loanClass2, 
                    string percentage, 
                    string empHowPayCode, 
                    string subPayCodeX1, 
                    string paymentsPerYear, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Distribution Payment Setup1", @__tags);
#line 278
this.ScenarioSetup(scenarioInfo);
#line 279
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 280
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 281
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 282
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 283
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table70.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 284
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table70, "And ");
#line 287
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 288
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 289
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table71.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 292
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table71, "And ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table72.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 295
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table72, "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table73.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 298
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table73, "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table74.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 301
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table74, "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table75.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 304
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table75, "And ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table76.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 307
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table76, "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table77.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 310
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table77, "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "LoanClass1",
                        "LoanClass2",
                        "Percentage"});
            table78.AddRow(new string[] {
                        string.Format("{0}", loanClass1),
                        string.Format("{0}", loanClass2),
                        string.Format("{0}", percentage)});
#line 313
  testRunner.And("In DIVX1016 I setup the Dividend Control Update as:", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table79.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 316
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table79, "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table80.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 319
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table80, "And ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table81.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 322
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table81, "And ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table82.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 325
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table82, "And ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table83.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 328
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table83, "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table84.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3)});
#line 331
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table84, "And ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table85.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 334
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table85, "And ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "EmpHowPayCode"});
            table86.AddRow(new string[] {
                        string.Format("{0}", empHowPayCode)});
#line 337
  testRunner.And("In DIVX1042 I setup the Dividend Control Update as:", ((string)(null)), table86, "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount"});
            table87.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount)});
#line 340
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table87, "And ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table88.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 343
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table88, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Dividend Payment Setup-Dual Tax")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Payment9", "", "1", "1", "1", "1", "", "M", "C", "S", "00018", "A", "", "N", "0018", "IN", "0018 AUTOMATION TEST", "D", "N", "", "N", "", "Y", "DIV1", "D", "", "", "", "", "", "", "", "", "N", "", "N", "", "", "N", "N", "N", "", "", "", "", "", "", "", "", "Y", "", "", "", "ORD", "", "Ordinary", "", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "Y", "Y", "A", "N", "AUS", "I9999999112", "USA", "I9999999104", "N", "ORD", "DIV1", "D", "(Dividend)", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", "Y", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "DIV1", "1.10000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "AUD", "B", "Y", "Y", "Y", "N", "1.00", "999", "N", "", "N", "T", "999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Y", "00018", "", "", "EX", "1", null)]
        public virtual void TestCaseDividendPaymentSetup_DualTax(
                    string test, 
                    string paymentDate1, 
                    string lineSelectionXOC, 
                    string lineSelectionXRC, 
                    string lineSelectionOD, 
                    string lineSelectionRD, 
                    string lineSelectionFC, 
                    string dcrReplaceType, 
                    string action1, 
                    string action, 
                    string reinitiateSearch, 
                    string action2, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string subPayCodeX1, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string paymentAccount1, 
                    string paymentAccount2, 
                    string option2, 
                    string paymentsPerYear, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Dividend Payment Setup-Dual Tax", @__tags);
#line 354
this.ScenarioSetup(scenarioInfo);
#line 355
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 356
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 357
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 358
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 359
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table89.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 360
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table89, "And ");
#line 363
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 364
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 365
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 366
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 367
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table90.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 368
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table90, "And ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table91.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 371
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table91, "And ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table92.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 374
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table92, "And ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table93.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 377
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table93, "And ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table94.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 380
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table94, "And ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table95.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 383
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table95, "And ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table96.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 386
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table96, "And ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table97.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 389
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table97, "And ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table98.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 392
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table98, "And ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table99.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 395
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table99, "And ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table100.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 398
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table100, "And ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table101.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 401
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table101, "And ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table102.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3)});
#line 404
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table102, "And ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table103.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 407
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table103, "And ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount",
                        "PaymentAccount1",
                        "PaymentAccount2"});
            table104.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount),
                        string.Format("{0}", paymentAccount1),
                        string.Format("{0}", paymentAccount2)});
#line 410
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table104, "And ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table105.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 413
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table105, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Dividend Payment Setup-Multiple Classes")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Payment10", "", "1", "1", "1", "1", "", "M", "C", "S", "00019", "A", "", "N", "0019", "IN", "0019 AUTOMATION TEST", "D", "N", "", "N", "", "Y", "DIV1", "D", "", "", "", "", "", "", "", "", "N", "", "N", "", "", "N", "N", "N", "", "", "", "", "", "", "", "", "Y", "", "", "", "ORD", "OR7", "Ordinary", "Ordinary-7", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "Y", "Y", "A", "N", "AUS", "I9999999112", "", "", "N", "ORD", "DIV1", "D", "(Dividend)", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "", "", "", "", "R", "Y", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "DIV1", "1.10000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "1.10000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "AUD", "B", "Y", "Y", "Y", "N", "1.00", "99", "N", "", "N", "T", "999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Y", "00019", "", "", "EX", "DIV1", "1", "OR7", "DIV1", "D", "(Dividend)", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", null)]
        public virtual void TestCaseDividendPaymentSetup_MultipleClasses(
                    string test, 
                    string paymentDate1, 
                    string lineSelectionXOC, 
                    string lineSelectionXRC, 
                    string lineSelectionOD, 
                    string lineSelectionRD, 
                    string lineSelectionFC, 
                    string dcrReplaceType, 
                    string action1, 
                    string action, 
                    string reinitiateSearch, 
                    string action2, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string subPayCodeX, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string componentRate11, 
                    string group11, 
                    string inputGroup11, 
                    string sequence11, 
                    string componentRate22, 
                    string group22, 
                    string inputGroup22, 
                    string sequence22, 
                    string componentRate33, 
                    string group33, 
                    string inputGroup33, 
                    string sequence33, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string paymentAccount1, 
                    string paymentAccount2, 
                    string option2, 
                    string subPayCodeX1, 
                    string paymentsPerYear, 
                    string classCat2A, 
                    string subPayCodeA, 
                    string paymentTypeA, 
                    string typeDescriptionA, 
                    string paymentRateDesc1A, 
                    string paymentRate1A, 
                    string additionalRate1A, 
                    string reportableRate1A, 
                    string compBrkdwnMethodA, 
                    string paymentRateDesc2A, 
                    string paymentRate2A, 
                    string additionalRate2A, 
                    string reportableRate2A, 
                    string compBrkdwnMethod2A, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Dividend Payment Setup-Multiple Classes", @__tags);
#line 424
this.ScenarioSetup(scenarioInfo);
#line 425
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 426
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 427
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 428
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 429
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table106.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 430
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table106, "And ");
#line 433
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 434
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 435
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 436
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 437
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table107.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 438
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table107, "And ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table108.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 441
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table108, "And ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table109.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 444
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table109, "And ");
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table110.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 447
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table110, "And ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table111.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 450
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table111, "And ");
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table112.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 453
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table112, "And ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table113.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 456
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table113, "And ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table114.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 459
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table114, "And ");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table115.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 462
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table115, "And ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table116.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 465
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table116, "And ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table117.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 468
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table117, "And ");
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table118.AddRow(new string[] {
                        string.Format("{0}", classCat2A),
                        string.Format("{0}", subPayCodeA),
                        string.Format("{0}", paymentTypeA),
                        string.Format("{0}", typeDescriptionA),
                        string.Format("{0}", paymentRateDesc1A),
                        string.Format("{0}", paymentRate1A),
                        string.Format("{0}", additionalRate1A),
                        string.Format("{0}", reportableRate1A),
                        string.Format("{0}", compBrkdwnMethodA),
                        string.Format("{0}", paymentRateDesc2A),
                        string.Format("{0}", paymentRate2A),
                        string.Format("{0}", additionalRate2A),
                        string.Format("{0}", reportableRate2A),
                        string.Format("{0}", compBrkdwnMethod2A)});
#line 471
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table118, "And ");
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table119.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 474
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table119, "And ");
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table120.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3)});
#line 477
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table120, "And ");
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table121.AddRow(new string[] {
                        string.Format("{0}", componentRate11),
                        string.Format("{0}", group11),
                        string.Format("{0}", inputGroup11),
                        string.Format("{0}", sequence11),
                        string.Format("{0}", componentRate22),
                        string.Format("{0}", group22),
                        string.Format("{0}", inputGroup22),
                        string.Format("{0}", sequence22),
                        string.Format("{0}", componentRate33),
                        string.Format("{0}", group33),
                        string.Format("{0}", inputGroup33),
                        string.Format("{0}", sequence33)});
#line 480
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table121, "And ");
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table122.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 483
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table122, "And ");
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount",
                        "PaymentAccount1",
                        "PaymentAccount2"});
            table123.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount),
                        string.Format("{0}", paymentAccount1),
                        string.Format("{0}", paymentAccount2)});
#line 486
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table123, "And ");
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table124.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 489
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table124, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Dividend Payment Setup-DRP-Multiple Classes-NoDFA")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Payment11", "", "N", "0020", "IN", "0020 AUTOMATION TEST", "D", "N", "", "N", "", "Y", "DIV1", "D", "", "", "", "", "", "", "", "", "N", "", "N", "", "", "N", "N", "Y", "1", "4", "DRP1", "DRP4", "I9999999104", "Y", "", "", "Y", "N", "", "I", "", "", "Ordinary - 01", "Ordinary - 04", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "Y", "Y", "A", "N", "AUS", "I9999999112", "", "", "N", "01", "DIV1", "D", "(Dividend)", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", "Y", "Y", "N", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "DIV1", ".60000000", "", "", "", ".50000000", "", "", "", "30.00000000", "", "", "", ".60000000", "", "", "", ".50000000", "", "", "", "30.00000000", "", "", "", "AUD", "B", "Y", "N", "Y", "N", "1.0", "999", "N", "", "N", "T", "999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "N", "", "", "", "EX", "N", "A", "", "", "", "", "", "", "N", "N", "", "", "", "Y", "", "Y", "", "Y", "1", "04", "DIV1", "D", "(Dividend)", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", "", "", null)]
        public virtual void TestCaseDividendPaymentSetup_DRP_MultipleClasses_NoDFA(
                    string test, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string subPayCodeX1, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string componentRate11, 
                    string group11, 
                    string inputGroup11, 
                    string sequence11, 
                    string componentRate22, 
                    string group22, 
                    string inputGroup22, 
                    string sequence22, 
                    string componentRate33, 
                    string group33, 
                    string inputGroup33, 
                    string sequence33, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string paymentAccount1, 
                    string paymentAccount2, 
                    string option2, 
                    string planScalebackApply, 
                    string statementScripSeq, 
                    string costShares, 
                    string certAllotDate, 
                    string planStartRef, 
                    string overrideMnyClassInd, 
                    string overrideMnyBFClass, 
                    string overrideMnyCFClass, 
                    string minPartOption, 
                    string maxRestriction, 
                    string tranTypeCode, 
                    string tradeRef, 
                    string deductionCode1, 
                    string deductionCodeInd1, 
                    string deductionCode2, 
                    string deductionCodeInd2, 
                    string deductionCode3, 
                    string deductionCodeInd3, 
                    string paymentsPerYear, 
                    string classCat2A, 
                    string subPayCodeA, 
                    string paymentTypeA, 
                    string typeDescriptionA, 
                    string paymentRateDesc1A, 
                    string paymentRate1A, 
                    string additionalRate1A, 
                    string reportableRate1A, 
                    string compBrkdwnMethodA, 
                    string paymentRateDesc2A, 
                    string paymentRate2A, 
                    string additionalRate2A, 
                    string reportableRate2A, 
                    string compBrkdwnMethod2A, 
                    string catCostShare1, 
                    string catCostShare2, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Dividend Payment Setup-DRP-Multiple Classes-NoDFA", @__tags);
#line 499
this.ScenarioSetup(scenarioInfo);
#line 500
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 501
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 502
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 503
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 504
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table125.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 505
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table125, "And ");
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table126.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 508
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table126, "And ");
#line hidden
            TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table127.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 511
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table127, "And ");
#line hidden
            TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table128.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 514
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table128, "And ");
#line hidden
            TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table129.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 517
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table129, "And ");
#line hidden
            TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table130.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 520
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table130, "And ");
#line hidden
            TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table131.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 523
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table131, "And ");
#line hidden
            TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table132.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 526
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table132, "And ");
#line hidden
            TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table133.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 529
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table133, "And ");
#line hidden
            TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table134.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 532
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table134, "And ");
#line hidden
            TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table135.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 535
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table135, "And ");
#line hidden
            TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table136.AddRow(new string[] {
                        string.Format("{0}", classCat2A),
                        string.Format("{0}", subPayCodeA),
                        string.Format("{0}", paymentTypeA),
                        string.Format("{0}", typeDescriptionA),
                        string.Format("{0}", paymentRateDesc1A),
                        string.Format("{0}", paymentRate1A),
                        string.Format("{0}", additionalRate1A),
                        string.Format("{0}", reportableRate1A),
                        string.Format("{0}", compBrkdwnMethodA),
                        string.Format("{0}", paymentRateDesc2A),
                        string.Format("{0}", paymentRate2A),
                        string.Format("{0}", additionalRate2A),
                        string.Format("{0}", reportableRate2A),
                        string.Format("{0}", compBrkdwnMethod2A)});
#line 538
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table136, "And ");
#line hidden
            TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table137.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 541
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table137, "And ");
#line hidden
            TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table138.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3)});
#line 544
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table138, "And ");
#line hidden
            TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table139.AddRow(new string[] {
                        string.Format("{0}", componentRate11),
                        string.Format("{0}", group11),
                        string.Format("{0}", inputGroup11),
                        string.Format("{0}", sequence11),
                        string.Format("{0}", componentRate22),
                        string.Format("{0}", group22),
                        string.Format("{0}", inputGroup22),
                        string.Format("{0}", sequence22),
                        string.Format("{0}", componentRate33),
                        string.Format("{0}", group33),
                        string.Format("{0}", inputGroup33),
                        string.Format("{0}", sequence33)});
#line 547
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table139, "And ");
#line hidden
            TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table140.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 550
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table140, "And ");
#line hidden
            TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount",
                        "PaymentAccount1",
                        "PaymentAccount2"});
            table141.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount),
                        string.Format("{0}", paymentAccount1),
                        string.Format("{0}", paymentAccount2)});
#line 553
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table141, "And ");
#line hidden
            TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlanScalebackApply",
                        "StatementScripSeq"});
            table142.AddRow(new string[] {
                        string.Format("{0}", planScalebackApply),
                        string.Format("{0}", statementScripSeq)});
#line 556
  testRunner.And("In DIVX1050 I setup the Dividend Control Update as:", ((string)(null)), table142, "And ");
#line hidden
            TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                        "CostShares",
                        "CertAllotDate",
                        "PlanStartRef",
                        "OverrideMnyClassInd",
                        "OverrideMnyBFClass",
                        "OverrideMnyCFClass",
                        "MinPartOption",
                        "MaxRestriction",
                        "TranTypeCode",
                        "TradeRef",
                        "DeductionCode1",
                        "DeductionCodeInd1",
                        "DeductionCode2",
                        "DeductionCodeInd2",
                        "DeductionCode3",
                        "DeductionCodeInd3",
                        "CatCostShare1",
                        "CatCostShare2"});
            table143.AddRow(new string[] {
                        string.Format("{0}", costShares),
                        string.Format("{0}", certAllotDate),
                        string.Format("{0}", planStartRef),
                        string.Format("{0}", overrideMnyClassInd),
                        string.Format("{0}", overrideMnyBFClass),
                        string.Format("{0}", overrideMnyCFClass),
                        string.Format("{0}", minPartOption),
                        string.Format("{0}", maxRestriction),
                        string.Format("{0}", tranTypeCode),
                        string.Format("{0}", tradeRef),
                        string.Format("{0}", deductionCode1),
                        string.Format("{0}", deductionCodeInd1),
                        string.Format("{0}", deductionCode2),
                        string.Format("{0}", deductionCodeInd2),
                        string.Format("{0}", deductionCode3),
                        string.Format("{0}", deductionCodeInd3),
                        string.Format("{0}", catCostShare1),
                        string.Format("{0}", catCostShare2)});
#line 559
  testRunner.And("In DIVX1052 I setup the Dividend Control Update as:", ((string)(null)), table143, "And ");
#line hidden
            TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table144.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 562
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table144, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Dividend Payment Setup-DRP-Multiple Classes-DFA")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Payment12", "", "N", "0021", "IN", "0021 AUTOMATION TEST", "D", "N", "", "N", "", "Y", "DIV1", "D", "", "", "", "", "", "", "", "", "N", "", "N", "", "", "N", "N", "Y", "3", "", "DRP3", "", "I9999999104", "Y", "", "", "Y", "N", "", "I", "", "", "Ordinary - 03", "", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "Y", "Y", "A", "N", "AUS", "I9999999112", "", "", "N", "03", "DIV1", "D", "(Dividend)", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", "Y", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "DIV1", "1.10000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "AUD", "B", "Y", "Y", "Y", "N", "1.0", "999", "N", "", "N", "T", "999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Y", "00021", "", "", "EX", "", "1", "1", "1", "1", "", "M", "C", "S", "00021", "A", "N", "A", "0.33", "", "", "", "", "", "N", "N", "", "", "", "Y", "", "Y", "", "Y", "1", null)]
        public virtual void TestCaseDividendPaymentSetup_DRP_MultipleClasses_DFA(
                    string test, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string subPayCodeX1, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string paymentAccount1, 
                    string paymentAccount2, 
                    string option2, 
                    string paymentDate1, 
                    string lineSelectionXOC, 
                    string lineSelectionXRC, 
                    string lineSelectionOD, 
                    string lineSelectionRD, 
                    string lineSelectionFC, 
                    string dcrReplaceType, 
                    string action1, 
                    string action, 
                    string reinitiateSearch, 
                    string action2, 
                    string planScalebackApply, 
                    string statementScripSeq, 
                    string costShares, 
                    string certAllotDate, 
                    string planStartRef, 
                    string overrideMnyClassInd, 
                    string overrideMnyBFClass, 
                    string overrideMnyCFClass, 
                    string minPartOption, 
                    string maxRestriction, 
                    string tranTypeCode, 
                    string tradeRef, 
                    string deductionCode1, 
                    string deductionCodeInd1, 
                    string deductionCode2, 
                    string deductionCodeInd2, 
                    string deductionCode3, 
                    string deductionCodeInd3, 
                    string paymentsPerYear, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Dividend Payment Setup-DRP-Multiple Classes-DFA", @__tags);
#line 574
this.ScenarioSetup(scenarioInfo);
#line 575
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 576
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 577
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 578
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 579
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table145.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 580
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table145, "And ");
#line 583
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 584
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 585
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 586
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 587
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table146.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 588
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table146, "And ");
#line hidden
            TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table147.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 591
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table147, "And ");
#line hidden
            TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table148.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 594
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table148, "And ");
#line hidden
            TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table149.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 597
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table149, "And ");
#line hidden
            TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table150.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 600
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table150, "And ");
#line hidden
            TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table151.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 603
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table151, "And ");
#line hidden
            TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table152.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 606
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table152, "And ");
#line hidden
            TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table153.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 609
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table153, "And ");
#line hidden
            TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table154.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 612
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table154, "And ");
#line hidden
            TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table155.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 615
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table155, "And ");
#line hidden
            TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table156.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 618
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table156, "And ");
#line hidden
            TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table157.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 621
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table157, "And ");
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table158.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3)});
#line 624
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table158, "And ");
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table159.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 627
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table159, "And ");
#line hidden
            TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount",
                        "PaymentAccount1",
                        "PaymentAccount2"});
            table160.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount),
                        string.Format("{0}", paymentAccount1),
                        string.Format("{0}", paymentAccount2)});
#line 630
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table160, "And ");
#line hidden
            TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlanScalebackApply",
                        "StatementScripSeq"});
            table161.AddRow(new string[] {
                        string.Format("{0}", planScalebackApply),
                        string.Format("{0}", statementScripSeq)});
#line 633
  testRunner.And("In DIVX1050 I setup the Dividend Control Update as:", ((string)(null)), table161, "And ");
#line hidden
            TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                        "CostShares",
                        "CertAllotDate",
                        "PlanStartRef",
                        "OverrideMnyClassInd",
                        "OverrideMnyBFClass",
                        "OverrideMnyCFClass",
                        "MinPartOption",
                        "MaxRestriction",
                        "TranTypeCode",
                        "TradeRef",
                        "DeductionCode1",
                        "DeductionCodeInd1",
                        "DeductionCode2",
                        "DeductionCodeInd2",
                        "DeductionCode3",
                        "DeductionCodeInd3"});
            table162.AddRow(new string[] {
                        string.Format("{0}", costShares),
                        string.Format("{0}", certAllotDate),
                        string.Format("{0}", planStartRef),
                        string.Format("{0}", overrideMnyClassInd),
                        string.Format("{0}", overrideMnyBFClass),
                        string.Format("{0}", overrideMnyCFClass),
                        string.Format("{0}", minPartOption),
                        string.Format("{0}", maxRestriction),
                        string.Format("{0}", tranTypeCode),
                        string.Format("{0}", tradeRef),
                        string.Format("{0}", deductionCode1),
                        string.Format("{0}", deductionCodeInd1),
                        string.Format("{0}", deductionCode2),
                        string.Format("{0}", deductionCodeInd2),
                        string.Format("{0}", deductionCode3),
                        string.Format("{0}", deductionCodeInd3)});
#line 636
  testRunner.And("In DIVX1052 I setup the Dividend Control Update as:", ((string)(null)), table162, "And ");
#line hidden
            TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table163.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 639
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table163, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Distribution Payment Setup-Payment13")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Test1", "", "N", "0022", "IN", "0022 AUTOMATION TEST", "D", "N", "N", "Y", "2", "Y", "DIS1", "S", "DIV1", "D", "", "", "", "", "", "", "N", "", "", "", "", "N", "N", "N", "", "", "", "", "", "", "", "", "Y", "", "", "", "ORD", "OR7", "Ordinary", "Ordinary - 7", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "Y", "Y", "A", "N", "AUS", "I9999999112", "", "", "N", "ORD", "DIS1", "S", "(Distribution)", "$1.10 payment rate", "1.10000000", "0.00000000", "0.00000000", "R", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "OR7", "DIS1", "S", "(Distribution)", "$1.10 payment rate", "1.10000000", "0.00000000", "0.00000000", "R", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "Y", "Y", "Y", "N", "N", "DIS1", "Y", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "DIV1", ".30000000", "", "", "", ".40000000", "", "", "", ".40000000", "", "", "", ".30000000", "", "", "", ".40000000", "", "", "", ".40000000", "", "", "", "1.10000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "1.10000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "2", "AUD", "B", "Y", "N", "Y", "N", "1.00", "999", "N", "", "N", "T", "999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Y", "00022", "0022B", "0022A", "S", "00022", "", "1", "1", "1", "1", "", "M", "C", "A", "0022A", "0022B", "EX", null)]
        public virtual void TestCaseDistributionPaymentSetup_Payment13(
                    string test, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string classCat2A, 
                    string subPayCodeA, 
                    string paymentTypeA, 
                    string typeDescriptionA, 
                    string paymentRateDesc1A, 
                    string paymentRate1A, 
                    string additionalRate1A, 
                    string reportableRate1A, 
                    string compBrkdwnMethodA, 
                    string paymentRateDesc2A, 
                    string paymentRate2A, 
                    string additionalRate2A, 
                    string reportableRate2A, 
                    string compBrkdwnMethod2A, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string subPayCodeX1, 
                    string rn1A, 
                    string rn2A, 
                    string rn3A, 
                    string rn4A, 
                    string rn5A, 
                    string rn6A, 
                    string rn7A, 
                    string rn8A, 
                    string rn9A, 
                    string rn10A, 
                    string rn11A, 
                    string rn12A, 
                    string rn13A, 
                    string rn14A, 
                    string rn15A, 
                    string subPayCodeX1A, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string componentRate1A, 
                    string group1A, 
                    string inputGroup1A, 
                    string sequence1A, 
                    string componentRate2A, 
                    string group2A, 
                    string inputGroup2A, 
                    string sequence2A, 
                    string componentRate3A, 
                    string group3A, 
                    string inputGroup3A, 
                    string sequence3A, 
                    string componentRate1B, 
                    string group1B, 
                    string inputGroup1B, 
                    string sequence1B, 
                    string componentRate2B, 
                    string group2B, 
                    string inputGroup2B, 
                    string sequence2B, 
                    string componentRate3B, 
                    string group3B, 
                    string inputGroup3B, 
                    string sequence3B, 
                    string componentRate1C, 
                    string group1C, 
                    string inputGroup1C, 
                    string sequence1C, 
                    string componentRate2C, 
                    string group2C, 
                    string inputGroup2C, 
                    string sequence2C, 
                    string componentRate3C, 
                    string group3C, 
                    string inputGroup3C, 
                    string sequence3C, 
                    string paymentsPerYear, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string paymentAccount1, 
                    string paymentAccount2, 
                    string action, 
                    string reinitiateSearch, 
                    string paymentDate1, 
                    string lineSelectionXOC, 
                    string lineSelectionXRC, 
                    string lineSelectionOD, 
                    string lineSelectionRD, 
                    string lineSelectionFC, 
                    string dcrReplaceType, 
                    string action1, 
                    string action2, 
                    string reinitiateSearch1, 
                    string reinitiateSearch2, 
                    string option2, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Distribution Payment Setup-Payment13", @__tags);
#line 649
this.ScenarioSetup(scenarioInfo);
#line 650
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 651
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 652
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 653
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 654
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table164.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 655
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table164, "And ");
#line 658
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 659
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 660
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 661
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 662
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table165.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch1),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 663
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table165, "And ");
#line 666
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 667
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 668
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 669
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 670
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table166.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch2),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 671
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table166, "And ");
#line 674
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 675
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 676
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 677
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 678
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table167.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 679
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table167, "And ");
#line hidden
            TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table168.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 682
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table168, "And ");
#line hidden
            TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table169.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 685
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table169, "And ");
#line hidden
            TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table170.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 688
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table170, "And ");
#line hidden
            TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table171.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 691
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table171, "And ");
#line hidden
            TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table172.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 694
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table172, "And ");
#line hidden
            TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table173.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 697
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table173, "And ");
#line hidden
            TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table174.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 700
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table174, "And ");
#line hidden
            TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table175.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 703
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table175, "And ");
#line hidden
            TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table176.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 706
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table176, "And ");
#line hidden
            TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table177.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 709
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table177, "And ");
#line hidden
            TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table178.AddRow(new string[] {
                        string.Format("{0}", classCat2A),
                        string.Format("{0}", subPayCodeA),
                        string.Format("{0}", paymentTypeA),
                        string.Format("{0}", typeDescriptionA),
                        string.Format("{0}", paymentRateDesc1A),
                        string.Format("{0}", paymentRate1A),
                        string.Format("{0}", additionalRate1A),
                        string.Format("{0}", reportableRate1A),
                        string.Format("{0}", compBrkdwnMethodA),
                        string.Format("{0}", paymentRateDesc2A),
                        string.Format("{0}", paymentRate2A),
                        string.Format("{0}", additionalRate2A),
                        string.Format("{0}", reportableRate2A),
                        string.Format("{0}", compBrkdwnMethod2A)});
#line 712
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table178, "And ");
#line hidden
            TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table179.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 715
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table179, "And ");
#line hidden
            TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table180.AddRow(new string[] {
                        string.Format("{0}", rn1A),
                        string.Format("{0}", rn2A),
                        string.Format("{0}", rn3A),
                        string.Format("{0}", rn4A),
                        string.Format("{0}", rn5A),
                        string.Format("{0}", rn6A),
                        string.Format("{0}", rn7A),
                        string.Format("{0}", rn8A),
                        string.Format("{0}", rn9A),
                        string.Format("{0}", rn10A),
                        string.Format("{0}", rn11A),
                        string.Format("{0}", rn12A),
                        string.Format("{0}", rn13A),
                        string.Format("{0}", rn14A),
                        string.Format("{0}", rn15A),
                        string.Format("{0}", subPayCodeX1A)});
#line 718
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table180, "And ");
#line hidden
            TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table181.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3)});
#line 721
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table181, "And ");
#line hidden
            TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table182.AddRow(new string[] {
                        string.Format("{0}", componentRate1A),
                        string.Format("{0}", group1A),
                        string.Format("{0}", inputGroup1A),
                        string.Format("{0}", sequence1A),
                        string.Format("{0}", componentRate2A),
                        string.Format("{0}", group2A),
                        string.Format("{0}", inputGroup2A),
                        string.Format("{0}", sequence2A),
                        string.Format("{0}", componentRate3A),
                        string.Format("{0}", group3A),
                        string.Format("{0}", inputGroup3A),
                        string.Format("{0}", sequence3A)});
#line 724
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table182, "And ");
#line hidden
            TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table183.AddRow(new string[] {
                        string.Format("{0}", componentRate1B),
                        string.Format("{0}", group1B),
                        string.Format("{0}", inputGroup1B),
                        string.Format("{0}", sequence1B),
                        string.Format("{0}", componentRate2B),
                        string.Format("{0}", group2B),
                        string.Format("{0}", inputGroup2B),
                        string.Format("{0}", sequence2B),
                        string.Format("{0}", componentRate3B),
                        string.Format("{0}", group3B),
                        string.Format("{0}", inputGroup3B),
                        string.Format("{0}", sequence3B)});
#line 727
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table183, "And ");
#line hidden
            TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table184.AddRow(new string[] {
                        string.Format("{0}", componentRate1C),
                        string.Format("{0}", group1C),
                        string.Format("{0}", inputGroup1C),
                        string.Format("{0}", sequence1C),
                        string.Format("{0}", componentRate2C),
                        string.Format("{0}", group2C),
                        string.Format("{0}", inputGroup2C),
                        string.Format("{0}", sequence2C),
                        string.Format("{0}", componentRate3C),
                        string.Format("{0}", group3C),
                        string.Format("{0}", inputGroup3C),
                        string.Format("{0}", sequence3C)});
#line 730
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table184, "And ");
#line hidden
            TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table185.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 733
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table185, "And ");
#line hidden
            TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount",
                        "PaymentAccount1",
                        "PaymentAccount2"});
            table186.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount),
                        string.Format("{0}", paymentAccount1),
                        string.Format("{0}", paymentAccount2)});
#line 736
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table186, "And ");
#line hidden
            TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table187.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 739
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table187, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Dividend Payment Setup-Payment14")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Test1", "S", "00023", "", "1", "1", "1", "1", "", "M", "C", "A", "", "N", "0023", "IN", "0023 AUTOMATION TEST", "D", "N", "N", "N", "", "Y", "DIV1", "D", "", "", "", "", "", "", "", "", "N", "", "N", "", "", "1", "N", "N", "Y", "4", "", "DRP4", "", "I9999999104", "Y", "", "", "Y", "N", "", "I", "", "", "DRP", "", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "Y", "Y", "A", "N", "AUS", "I9999999112", "", "", "N", "04", "DIV1", "D", "(Dividend)", "$1.10 cents", "1.10000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", "Y", "Y", "Y", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "DIV1", ".30000000", "", "", "", ".40000000", "", "", "", ".40000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "AUD", "B", "Y", "Y", "Y", "N", "1.00", "999", "N", "", "N", "T", "999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Y", "00023", "", "", "N", "A", ".330000", "", "", "", "", "", "N", "N", "", "", "", "Y", "", "Y", "", "Y", "EX", null)]
        public virtual void TestCaseDividendPaymentSetup_Payment14(
                    string test, 
                    string action, 
                    string reinitiateSearch, 
                    string paymentDate1, 
                    string lineSelectionXOC, 
                    string lineSelectionXRC, 
                    string lineSelectionOD, 
                    string lineSelectionRD, 
                    string lineSelectionFC, 
                    string dcrReplaceType, 
                    string action1, 
                    string action2, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string paymentsPerYear, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string subPayCodeX1, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string componentRate4, 
                    string group4, 
                    string inputGroup4, 
                    string sequence4, 
                    string componentRate5, 
                    string group5, 
                    string inputGroup5, 
                    string sequence5, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string paymentAccount1, 
                    string paymentAccount2, 
                    string planScalebackApply, 
                    string statementScripSeq, 
                    string costShares, 
                    string certAllotDate, 
                    string planStartRef, 
                    string overrideMnyClassInd, 
                    string overrideMnyBFClass, 
                    string overrideMnyCFClass, 
                    string minPartOption, 
                    string maxRestriction, 
                    string tranTypeCode, 
                    string tradeRef, 
                    string deductionCode1, 
                    string deductionCodeInd1, 
                    string deductionCode2, 
                    string deductionCodeInd2, 
                    string deductionCode3, 
                    string deductionCodeInd3, 
                    string option2, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Dividend Payment Setup-Payment14", @__tags);
#line 749
this.ScenarioSetup(scenarioInfo);
#line 750
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 751
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 752
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 753
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 754
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table188.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 755
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table188, "And ");
#line 758
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 759
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 760
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 761
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 762
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table189.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 763
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table189, "And ");
#line hidden
            TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table190.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 766
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table190, "And ");
#line hidden
            TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table191.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 769
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table191, "And ");
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table192.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 772
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table192, "And ");
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table193.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 775
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table193, "And ");
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table194.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 778
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table194, "And ");
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table195.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 781
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table195, "And ");
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table196.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 784
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table196, "And ");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table197.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 787
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table197, "And ");
#line hidden
            TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table198.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 790
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table198, "And ");
#line hidden
            TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table199.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 793
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table199, "And ");
#line hidden
            TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table200.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 796
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table200, "And ");
#line hidden
            TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3",
                        "ComponentRate4",
                        "Group4",
                        "InputGroup4",
                        "Sequence4",
                        "ComponentRate5",
                        "Group5",
                        "InputGroup5",
                        "Sequence5"});
            table201.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3),
                        string.Format("{0}", componentRate4),
                        string.Format("{0}", group4),
                        string.Format("{0}", inputGroup4),
                        string.Format("{0}", sequence4),
                        string.Format("{0}", componentRate5),
                        string.Format("{0}", group5),
                        string.Format("{0}", inputGroup5),
                        string.Format("{0}", sequence5)});
#line 799
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table201, "And ");
#line hidden
            TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table202.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 802
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table202, "And ");
#line hidden
            TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount",
                        "PaymentAccount1",
                        "PaymentAccount2"});
            table203.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount),
                        string.Format("{0}", paymentAccount1),
                        string.Format("{0}", paymentAccount2)});
#line 805
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table203, "And ");
#line hidden
            TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlanScalebackApply",
                        "StatementScripSeq"});
            table204.AddRow(new string[] {
                        string.Format("{0}", planScalebackApply),
                        string.Format("{0}", statementScripSeq)});
#line 808
  testRunner.And("In DIVX1050 I setup the Dividend Control Update as:", ((string)(null)), table204, "And ");
#line hidden
            TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                        "CostShares",
                        "CertAllotDate",
                        "PlanStartRef",
                        "OverrideMnyClassInd",
                        "OverrideMnyBFClass",
                        "OverrideMnyCFClass",
                        "MinPartOption",
                        "MaxRestriction",
                        "TranTypeCode",
                        "TradeRef",
                        "DeductionCode1",
                        "DeductionCodeInd1",
                        "DeductionCode2",
                        "DeductionCodeInd2",
                        "DeductionCode3",
                        "DeductionCodeInd3"});
            table205.AddRow(new string[] {
                        string.Format("{0}", costShares),
                        string.Format("{0}", certAllotDate),
                        string.Format("{0}", planStartRef),
                        string.Format("{0}", overrideMnyClassInd),
                        string.Format("{0}", overrideMnyBFClass),
                        string.Format("{0}", overrideMnyCFClass),
                        string.Format("{0}", minPartOption),
                        string.Format("{0}", maxRestriction),
                        string.Format("{0}", tranTypeCode),
                        string.Format("{0}", tradeRef),
                        string.Format("{0}", deductionCode1),
                        string.Format("{0}", deductionCodeInd1),
                        string.Format("{0}", deductionCode2),
                        string.Format("{0}", deductionCodeInd2),
                        string.Format("{0}", deductionCode3),
                        string.Format("{0}", deductionCodeInd3)});
#line 811
  testRunner.And("In DIVX1052 I setup the Dividend Control Update as:", ((string)(null)), table205, "And ");
#line hidden
            TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table206.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 814
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table206, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Dividend Payment Setup-Payment16")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Test1", "", "N", "0025", "IN", "0025 AUTOMATION TEST", "D", "N", "N", "N", "", "Y", "DIV1", "D", "", "", "", "", "", "", "", "", "N", "", "N", "", "", "", "N", "N", "N", "", "", "", "", "", "", "", "", "Y", "", "", "", "ORD", "FP", "Ordinary class", "fully paid", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "Y", "Y", "A", "Y", "AUS", "I9999999112", "", "", "N", "N", "N", "Y", "N", "N", "N", "", "", "", "", "", "", "", "", "", "1", "", "", "", "", "ORD", "DIV1", "D", "(Dividend)", "0.05", "0.05000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", "FP", "DIV1", "D", "(Dividend)", "0.02", "0.02000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", "Y", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "DIV1", "0.05000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "0.02000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "AUD", "B", "Y", "N", "Y", "N", "1.00", "999", "N", "", "N", "T", "999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "88", "N", "", "", "", "EX", "1", "C0000000002", "M00L", null)]
        public virtual void TestCaseDividendPaymentSetup_Payment16(
                    string test, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string paymentsPerYear, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string seq1, 
                    string seq2, 
                    string seq3, 
                    string seq4, 
                    string seq5, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string classCat2A, 
                    string subPayCodeA, 
                    string paymentTypeA, 
                    string typeDescriptionA, 
                    string paymentRateDesc1A, 
                    string paymentRate1A, 
                    string additionalRate1A, 
                    string reportableRate1A, 
                    string compBrkdwnMethodA, 
                    string paymentRateDesc2A, 
                    string paymentRate2A, 
                    string additionalRate2A, 
                    string reportableRate2A, 
                    string compBrkdwnMethod2A, 
                    string rn1A, 
                    string rn2A, 
                    string rn3A, 
                    string rn4A, 
                    string rn5A, 
                    string rn6A, 
                    string rn7A, 
                    string rn8A, 
                    string rn9A, 
                    string rn10A, 
                    string rn11A, 
                    string rn12A, 
                    string rn13A, 
                    string rn14A, 
                    string rn15A, 
                    string subPayCodeX1A, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string componentRate4, 
                    string group4, 
                    string inputGroup4, 
                    string sequence4, 
                    string componentRate5, 
                    string group5, 
                    string inputGroup5, 
                    string sequence5, 
                    string componentRate1A, 
                    string group1A, 
                    string inputGroup1A, 
                    string sequence1A, 
                    string componentRate2A, 
                    string group2A, 
                    string inputGroup2A, 
                    string sequence2A, 
                    string componentRate3A, 
                    string group3A, 
                    string inputGroup3A, 
                    string sequence3A, 
                    string componentRate4A, 
                    string group4A, 
                    string inputGroup4A, 
                    string sequence4A, 
                    string componentRate5A, 
                    string group5A, 
                    string inputGroup5A, 
                    string sequence5A, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string bulkCode, 
                    string buildRequired, 
                    string reconAccount, 
                    string paymentAccount1, 
                    string paymentAccount2, 
                    string option2, 
                    string action, 
                    string controlHolderID, 
                    string chargeCode, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Dividend Payment Setup-Payment16", @__tags);
#line 825
this.ScenarioSetup(scenarioInfo);
#line 826
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 827
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 828
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 829
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 830
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table207.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 831
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table207, "And ");
#line hidden
            TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table208.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 834
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table208, "And ");
#line hidden
            TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table209.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 837
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table209, "And ");
#line hidden
            TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table210.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 840
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table210, "And ");
#line hidden
            TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table211.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 843
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table211, "And ");
#line hidden
            TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table212.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 846
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table212, "And ");
#line hidden
            TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table213.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 849
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table213, "And ");
#line hidden
            TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table214.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 852
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table214, "And ");
#line hidden
            TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table215.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 855
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table215, "And ");
#line hidden
            TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table216.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 858
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table216, "And ");
#line hidden
            TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15"});
            table217.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15)});
#line 861
  testRunner.And("In DIVX1030 I setup the Dividend Control Update as:", ((string)(null)), table217, "And ");
#line hidden
            TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                        "Seq1",
                        "Seq2",
                        "Seq3",
                        "Seq4",
                        "Seq5",
                        "Action",
                        "ControlHolderID",
                        "ChargeCode"});
            table218.AddRow(new string[] {
                        string.Format("{0}", seq1),
                        string.Format("{0}", seq2),
                        string.Format("{0}", seq3),
                        string.Format("{0}", seq4),
                        string.Format("{0}", seq5),
                        string.Format("{0}", action),
                        string.Format("{0}", controlHolderID),
                        string.Format("{0}", chargeCode)});
#line 864
  testRunner.And("In DIVX1031 I setup the Dividend Control Update as:", ((string)(null)), table218, "And ");
#line hidden
            TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table219.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 867
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table219, "And ");
#line hidden
            TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table220.AddRow(new string[] {
                        string.Format("{0}", classCat2A),
                        string.Format("{0}", subPayCodeA),
                        string.Format("{0}", paymentTypeA),
                        string.Format("{0}", typeDescriptionA),
                        string.Format("{0}", paymentRateDesc1A),
                        string.Format("{0}", paymentRate1A),
                        string.Format("{0}", additionalRate1A),
                        string.Format("{0}", reportableRate1A),
                        string.Format("{0}", compBrkdwnMethodA),
                        string.Format("{0}", paymentRateDesc2A),
                        string.Format("{0}", paymentRate2A),
                        string.Format("{0}", additionalRate2A),
                        string.Format("{0}", reportableRate2A),
                        string.Format("{0}", compBrkdwnMethod2A)});
#line 870
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table220, "And ");
#line hidden
            TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table221.AddRow(new string[] {
                        string.Format("{0}", rn1A),
                        string.Format("{0}", rn2A),
                        string.Format("{0}", rn3A),
                        string.Format("{0}", rn4A),
                        string.Format("{0}", rn5A),
                        string.Format("{0}", rn6A),
                        string.Format("{0}", rn7A),
                        string.Format("{0}", rn8A),
                        string.Format("{0}", rn9A),
                        string.Format("{0}", rn10A),
                        string.Format("{0}", rn11A),
                        string.Format("{0}", rn12A),
                        string.Format("{0}", rn13A),
                        string.Format("{0}", rn14A),
                        string.Format("{0}", rn15A),
                        string.Format("{0}", subPayCodeX1A)});
#line 873
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table221, "And ");
#line hidden
            TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3",
                        "ComponentRate4",
                        "Group4",
                        "InputGroup4",
                        "Sequence4",
                        "ComponentRate5",
                        "Group5",
                        "InputGroup5",
                        "Sequence5"});
            table222.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3),
                        string.Format("{0}", componentRate4),
                        string.Format("{0}", group4),
                        string.Format("{0}", inputGroup4),
                        string.Format("{0}", sequence4),
                        string.Format("{0}", componentRate5),
                        string.Format("{0}", group5),
                        string.Format("{0}", inputGroup5),
                        string.Format("{0}", sequence5)});
#line 876
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table222, "And ");
#line hidden
            TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3",
                        "ComponentRate4",
                        "Group4",
                        "InputGroup4",
                        "Sequence4",
                        "ComponentRate5",
                        "Group5",
                        "InputGroup5",
                        "Sequence5"});
            table223.AddRow(new string[] {
                        string.Format("{0}", componentRate1A),
                        string.Format("{0}", group1A),
                        string.Format("{0}", inputGroup1A),
                        string.Format("{0}", sequence1A),
                        string.Format("{0}", componentRate2A),
                        string.Format("{0}", group2A),
                        string.Format("{0}", inputGroup2A),
                        string.Format("{0}", sequence2A),
                        string.Format("{0}", componentRate3A),
                        string.Format("{0}", group3A),
                        string.Format("{0}", inputGroup3A),
                        string.Format("{0}", sequence3A),
                        string.Format("{0}", componentRate4A),
                        string.Format("{0}", group4A),
                        string.Format("{0}", inputGroup4A),
                        string.Format("{0}", sequence4A),
                        string.Format("{0}", componentRate5A),
                        string.Format("{0}", group5A),
                        string.Format("{0}", inputGroup5A),
                        string.Format("{0}", sequence5A)});
#line 879
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table223, "And ");
#line hidden
            TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table224.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 882
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table224, "And ");
#line hidden
            TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                        "BulkCode"});
            table225.AddRow(new string[] {
                        string.Format("{0}", bulkCode)});
#line 885
  testRunner.And("In DIVX1048 I setup the Dividend Control Update as:", ((string)(null)), table225, "And ");
#line hidden
            TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount",
                        "PaymentAccount1",
                        "PaymentAccount2"});
            table226.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount),
                        string.Format("{0}", paymentAccount1),
                        string.Format("{0}", paymentAccount2)});
#line 888
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table226, "And ");
#line hidden
            TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table227.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 891
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table227, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Dividend Payment Setup-Payment17")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Test1", "", "N", "0026", "IN", "0026 AUTOMATION TEST", "D", "N", "N", "N", "", "Y", "DIV1", "D", "", "", "", "", "", "", "", "", "N", "", "N", "", "", "", "N", "Y", "N", "", "", "", "", "", "", "", "", "Y", "", "", "", "ORD", "", "Ordinary", "", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "Y", "Y", "A", "N", "AUS", "I9999999112", "", "", "N", "ORD", "DIV1", "D", "(Dividend)", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", "Y", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "DIV1", "1.10000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "AUD", "B", "Y", "N", "Y", "N", "1.00", "999", "N", "", "N", "T", "999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "N", "", "", "", "Z", "ORD", "DIV1", "D", "(Dividend)", "Ten cents", ".10000000", "0.00000000", "0.00000000", "R", "", "", "", "", "", "N", "N", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "DIV1", ".10000000", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "ZAR", "N", "", "", "", "", "", "", "", "", "", "T", "99", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "EX", null)]
        public virtual void TestCaseDividendPaymentSetup_Payment17(
                    string test, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string paymentsPerYear, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string subPayCodeX1, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string componentRate4, 
                    string group4, 
                    string inputGroup4, 
                    string sequence4, 
                    string componentRate5, 
                    string group5, 
                    string inputGroup5, 
                    string sequence5, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string paymentAccount1, 
                    string paymentAccount2, 
                    string option2, 
                    string classCat2A, 
                    string subPayCodeA, 
                    string paymentTypeA, 
                    string typeDescriptionA, 
                    string paymentRateDesc1A, 
                    string paymentRate1A, 
                    string additionalRate1A, 
                    string reportableRate1A, 
                    string compBrkdwnMethodA, 
                    string paymentRateDesc2A, 
                    string paymentRate2A, 
                    string additionalRate2A, 
                    string reportableRate2A, 
                    string compBrkdwnMethod2A, 
                    string rn1A, 
                    string rn2A, 
                    string rn3A, 
                    string rn4A, 
                    string rn5A, 
                    string rn6A, 
                    string rn7A, 
                    string rn8A, 
                    string rn9A, 
                    string rn10A, 
                    string rn11A, 
                    string rn12A, 
                    string rn13A, 
                    string rn14A, 
                    string rn15A, 
                    string subPayCodeX2, 
                    string componentRate1A, 
                    string group1A, 
                    string inputGroup1A, 
                    string sequence1A, 
                    string componentRate2A, 
                    string group2A, 
                    string inputGroup2A, 
                    string sequence2A, 
                    string componentRate3A, 
                    string group3A, 
                    string inputGroup3A, 
                    string sequence3A, 
                    string componentRate4A, 
                    string group4A, 
                    string inputGroup4A, 
                    string sequence4A, 
                    string componentRate5A, 
                    string group5A, 
                    string inputGroup5A, 
                    string sequence5A, 
                    string baseCurrencyA, 
                    string dIDCApplyA, 
                    string dcrProcessIndA, 
                    string fgnChqApplyIndA, 
                    string orideFCThresIndA, 
                    string coyNamePrintA, 
                    string orideFCThresAmtA, 
                    string didcStartRefA, 
                    string dISortFlagA, 
                    string dCTapeDateA, 
                    string separateBulkA, 
                    string chequesApplyA, 
                    string chequesStartRefA, 
                    string taxDescPrintA, 
                    string chqNumPreprintedA, 
                    string mCApplyA, 
                    string paidCurrencyA, 
                    string mCAllConvRateA, 
                    string mCAllDescA, 
                    string nbrMultCurrencyA, 
                    string mCCurrency1A, 
                    string mCConversionRate1A, 
                    string mCConversionDesc1A, 
                    string directCreditApply1A, 
                    string chequesApply1A, 
                    string mCDomCode11A, 
                    string mCDomCode12A, 
                    string mCStartRefNumber1A, 
                    string mCChqNumPreprinted1A, 
                    string mCCurrency2A, 
                    string mCConversionRate2A, 
                    string mCConversionDesc2A, 
                    string directCreditApply2A, 
                    string chequesApply2A, 
                    string mCDomCode21A, 
                    string mCDomCode22A, 
                    string mCStartRefNumber2A, 
                    string mCChqNumPreprinted2A, 
                    string option3, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Dividend Payment Setup-Payment17", @__tags);
#line 902
this.ScenarioSetup(scenarioInfo);
#line 903
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 904
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 905
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 906
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 907
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table228.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 908
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table228, "And ");
#line hidden
            TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table229.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 911
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table229, "And ");
#line hidden
            TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table230.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 914
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table230, "And ");
#line hidden
            TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table231.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 917
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table231, "And ");
#line hidden
            TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table232.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 920
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table232, "And ");
#line hidden
            TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table233.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 923
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table233, "And ");
#line hidden
            TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table234.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 926
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table234, "And ");
#line hidden
            TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table235.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 929
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table235, "And ");
#line hidden
            TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table236.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 932
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table236, "And ");
#line hidden
            TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table237.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 935
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table237, "And ");
#line hidden
            TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table238.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 938
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table238, "And ");
#line hidden
            TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table239.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 941
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table239, "And ");
#line hidden
            TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3",
                        "ComponentRate4",
                        "Group4",
                        "InputGroup4",
                        "Sequence4",
                        "ComponentRate5",
                        "Group5",
                        "InputGroup5",
                        "Sequence5"});
            table240.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3),
                        string.Format("{0}", componentRate4),
                        string.Format("{0}", group4),
                        string.Format("{0}", inputGroup4),
                        string.Format("{0}", sequence4),
                        string.Format("{0}", componentRate5),
                        string.Format("{0}", group5),
                        string.Format("{0}", inputGroup5),
                        string.Format("{0}", sequence5)});
#line 944
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table240, "And ");
#line hidden
            TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table241.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 947
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table241, "And ");
#line hidden
            TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount",
                        "PaymentAccount1",
                        "PaymentAccount2"});
            table242.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount),
                        string.Format("{0}", paymentAccount1),
                        string.Format("{0}", paymentAccount2)});
#line 950
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table242, "And ");
#line hidden
            TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table243.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 953
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table243, "And ");
#line hidden
            TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table244.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 956
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table244, "And ");
#line hidden
            TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table245.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 959
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table245, "And ");
#line hidden
            TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table246.AddRow(new string[] {
                        string.Format("{0}", classCat2A),
                        string.Format("{0}", subPayCodeA),
                        string.Format("{0}", paymentTypeA),
                        string.Format("{0}", typeDescriptionA),
                        string.Format("{0}", paymentRateDesc1A),
                        string.Format("{0}", paymentRate1A),
                        string.Format("{0}", additionalRate1A),
                        string.Format("{0}", reportableRate1A),
                        string.Format("{0}", compBrkdwnMethodA),
                        string.Format("{0}", paymentRateDesc2A),
                        string.Format("{0}", paymentRate2A),
                        string.Format("{0}", additionalRate2A),
                        string.Format("{0}", reportableRate2A),
                        string.Format("{0}", compBrkdwnMethod2A)});
#line 962
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table246, "And ");
#line hidden
            TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table247.AddRow(new string[] {
                        string.Format("{0}", rn1A),
                        string.Format("{0}", rn2A),
                        string.Format("{0}", rn3A),
                        string.Format("{0}", rn4A),
                        string.Format("{0}", rn5A),
                        string.Format("{0}", rn6A),
                        string.Format("{0}", rn7A),
                        string.Format("{0}", rn8A),
                        string.Format("{0}", rn9A),
                        string.Format("{0}", rn10A),
                        string.Format("{0}", rn11A),
                        string.Format("{0}", rn12A),
                        string.Format("{0}", rn13A),
                        string.Format("{0}", rn14A),
                        string.Format("{0}", rn15A),
                        string.Format("{0}", subPayCodeX2)});
#line 965
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table247, "And ");
#line hidden
            TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3",
                        "ComponentRate4",
                        "Group4",
                        "InputGroup4",
                        "Sequence4",
                        "ComponentRate5",
                        "Group5",
                        "InputGroup5",
                        "Sequence5"});
            table248.AddRow(new string[] {
                        string.Format("{0}", componentRate1A),
                        string.Format("{0}", group1A),
                        string.Format("{0}", inputGroup1A),
                        string.Format("{0}", sequence1A),
                        string.Format("{0}", componentRate2A),
                        string.Format("{0}", group2A),
                        string.Format("{0}", inputGroup2A),
                        string.Format("{0}", sequence2A),
                        string.Format("{0}", componentRate3A),
                        string.Format("{0}", group3A),
                        string.Format("{0}", inputGroup3A),
                        string.Format("{0}", sequence3A),
                        string.Format("{0}", componentRate4A),
                        string.Format("{0}", group4A),
                        string.Format("{0}", inputGroup4A),
                        string.Format("{0}", sequence4A),
                        string.Format("{0}", componentRate5A),
                        string.Format("{0}", group5A),
                        string.Format("{0}", inputGroup5A),
                        string.Format("{0}", sequence5A)});
#line 968
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table248, "And ");
#line hidden
            TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table249.AddRow(new string[] {
                        string.Format("{0}", baseCurrencyA),
                        string.Format("{0}", dIDCApplyA),
                        string.Format("{0}", dcrProcessIndA),
                        string.Format("{0}", fgnChqApplyIndA),
                        string.Format("{0}", orideFCThresIndA),
                        string.Format("{0}", coyNamePrintA),
                        string.Format("{0}", orideFCThresAmtA),
                        string.Format("{0}", didcStartRefA),
                        string.Format("{0}", dISortFlagA),
                        string.Format("{0}", dCTapeDateA),
                        string.Format("{0}", separateBulkA),
                        string.Format("{0}", chequesApplyA),
                        string.Format("{0}", chequesStartRefA),
                        string.Format("{0}", taxDescPrintA),
                        string.Format("{0}", chqNumPreprintedA),
                        string.Format("{0}", mCApplyA),
                        string.Format("{0}", paidCurrencyA),
                        string.Format("{0}", mCAllConvRateA),
                        string.Format("{0}", mCAllDescA),
                        string.Format("{0}", nbrMultCurrencyA),
                        string.Format("{0}", mCCurrency1A),
                        string.Format("{0}", mCConversionRate1A),
                        string.Format("{0}", mCConversionDesc1A),
                        string.Format("{0}", directCreditApply1A),
                        string.Format("{0}", chequesApply1A),
                        string.Format("{0}", mCDomCode11A),
                        string.Format("{0}", mCDomCode12A),
                        string.Format("{0}", mCStartRefNumber1A),
                        string.Format("{0}", mCChqNumPreprinted1A),
                        string.Format("{0}", mCCurrency2A),
                        string.Format("{0}", mCConversionRate2A),
                        string.Format("{0}", mCConversionDesc2A),
                        string.Format("{0}", directCreditApply2A),
                        string.Format("{0}", chequesApply2A),
                        string.Format("{0}", mCDomCode21A),
                        string.Format("{0}", mCDomCode22A),
                        string.Format("{0}", mCStartRefNumber2A),
                        string.Format("{0}", mCChqNumPreprinted2A)});
#line 971
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table249, "And ");
#line hidden
            TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount",
                        "PaymentAccount1",
                        "PaymentAccount2"});
            table250.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount),
                        string.Format("{0}", paymentAccount1),
                        string.Format("{0}", paymentAccount2)});
#line 974
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table250, "And ");
#line hidden
            TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table251.AddRow(new string[] {
                        string.Format("{0}", option3)});
#line 977
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table251, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Capital Payment Setup")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Payment18", "", "N", "0026", "IN", "CAPITAL PAYMENT FOR REFUND CLASS", "C", "N", "N", "N", "", "Y", "CAP1", "C", "", "", "", "", "", "", "", "", "N", "", "", "", "", "", "N", "N", "", "", "", "", "", "", "", "", "", "Y", "", "", "", "REF", "", "Y", "refund", "", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "N", "N", "A", "N", "AUS", "I9999999112", "", "", "N", "REF", "CAP1", "C", "(Capital)", "0.2", ".20000000", "0.00000000", "0.00000000", "R", "", "", "", "", "", "N", "N", "N", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CAP1", ".20000000", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "AUD", "B", "Y", "N", "", "N", "", "99", "N", "", "N", "T", "99", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "N", "", "", "", "EX", null)]
        [NUnit.Framework.TestCaseAttribute("Payment19", "", "N", "0027", "IN", "CAPITAL PAYMENT FOR REFUND CLASS", "C", "N", "N", "N", "", "Y", "CAP1", "C", "", "", "", "", "", "", "", "", "N", "", "", "", "", "", "N", "N", "", "", "", "", "", "", "", "", "", "Y", "", "", "", "REF", "", "N", "refund", "", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "N", "N", "A", "N", "AUS", "I9999999112", "", "", "N", "REF", "CAP1", "C", "(Capital)", "0.2", ".20000000", "0.00000000", "0.00000000", "R", "", "", "", "", "", "N", "N", "N", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CAP1", ".20000000", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "AUD", "B", "Y", "N", "", "N", "", "99", "N", "", "N", "T", "99", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "N", "", "", "", "EX", null)]
        public virtual void TestCaseCapitalPaymentSetup(
                    string test, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string paymentsPerYear, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string reduceRefClass, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string subPayCodeX1, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string componentRate4, 
                    string group4, 
                    string inputGroup4, 
                    string sequence4, 
                    string componentRate5, 
                    string group5, 
                    string inputGroup5, 
                    string sequence5, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string paymentAccount1, 
                    string paymentAccount2, 
                    string option2, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Capital Payment Setup", @__tags);
#line 987
this.ScenarioSetup(scenarioInfo);
#line 988
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 989
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 990
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 991
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 992
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table252.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 993
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table252, "And ");
#line hidden
            TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table253.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 996
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table253, "And ");
#line hidden
            TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table254.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 999
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table254, "And ");
#line hidden
            TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table255.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 1002
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table255, "And ");
#line hidden
            TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table256.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 1005
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table256, "And ");
#line hidden
            TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table257.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 1008
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table257, "And ");
#line hidden
            TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReduceRefClass"});
            table258.AddRow(new string[] {
                        string.Format("{0}", reduceRefClass)});
#line 1011
  testRunner.And("In DIVX1019 I setup the Dividend Control Update as:", ((string)(null)), table258, "And ");
#line hidden
            TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table259.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 1014
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table259, "And ");
#line hidden
            TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table260.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 1017
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table260, "And ");
#line hidden
            TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table261.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 1020
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table261, "And ");
#line hidden
            TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table262.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 1023
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table262, "And ");
#line hidden
            TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table263.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 1026
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table263, "And ");
#line hidden
            TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table264.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 1029
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table264, "And ");
#line hidden
            TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3",
                        "ComponentRate4",
                        "Group4",
                        "InputGroup4",
                        "Sequence4",
                        "ComponentRate5",
                        "Group5",
                        "InputGroup5",
                        "Sequence5"});
            table265.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3),
                        string.Format("{0}", componentRate4),
                        string.Format("{0}", group4),
                        string.Format("{0}", inputGroup4),
                        string.Format("{0}", sequence4),
                        string.Format("{0}", componentRate5),
                        string.Format("{0}", group5),
                        string.Format("{0}", inputGroup5),
                        string.Format("{0}", sequence5)});
#line 1032
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table265, "And ");
#line hidden
            TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table266.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 1035
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table266, "And ");
#line hidden
            TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount",
                        "PaymentAccount1",
                        "PaymentAccount2"});
            table267.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount),
                        string.Format("{0}", paymentAccount1),
                        string.Format("{0}", paymentAccount2)});
#line 1038
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table267, "And ");
#line hidden
            TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table268.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 1041
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table268, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Capital Payment Setup-EndtoEnd")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Payment5", "", "1", "1", "1", "1", "", "M", "C", "S", "00014", "A", "", "N", "0014", "IN", "0014 AUTOMATION TEST", "C", "N", "N", "N", "", "Y", "CAP1", "C", "", "", "", "", "", "", "", "", "N", "", "", "", "", "N", "N", "", "", "", "", "", "", "", "", "", "Y", "", "", "", "ORD", "", "Ordinary", "", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "N", "", "A", "N", "AUS", "I9999999112", "", "", "N", "ORD", "CAP1", "C", "(Capital)", "$1.10 payment rate", "1.10000000", "0.00000000", "0.00000000", "R", "", "", "", "", "", "N", "N", "N", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "1.1", "", "", "", "", "", "", "", "", "", "", "", "AUD", "B", "Y", "Y", "Y", "Y", "1.00", "999", "N", "", "N", "T", "999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Y", "00014", "EX", "APPS", "CALC", "Y", "BULD", "CONFIRM", "CAP1", "1", null)]
        public virtual void TestCaseCapitalPaymentSetup_EndtoEnd(
                    string test, 
                    string paymentDate1, 
                    string lineSelectionXOC, 
                    string lineSelectionXRC, 
                    string lineSelectionOD, 
                    string lineSelectionRD, 
                    string lineSelectionFC, 
                    string dcrReplaceType, 
                    string action1, 
                    string action, 
                    string reinitiateSearch, 
                    string action2, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string option2, 
                    string selection, 
                    string selection1, 
                    string nightlyRunInd, 
                    string selection2, 
                    string action3, 
                    string subPayCodeX1, 
                    string paymentsPerYear, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Capital Payment Setup-EndtoEnd", @__tags);
#line 1053
this.ScenarioSetup(scenarioInfo);
#line 1054
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1055
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1056
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1057
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1058
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table269.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 1059
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table269, "And ");
#line 1062
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1063
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1064
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1065
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1066
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table270.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 1067
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table270, "And ");
#line hidden
            TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table271.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 1070
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table271, "And ");
#line hidden
            TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table272.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 1073
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table272, "And ");
#line hidden
            TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table273.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 1076
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table273, "And ");
#line hidden
            TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table274.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 1079
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table274, "And ");
#line hidden
            TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table275.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 1082
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table275, "And ");
#line hidden
            TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table276.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 1085
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table276, "And ");
#line hidden
            TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table277.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 1088
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table277, "And ");
#line hidden
            TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table278.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 1091
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table278, "And ");
#line hidden
            TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table279.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 1094
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table279, "And ");
#line hidden
            TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table280.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 1097
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table280, "And ");
#line hidden
            TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table281.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 1100
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table281, "And ");
#line hidden
            TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table282.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3)});
#line 1103
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table282, "And ");
#line hidden
            TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table283.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 1106
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table283, "And ");
#line hidden
            TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount"});
            table284.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount)});
#line 1109
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table284, "And ");
#line hidden
            TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table285.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 1112
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table285, "And ");
#line 1115
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1116
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1117
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1118
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1119
  testRunner.And("In SPS00102 I clcik on: \"payment job release monitor\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputDividendCode"});
            table286.AddRow(new string[] {
                        string.Format("{0}", inputDivCode)});
#line 1120
  testRunner.And("In DIS05010 I Enter Payment Automated Job Release details as:", ((string)(null)), table286, "And ");
#line hidden
            TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table287.AddRow(new string[] {
                        string.Format("{0}", selection)});
#line 1123
  testRunner.And("In DIS05030 I Enter Payment Automated Job Release details as:", ((string)(null)), table287, "And ");
#line 1126
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table288.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT",
                        "",
                        ""});
#line 1127
  testRunner.And("In JOBSUB90 I submit the report", ((string)(null)), table288, "And ");
#line 1130
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1131
  testRunner.And("In SPS00102 I clcik on: \"payment job release monitor\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputDividendCode"});
            table289.AddRow(new string[] {
                        string.Format("{0}", inputDivCode)});
#line 1132
  testRunner.And("In DIS05010 I Enter Payment Automated Job Release details as:", ((string)(null)), table289, "And ");
#line hidden
            TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table290.AddRow(new string[] {
                        string.Format("{0}", selection1)});
#line 1135
  testRunner.And("In DIS05030 I Enter Payment Automated Job Release details as:", ((string)(null)), table290, "And ");
#line 1138
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table291 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table291.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT",
                        "",
                        ""});
#line 1139
  testRunner.And("In JOBSUB90 I submit the report", ((string)(null)), table291, "And ");
#line 1142
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1143
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1144
  testRunner.And("In MNS00101 I click on: \"reporting system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1145
  testRunner.And("In RSS00101 I click on: \"schedule transaction reporting run\" within the Reporting" +
                    " System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table292 = new TechTalk.SpecFlow.Table(new string[] {
                        "NightlyRunInd"});
            table292.AddRow(new string[] {
                        string.Format("{0}", nightlyRunInd)});
#line 1146
  testRunner.And("In RSS25010 I Enter URR Parameter as:", ((string)(null)), table292, "And ");
#line 1149
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table293 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table293.AddRow(new string[] {
                        "completion",
                        "800",
                        "error",
                        "DONE",
                        "EXIT",
                        "DIV_END_CALC_0014_D_DIV_A",
                        ""});
#line 1150
  testRunner.And("In JOBSUB90 I submit URR report for Dividend Job", ((string)(null)), table293, "And ");
#line 1153
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1154
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1155
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1156
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1157
  testRunner.And("In SPS00102 I clcik on: \"payment job release monitor\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table294 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputDividendCode"});
            table294.AddRow(new string[] {
                        string.Format("{0}", inputDivCode)});
#line 1158
  testRunner.And("In DIS05010 I Enter Payment Automated Job Release details as:", ((string)(null)), table294, "And ");
#line hidden
            TechTalk.SpecFlow.Table table295 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table295.AddRow(new string[] {
                        string.Format("{0}", selection2)});
#line 1161
  testRunner.And("In DIS05030 I Enter Payment Automated Job Release details as:", ((string)(null)), table295, "And ");
#line 1164
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table296 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table296.AddRow(new string[] {
                        "completion",
                        "800",
                        "error",
                        "DONE",
                        "EXIT",
                        "DIV_PAY_COMBINE_0014_DIV_A",
                        ""});
#line 1165
  testRunner.And("In JOBSUB90 I submit the report", ((string)(null)), table296, "And ");
#line 1168
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1169
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1170
  testRunner.And("In MNS00101 I click on: \"reporting system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1171
  testRunner.And("In RSS00101 I click on: \"schedule transaction reporting run\" within the Reporting" +
                    " System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table297 = new TechTalk.SpecFlow.Table(new string[] {
                        "NightlyRunInd",
                        "Action"});
            table297.AddRow(new string[] {
                        string.Format("{0}", nightlyRunInd),
                        string.Format("{0}", action3)});
#line 1172
  testRunner.And("In RSS25010 I Enter URR Parameter as:", ((string)(null)), table297, "And ");
#line 1175
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table298 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table298.AddRow(new string[] {
                        "completion",
                        "800",
                        "error",
                        "DONE",
                        "EXIT",
                        "",
                        ""});
#line 1176
  testRunner.And("In JOBSUB90 I submit URR report for Dividend Job", ((string)(null)), table298, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Dividend Payment Setup EndtoEnd")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Payment15", "S", "00024", "", "1", "1", "1", "1", "", "M", "C", "A", "", "N", "0024", "IN", "0024 AUTOMATION TEST", "D", "N", "N", "N", "", "Y", "DIV1", "D", "", "", "", "", "", "", "", "", "N", "", "N", "", "", "", "N", "N", "Y", "4", "5", "DRP4", "DRP5", "I9999999104", "Y", "", "", "Y", "N", "", "I", "", "", "Ordinary - 04", "Ordinary - 05", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "Y", "Y", "A", "N", "AUS", "I9999999112", "", "", "N", "04", "DIV1", "D", "(Dividend)", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", "05", "DIV1", "D", "(Dividend)", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "", "", "", "", "", "Y", "Y", "N", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "DIV1", ".70000000", "", "", "", ".40000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "", "", "", "", ".40000000", "", "", "", ".70000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "", "", "", "", "AUD", "B", "Y", "Y", "Y", "N", "1.00", "999", "N", "", "N", "T", "999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Y", "00024", "", "", "N", "A", ".165000", "", "", "", "", "", "N", "N", "", "", "", "Y", "", "Y", "", "Y", ".165000", ".165000", "EX", "Y", "", "calc", "apps", "Y", "allt", "buld", "CONFIRM", null)]
        public virtual void TestCaseDividendPaymentSetupEndtoEnd(
                    string test, 
                    string action, 
                    string reinitiateSearch, 
                    string paymentDate1, 
                    string lineSelectionXOC, 
                    string lineSelectionXRC, 
                    string lineSelectionOD, 
                    string lineSelectionRD, 
                    string lineSelectionFC, 
                    string dcrReplaceType, 
                    string action1, 
                    string action2, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string paymentsPerYear, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string classCat2A, 
                    string subPayCodeA, 
                    string paymentTypeA, 
                    string typeDescriptionA, 
                    string paymentRateDesc1A, 
                    string paymentRate1A, 
                    string additionalRate1A, 
                    string reportableRate1A, 
                    string compBrkdwnMethodA, 
                    string paymentRateDesc2A, 
                    string paymentRate2A, 
                    string additionalRate2A, 
                    string reportableRate2A, 
                    string compBrkdwnMethod2A, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string subPayCodeX1, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string componentRate4, 
                    string group4, 
                    string inputGroup4, 
                    string sequence4, 
                    string componentRate5, 
                    string group5, 
                    string inputGroup5, 
                    string sequence5, 
                    string componentRate1A, 
                    string group1A, 
                    string inputGroup1A, 
                    string sequence1A, 
                    string componentRate2A, 
                    string group2A, 
                    string inputGroup2A, 
                    string sequence2A, 
                    string componentRate3A, 
                    string group3A, 
                    string inputGroup3A, 
                    string sequence3A, 
                    string componentRate4A, 
                    string group4A, 
                    string inputGroup4A, 
                    string sequence4A, 
                    string componentRate5A, 
                    string group5A, 
                    string inputGroup5A, 
                    string sequence5A, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string paymentAccount1, 
                    string paymentAccount2, 
                    string planScalebackApply, 
                    string statementScripSeq, 
                    string costShares, 
                    string certAllotDate, 
                    string planStartRef, 
                    string overrideMnyClassInd, 
                    string overrideMnyBFClass, 
                    string overrideMnyCFClass, 
                    string minPartOption, 
                    string maxRestriction, 
                    string tranTypeCode, 
                    string tradeRef, 
                    string deductionCode1, 
                    string deductionCodeInd1, 
                    string deductionCode2, 
                    string deductionCodeInd2, 
                    string deductionCode3, 
                    string deductionCodeInd3, 
                    string catCostShare1, 
                    string catCostShare2, 
                    string option2, 
                    string costSharesKnownInd, 
                    string knowBefPayDateInd, 
                    string selection1, 
                    string selection, 
                    string nightlyRunInd, 
                    string selection3, 
                    string selection4, 
                    string action3, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Dividend Payment Setup EndtoEnd", @__tags);
#line 1185
this.ScenarioSetup(scenarioInfo);
#line 1186
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1187
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1188
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1189
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1190
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table299 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table299.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 1191
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table299, "And ");
#line 1194
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1195
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1196
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1197
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1198
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table300 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table300.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 1199
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table300, "And ");
#line hidden
            TechTalk.SpecFlow.Table table301 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table301.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 1202
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table301, "And ");
#line hidden
            TechTalk.SpecFlow.Table table302 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table302.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 1205
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table302, "And ");
#line hidden
            TechTalk.SpecFlow.Table table303 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table303.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 1208
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table303, "And ");
#line hidden
            TechTalk.SpecFlow.Table table304 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table304.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 1211
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table304, "And ");
#line hidden
            TechTalk.SpecFlow.Table table305 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table305.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 1214
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table305, "And ");
#line hidden
            TechTalk.SpecFlow.Table table306 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table306.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 1217
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table306, "And ");
#line hidden
            TechTalk.SpecFlow.Table table307 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table307.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 1220
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table307, "And ");
#line hidden
            TechTalk.SpecFlow.Table table308 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table308.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 1223
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table308, "And ");
#line hidden
            TechTalk.SpecFlow.Table table309 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table309.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 1226
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table309, "And ");
#line hidden
            TechTalk.SpecFlow.Table table310 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table310.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 1229
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table310, "And ");
#line hidden
            TechTalk.SpecFlow.Table table311 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table311.AddRow(new string[] {
                        string.Format("{0}", classCat2A),
                        string.Format("{0}", subPayCodeA),
                        string.Format("{0}", paymentTypeA),
                        string.Format("{0}", typeDescriptionA),
                        string.Format("{0}", paymentRateDesc1A),
                        string.Format("{0}", paymentRate1A),
                        string.Format("{0}", additionalRate1A),
                        string.Format("{0}", reportableRate1A),
                        string.Format("{0}", compBrkdwnMethodA),
                        string.Format("{0}", paymentRateDesc2A),
                        string.Format("{0}", paymentRate2A),
                        string.Format("{0}", additionalRate2A),
                        string.Format("{0}", reportableRate2A),
                        string.Format("{0}", compBrkdwnMethod2A)});
#line 1232
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table311, "And ");
#line hidden
            TechTalk.SpecFlow.Table table312 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table312.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 1235
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table312, "And ");
#line hidden
            TechTalk.SpecFlow.Table table313 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3",
                        "ComponentRate4",
                        "Group4",
                        "InputGroup4",
                        "Sequence4",
                        "ComponentRate5",
                        "Group5",
                        "InputGroup5",
                        "Sequence5"});
            table313.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3),
                        string.Format("{0}", componentRate4),
                        string.Format("{0}", group4),
                        string.Format("{0}", inputGroup4),
                        string.Format("{0}", sequence4),
                        string.Format("{0}", componentRate5),
                        string.Format("{0}", group5),
                        string.Format("{0}", inputGroup5),
                        string.Format("{0}", sequence5)});
#line 1238
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table313, "And ");
#line hidden
            TechTalk.SpecFlow.Table table314 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3",
                        "ComponentRate4",
                        "Group4",
                        "InputGroup4",
                        "Sequence4",
                        "ComponentRate5",
                        "Group5",
                        "InputGroup5",
                        "Sequence5"});
            table314.AddRow(new string[] {
                        string.Format("{0}", componentRate1A),
                        string.Format("{0}", group1A),
                        string.Format("{0}", inputGroup1A),
                        string.Format("{0}", sequence1A),
                        string.Format("{0}", componentRate2A),
                        string.Format("{0}", group2A),
                        string.Format("{0}", inputGroup2A),
                        string.Format("{0}", sequence2A),
                        string.Format("{0}", componentRate3A),
                        string.Format("{0}", group3A),
                        string.Format("{0}", inputGroup3A),
                        string.Format("{0}", sequence3A),
                        string.Format("{0}", componentRate4A),
                        string.Format("{0}", group4A),
                        string.Format("{0}", inputGroup4A),
                        string.Format("{0}", sequence4A),
                        string.Format("{0}", componentRate5A),
                        "<Group5A>",
                        string.Format("{0}", inputGroup5A),
                        string.Format("{0}", sequence5A)});
#line 1241
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table314, "And ");
#line hidden
            TechTalk.SpecFlow.Table table315 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table315.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 1244
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table315, "And ");
#line hidden
            TechTalk.SpecFlow.Table table316 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount",
                        "PaymentAccount1",
                        "PaymentAccount2"});
            table316.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount),
                        string.Format("{0}", paymentAccount1),
                        string.Format("{0}", paymentAccount2)});
#line 1247
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table316, "And ");
#line hidden
            TechTalk.SpecFlow.Table table317 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlanScalebackApply",
                        "StatementScripSeq"});
            table317.AddRow(new string[] {
                        string.Format("{0}", planScalebackApply),
                        string.Format("{0}", statementScripSeq)});
#line 1250
  testRunner.And("In DIVX1050 I setup the Dividend Control Update as:", ((string)(null)), table317, "And ");
#line hidden
            TechTalk.SpecFlow.Table table318 = new TechTalk.SpecFlow.Table(new string[] {
                        "CostShares",
                        "CertAllotDate",
                        "PlanStartRef",
                        "OverrideMnyClassInd",
                        "OverrideMnyBFClass",
                        "OverrideMnyCFClass",
                        "MinPartOption",
                        "MaxRestriction",
                        "TranTypeCode",
                        "TradeRef",
                        "DeductionCode1",
                        "DeductionCodeInd1",
                        "DeductionCode2",
                        "DeductionCodeInd2",
                        "DeductionCode3",
                        "DeductionCodeInd3",
                        "CatCostShare1",
                        "CatCostShare2"});
            table318.AddRow(new string[] {
                        string.Format("{0}", costShares),
                        string.Format("{0}", certAllotDate),
                        string.Format("{0}", planStartRef),
                        string.Format("{0}", overrideMnyClassInd),
                        string.Format("{0}", overrideMnyBFClass),
                        string.Format("{0}", overrideMnyCFClass),
                        string.Format("{0}", minPartOption),
                        string.Format("{0}", maxRestriction),
                        string.Format("{0}", tranTypeCode),
                        string.Format("{0}", tradeRef),
                        string.Format("{0}", deductionCode1),
                        string.Format("{0}", deductionCodeInd1),
                        string.Format("{0}", deductionCode2),
                        string.Format("{0}", deductionCodeInd2),
                        string.Format("{0}", deductionCode3),
                        string.Format("{0}", deductionCodeInd3),
                        string.Format("{0}", catCostShare1),
                        string.Format("{0}", catCostShare2)});
#line 1253
  testRunner.And("In DIVX1052 I setup the Dividend Control Update as:", ((string)(null)), table318, "And ");
#line hidden
            TechTalk.SpecFlow.Table table319 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table319.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 1256
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table319, "And ");
#line 1259
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1260
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1261
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1262
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1263
  testRunner.And("In SPS00102 I clcik on: \"payment job release monitor\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table320 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputDividendCode"});
            table320.AddRow(new string[] {
                        string.Format("{0}", inputDivCode)});
#line 1264
  testRunner.And("In DIS05010 I Enter Payment Automated Job Release details as:", ((string)(null)), table320, "And ");
#line hidden
            TechTalk.SpecFlow.Table table321 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "CostSharesKnownInd",
                        "KnowBefPayDateInd"});
            table321.AddRow(new string[] {
                        string.Format("{0}", selection),
                        string.Format("{0}", costSharesKnownInd),
                        string.Format("{0}", knowBefPayDateInd)});
#line 1267
  testRunner.And("In DIS05030 I Enter Payment Automated Job Release details as:", ((string)(null)), table321, "And ");
#line 1270
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table322 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table322.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT",
                        "",
                        ""});
#line 1271
  testRunner.And("In JOBSUB90 I submit the report", ((string)(null)), table322, "And ");
#line 1274
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1275
  testRunner.And("In SPS00102 I clcik on: \"payment job release monitor\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table323 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputDividendCode"});
            table323.AddRow(new string[] {
                        string.Format("{0}", inputDivCode)});
#line 1276
  testRunner.And("In DIS05010 I Enter Payment Automated Job Release details as:", ((string)(null)), table323, "And ");
#line hidden
            TechTalk.SpecFlow.Table table324 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table324.AddRow(new string[] {
                        string.Format("{0}", selection1)});
#line 1279
  testRunner.And("In DIS05030 I Enter Payment Automated Job Release details as:", ((string)(null)), table324, "And ");
#line 1282
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table325 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table325.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT",
                        "",
                        ""});
#line 1283
  testRunner.And("In JOBSUB90 I submit the report", ((string)(null)), table325, "And ");
#line 1286
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1287
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1288
  testRunner.And("In MNS00101 I click on: \"reporting system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1289
  testRunner.And("In RSS00101 I click on: \"schedule transaction reporting run\" within the Reporting" +
                    " System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table326 = new TechTalk.SpecFlow.Table(new string[] {
                        "NightlyRunInd"});
            table326.AddRow(new string[] {
                        string.Format("{0}", nightlyRunInd)});
#line 1290
  testRunner.And("In RSS25010 I Enter URR Parameter as:", ((string)(null)), table326, "And ");
#line 1293
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table327 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table327.AddRow(new string[] {
                        "completion",
                        "800",
                        "error",
                        "DONE",
                        "EXIT",
                        "DIV_END_CALC_0024_D_DIV_A",
                        ""});
#line 1294
  testRunner.And("In JOBSUB90 I submit URR report for Dividend Job", ((string)(null)), table327, "And ");
#line 1297
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1298
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1299
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1300
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1301
  testRunner.And("In SPS00102 I clcik on: \"payment job release monitor\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table328 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputDividendCode"});
            table328.AddRow(new string[] {
                        string.Format("{0}", inputDivCode)});
#line 1302
  testRunner.And("In DIS05010 I Enter Payment Automated Job Release details as:", ((string)(null)), table328, "And ");
#line hidden
            TechTalk.SpecFlow.Table table329 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "CostShares1",
                        "CostShares2"});
            table329.AddRow(new string[] {
                        string.Format("{0}", selection3),
                        string.Format("{0}", catCostShare1),
                        string.Format("{0}", catCostShare1)});
#line 1305
  testRunner.And("In DIS05030 I Enter Payment Automated Job Release details as:", ((string)(null)), table329, "And ");
#line 1308
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table330 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table330.AddRow(new string[] {
                        "completion",
                        "800",
                        "error",
                        "DONE",
                        "EXIT",
                        "",
                        ""});
#line 1309
  testRunner.And("In JOBSUB90 I submit the report", ((string)(null)), table330, "And ");
#line 1312
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1313
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1314
  testRunner.And("In MNS00101 I click on: \"reporting system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1315
  testRunner.And("In RSS00101 I click on: \"schedule transaction reporting run\" within the Reporting" +
                    " System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table331 = new TechTalk.SpecFlow.Table(new string[] {
                        "NightlyRunInd"});
            table331.AddRow(new string[] {
                        string.Format("{0}", nightlyRunInd)});
#line 1316
  testRunner.And("In RSS25010 I Enter URR Parameter as:", ((string)(null)), table331, "And ");
#line 1319
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table332 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table332.AddRow(new string[] {
                        "completion",
                        "800",
                        "error",
                        "DONE",
                        "EXIT",
                        "DIV_DIVLST_0024_D_DIV_A",
                        "DIV_PLNALT_0024_D_DIV_A"});
#line 1320
  testRunner.And("In JOBSUB90 I submit URR report for Dividend Job", ((string)(null)), table332, "And ");
#line 1323
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1324
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1325
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1326
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1327
  testRunner.And("In SPS00102 I clcik on: \"payment job release monitor\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table333 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputDividendCode"});
            table333.AddRow(new string[] {
                        string.Format("{0}", inputDivCode)});
#line 1328
  testRunner.And("In DIS05010 I Enter Payment Automated Job Release details as:", ((string)(null)), table333, "And ");
#line hidden
            TechTalk.SpecFlow.Table table334 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table334.AddRow(new string[] {
                        string.Format("{0}", selection4)});
#line 1331
  testRunner.And("In DIS05030 I Enter Payment Automated Job Release details as:", ((string)(null)), table334, "And ");
#line 1334
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table335 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table335.AddRow(new string[] {
                        "completion",
                        "800",
                        "error",
                        "DONE",
                        "EXIT",
                        "DIV_PAY_COMBINE_0024_DIV_A",
                        ""});
#line 1335
  testRunner.And("In JOBSUB90 I submit the report", ((string)(null)), table335, "And ");
#line 1338
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1339
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1340
  testRunner.And("In MNS00101 I click on: \"reporting system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1341
  testRunner.And("In RSS00101 I click on: \"schedule transaction reporting run\" within the Reporting" +
                    " System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table336 = new TechTalk.SpecFlow.Table(new string[] {
                        "NightlyRunInd",
                        "Action"});
            table336.AddRow(new string[] {
                        string.Format("{0}", nightlyRunInd),
                        string.Format("{0}", action3)});
#line 1342
  testRunner.And("In RSS25010 I Enter URR Parameter as:", ((string)(null)), table336, "And ");
#line 1345
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table337 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table337.AddRow(new string[] {
                        "completion",
                        "800",
                        "error",
                        "DONE",
                        "EXIT",
                        "",
                        ""});
#line 1346
  testRunner.And("In JOBSUB90 I submit URR report for Dividend Job", ((string)(null)), table337, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case Distribution Payment Setup EndtoEnd")]
        [NUnit.Framework.CategoryAttribute("PaymentsSystem")]
        [NUnit.Framework.TestCaseAttribute("Payment8", "", "1", "1", "1", "1", "", "M", "C", "S", "00017", "A", "", "N", "0017", "IN", "0017 AUTOMATION TEST", "D", "N", "", "Y", "2", "Y", "DIS1", "S", "DIV1", "D", "", "", "", "", "", "", "N", "", "", "", "", "N", "N", "N", "", "", "", "", "", "", "", "", "Y", "", "", "", "ORD", "", "Ordinary", "", "", "", "D", "DIVIDEND PAYMENT LISTING", "A", "A", "Y", "Y", "A", "N", "AUS", "I9999999112", "", "", "N", "ORD", "DIS1", "S", "(Distribution)", "$1.10 payment rate", "1.10000000", "0.00000000", "0.00000000", "R", "$1.10 payment rate", "1.10000000", "0.00000000", "30.00000000", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "Y", "N", "Y", "Y", "N", "DIS1", "Y", "Y", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "DIV1", ".30000000", "", "", "", ".40000000", "", "", "", ".40000000", "", "", "", "1.10000000", "", "", "", "30.00000000", "", "", "", "", "", "", "", "AUD", "B", "Y", "Y", "Y", "N", "1.00", "999", "N", "", "N", "T", "999", "N", "N", "N", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Y", "00017", "0017A", "0017B", "EX", "0017A", "0017B", "1", "apps", "", "", "calc", "buld", "CONFIRM", "Y", null)]
        public virtual void TestCaseDistributionPaymentSetupEndtoEnd(
                    string test, 
                    string paymentDate1, 
                    string lineSelectionXOC, 
                    string lineSelectionXRC, 
                    string lineSelectionOD, 
                    string lineSelectionRD, 
                    string lineSelectionFC, 
                    string dcrReplaceType, 
                    string action1, 
                    string action, 
                    string reinitiateSearch, 
                    string action2, 
                    string more, 
                    string preload, 
                    string inputDivCode, 
                    string option, 
                    string dividendDescription, 
                    string corporateAction, 
                    string employeeDividend, 
                    string electronicStatements, 
                    string multiplePayments, 
                    string numberOFPayments, 
                    string automatedJobRelease, 
                    string subPay1, 
                    string payTyp1, 
                    string subPay2, 
                    string payTyp2, 
                    string bCRunNumber, 
                    string paymentDate, 
                    string listDate, 
                    string booksCloseDate, 
                    string paidTODate, 
                    string xtrFilnam, 
                    string roundOption, 
                    string rndMultiple, 
                    string mandAllotment, 
                    string planDomRuleInd, 
                    string planTaxCodeRule, 
                    string atoEftLgePayApply, 
                    string dividendSourceApply, 
                    string dividendPlanApply, 
                    string selcat1, 
                    string selcat2, 
                    string dividendPlan1, 
                    string dividendPlan2, 
                    string planHolderID, 
                    string drpPrefOverBspInd, 
                    string selreg11, 
                    string selreg12, 
                    string hidTOPrint, 
                    string deferBuild, 
                    string buildDeferDate, 
                    string eomSelectionCode, 
                    string selcls1, 
                    string selcls2, 
                    string clsDsc1, 
                    string clsDsc2, 
                    string intNbrDays1, 
                    string intNbrDays2, 
                    string option1, 
                    string paymentListingHead, 
                    string paymentSequence, 
                    string chequeAdviceSeq, 
                    string returnMailApply, 
                    string unissuedChqApply, 
                    string tfnPrintFlag, 
                    string deductionsApply, 
                    string taxCtryCode, 
                    string taxHolderIdentifier, 
                    string otherTaxCtryCode, 
                    string otherTaxHolderID, 
                    string fundDistTaxInd, 
                    string classCat2, 
                    string subPayCode, 
                    string paymentType, 
                    string typeDescription, 
                    string paymentRateDesc1, 
                    string paymentRate1, 
                    string additionalRate1, 
                    string reportableRate1, 
                    string compBrkdwnMethod, 
                    string paymentRateDesc2, 
                    string paymentRate2, 
                    string additionalRate2, 
                    string reportableRate2, 
                    string compBrkdwnMethod2, 
                    string rn1, 
                    string rn2, 
                    string rn3, 
                    string rn4, 
                    string rn5, 
                    string rn6, 
                    string rn7, 
                    string rn8, 
                    string rn9, 
                    string rn10, 
                    string rn11, 
                    string rn12, 
                    string rn13, 
                    string rn14, 
                    string rn15, 
                    string subPayCodeX1, 
                    string rn1A, 
                    string rn2A, 
                    string rn3A, 
                    string rn4A, 
                    string rn5A, 
                    string rn6A, 
                    string rn7A, 
                    string rn8A, 
                    string rn9A, 
                    string rn10A, 
                    string rn11A, 
                    string rn12A, 
                    string rn13A, 
                    string rn14A, 
                    string rn15A, 
                    string subPayCodeX2, 
                    string componentRate1, 
                    string group1, 
                    string inputGroup1, 
                    string sequence1, 
                    string componentRate2, 
                    string group2, 
                    string inputGroup2, 
                    string sequence2, 
                    string componentRate3, 
                    string group3, 
                    string inputGroup3, 
                    string sequence3, 
                    string componentRate11, 
                    string group11, 
                    string inputGroup11, 
                    string sequence11, 
                    string componentRate22, 
                    string group22, 
                    string inputGroup22, 
                    string sequence22, 
                    string componentRate33, 
                    string group33, 
                    string inputGroup33, 
                    string sequence33, 
                    string baseCurrency, 
                    string dIDCApply, 
                    string dcrProcessInd, 
                    string fgnChqApplyInd, 
                    string orideFCThresInd, 
                    string coyNamePrint, 
                    string orideFCThresAmt, 
                    string didcStartRef, 
                    string dISortFlag, 
                    string dCTapeDate, 
                    string separateBulk, 
                    string chequesApply, 
                    string chequesStartRef, 
                    string taxDescPrint, 
                    string chqNumPreprinted, 
                    string mCApply, 
                    string paidCurrency, 
                    string mCAllConvRate, 
                    string mCAllDesc, 
                    string nbrMultCurrency, 
                    string mCCurrency1, 
                    string mCConversionRate1, 
                    string mCConversionDesc1, 
                    string directCreditApply1, 
                    string chequesApply1, 
                    string mCDomCode11, 
                    string mCDomCode12, 
                    string mCStartRefNumber1, 
                    string mCChqNumPreprinted1, 
                    string mCCurrency2, 
                    string mCConversionRate2, 
                    string mCConversionDesc2, 
                    string directCreditApply2, 
                    string chequesApply2, 
                    string mCDomCode21, 
                    string mCDomCode22, 
                    string mCStartRefNumber2, 
                    string mCChqNumPreprinted2, 
                    string buildRequired, 
                    string reconAccount, 
                    string paymentAccount1, 
                    string paymentAccount2, 
                    string option2, 
                    string reinitiateSearch1, 
                    string reinitiateSearch2, 
                    string paymentsPerYear, 
                    string selection, 
                    string costSharesKnownInd, 
                    string knowBefPayDateInd, 
                    string selection1, 
                    string selection2, 
                    string action3, 
                    string nightlyRunInd, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PaymentsSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case Distribution Payment Setup EndtoEnd", @__tags);
#line 1358
this.ScenarioSetup(scenarioInfo);
#line 1359
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1360
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1361
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1362
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1363
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table338 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table338.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 1364
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table338, "And ");
#line 1367
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1368
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1369
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1370
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1371
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table339 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table339.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch1),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 1372
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table339, "And ");
#line 1375
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1376
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1377
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1378
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1379
  testRunner.And("In SPS00102 I clcik on: \"define enquire on payment account\" within the system Men" +
                    "u", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table340 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "ReinitiateSearch",
                        "PaymentDate",
                        "LineSelectionXOC",
                        "LineSelectionXRC",
                        "LineSelectionOD",
                        "LineSelectionRD",
                        "LineSelectionFC",
                        "DcrReplaceType",
                        "Action1",
                        "Action2"});
            table340.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", reinitiateSearch2),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", lineSelectionXOC),
                        string.Format("{0}", lineSelectionXRC),
                        string.Format("{0}", lineSelectionOD),
                        string.Format("{0}", lineSelectionRD),
                        string.Format("{0}", lineSelectionFC),
                        string.Format("{0}", dcrReplaceType),
                        string.Format("{0}", action1),
                        string.Format("{0}", action2)});
#line 1380
  testRunner.And("I update Payment Account Number Details as:", ((string)(null)), table340, "And ");
#line 1383
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1384
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1385
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1386
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1387
  testRunner.And("In SPS00102 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table341 = new TechTalk.SpecFlow.Table(new string[] {
                        "More",
                        "Preload",
                        "InputDivCode"});
            table341.AddRow(new string[] {
                        string.Format("{0}", more),
                        string.Format("{0}", preload),
                        string.Format("{0}", inputDivCode)});
#line 1388
  testRunner.And("In DIVX1001 I setup the Dividend Control Update as:", ((string)(null)), table341, "And ");
#line hidden
            TechTalk.SpecFlow.Table table342 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table342.AddRow(new string[] {
                        string.Format("{0}", option)});
#line 1391
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table342, "And ");
#line hidden
            TechTalk.SpecFlow.Table table343 = new TechTalk.SpecFlow.Table(new string[] {
                        "DividendDescription",
                        "CorporateAction",
                        "EmployeeDividend",
                        "ElectronicStatements",
                        "MultiplePayments",
                        "NumberOFPayments",
                        "AutomatedJobRelease"});
            table343.AddRow(new string[] {
                        string.Format("{0}", dividendDescription),
                        string.Format("{0}", corporateAction),
                        string.Format("{0}", employeeDividend),
                        string.Format("{0}", electronicStatements),
                        string.Format("{0}", multiplePayments),
                        string.Format("{0}", numberOFPayments),
                        string.Format("{0}", automatedJobRelease)});
#line 1394
  testRunner.And("In DIVX1005 I setup the Dividend Control Update as:", ((string)(null)), table343, "And ");
#line hidden
            TechTalk.SpecFlow.Table table344 = new TechTalk.SpecFlow.Table(new string[] {
                        "SubPay1",
                        "PayTyp1",
                        "SubPay2",
                        "PayTyp2"});
            table344.AddRow(new string[] {
                        string.Format("{0}", subPay1),
                        string.Format("{0}", payTyp1),
                        string.Format("{0}", subPay2),
                        string.Format("{0}", payTyp2)});
#line 1397
  testRunner.And("In DIVX1008 I setup the Dividend Control Update as:", ((string)(null)), table344, "And ");
#line hidden
            TechTalk.SpecFlow.Table table345 = new TechTalk.SpecFlow.Table(new string[] {
                        "BCRunNumber",
                        "PaymentDate",
                        "ListDate",
                        "BooksCloseDate",
                        "PaidTODate",
                        "XtrFilnam",
                        "RoundOption",
                        "RndMultiple",
                        "MandAllotment",
                        "PlanDomRuleInd",
                        "PlanTaxCodeRule",
                        "PaymentsPerYear"});
            table345.AddRow(new string[] {
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", listDate),
                        string.Format("{0}", booksCloseDate),
                        string.Format("{0}", paidTODate),
                        string.Format("{0}", xtrFilnam),
                        string.Format("{0}", roundOption),
                        string.Format("{0}", rndMultiple),
                        string.Format("{0}", mandAllotment),
                        string.Format("{0}", planDomRuleInd),
                        string.Format("{0}", planTaxCodeRule),
                        string.Format("{0}", paymentsPerYear)});
#line 1400
  testRunner.And("In DIVX1010 I setup the Dividend Control Update as:", ((string)(null)), table345, "And ");
#line hidden
            TechTalk.SpecFlow.Table table346 = new TechTalk.SpecFlow.Table(new string[] {
                        "AtoEftLgePayApply",
                        "DividendSourceApply",
                        "DividendPlanApply",
                        "Selcat1",
                        "Selcat2",
                        "DividendPlan1",
                        "DividendPlan2",
                        "PlanHolderID",
                        "DrpPrefOverBspInd",
                        "Selreg11",
                        "Selreg12",
                        "HidTOPrint",
                        "DeferBuild",
                        "BuildDeferDate",
                        "EomSelectionCode",
                        "Selcls1",
                        "Selcls2"});
            table346.AddRow(new string[] {
                        string.Format("{0}", atoEftLgePayApply),
                        string.Format("{0}", dividendSourceApply),
                        string.Format("{0}", dividendPlanApply),
                        string.Format("{0}", selcat1),
                        string.Format("{0}", selcat2),
                        string.Format("{0}", dividendPlan1),
                        string.Format("{0}", dividendPlan2),
                        string.Format("{0}", planHolderID),
                        string.Format("{0}", drpPrefOverBspInd),
                        string.Format("{0}", selreg11),
                        string.Format("{0}", selreg12),
                        string.Format("{0}", hidTOPrint),
                        string.Format("{0}", deferBuild),
                        string.Format("{0}", buildDeferDate),
                        string.Format("{0}", eomSelectionCode),
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2)});
#line 1403
  testRunner.And("In DIVX1012 I setup the Dividend Control Update as:", ((string)(null)), table346, "And ");
#line hidden
            TechTalk.SpecFlow.Table table347 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClsDsc1",
                        "ClsDsc2",
                        "IntNbrDays1",
                        "IntNbrDays2"});
            table347.AddRow(new string[] {
                        string.Format("{0}", clsDsc1),
                        string.Format("{0}", clsDsc2),
                        string.Format("{0}", intNbrDays1),
                        string.Format("{0}", intNbrDays2)});
#line 1406
  testRunner.And("In DIVX1013 I setup the Dividend Control Update as:", ((string)(null)), table347, "And ");
#line hidden
            TechTalk.SpecFlow.Table table348 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table348.AddRow(new string[] {
                        string.Format("{0}", option1)});
#line 1409
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table348, "And ");
#line hidden
            TechTalk.SpecFlow.Table table349 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentListingHead",
                        "PaymentSequence",
                        "ChequeAdviceSeq",
                        "ReturnMailApply",
                        "UnissuedChqApply",
                        "TfnPrintFlag",
                        "DeductionsApply"});
            table349.AddRow(new string[] {
                        string.Format("{0}", paymentListingHead),
                        string.Format("{0}", paymentSequence),
                        string.Format("{0}", chequeAdviceSeq),
                        string.Format("{0}", returnMailApply),
                        string.Format("{0}", unissuedChqApply),
                        string.Format("{0}", tfnPrintFlag),
                        string.Format("{0}", deductionsApply)});
#line 1412
  testRunner.And("In DIVX1022 I setup the Dividend Control Update as:", ((string)(null)), table349, "And ");
#line hidden
            TechTalk.SpecFlow.Table table350 = new TechTalk.SpecFlow.Table(new string[] {
                        "TaxCtryCode",
                        "TaxHolderIdentifier",
                        "OtherTaxCtryCode",
                        "OtherTaxHolderID",
                        "FundDistTaxInd"});
            table350.AddRow(new string[] {
                        string.Format("{0}", taxCtryCode),
                        string.Format("{0}", taxHolderIdentifier),
                        string.Format("{0}", otherTaxCtryCode),
                        string.Format("{0}", otherTaxHolderID),
                        string.Format("{0}", fundDistTaxInd)});
#line 1415
  testRunner.And("In DIVX1024 I setup the Dividend Control Update as:", ((string)(null)), table350, "And ");
#line hidden
            TechTalk.SpecFlow.Table table351 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCat2",
                        "SubPayCode",
                        "PaymentType",
                        "TypeDescription",
                        "PaymentRateDesc1",
                        "PaymentRate1",
                        "AdditionalRate1",
                        "ReportableRate1",
                        "CompBrkdwnMethod",
                        "PaymentRateDesc2",
                        "PaymentRate2",
                        "AdditionalRate2",
                        "ReportableRate2",
                        "CompBrkdwnMethod2"});
            table351.AddRow(new string[] {
                        string.Format("{0}", classCat2),
                        string.Format("{0}", subPayCode),
                        string.Format("{0}", paymentType),
                        string.Format("{0}", typeDescription),
                        string.Format("{0}", paymentRateDesc1),
                        string.Format("{0}", paymentRate1),
                        string.Format("{0}", additionalRate1),
                        string.Format("{0}", reportableRate1),
                        string.Format("{0}", compBrkdwnMethod),
                        string.Format("{0}", paymentRateDesc2),
                        string.Format("{0}", paymentRate2),
                        string.Format("{0}", additionalRate2),
                        string.Format("{0}", reportableRate2),
                        string.Format("{0}", compBrkdwnMethod2)});
#line 1418
  testRunner.And("In DIVX1033 I setup the Dividend Control Update as:", ((string)(null)), table351, "And ");
#line hidden
            TechTalk.SpecFlow.Table table352 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table352.AddRow(new string[] {
                        string.Format("{0}", rn1),
                        string.Format("{0}", rn2),
                        string.Format("{0}", rn3),
                        string.Format("{0}", rn4),
                        string.Format("{0}", rn5),
                        string.Format("{0}", rn6),
                        string.Format("{0}", rn7),
                        string.Format("{0}", rn8),
                        string.Format("{0}", rn9),
                        string.Format("{0}", rn10),
                        string.Format("{0}", rn11),
                        string.Format("{0}", rn12),
                        string.Format("{0}", rn13),
                        string.Format("{0}", rn14),
                        string.Format("{0}", rn15),
                        string.Format("{0}", subPayCodeX1)});
#line 1421
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table352, "And ");
#line hidden
            TechTalk.SpecFlow.Table table353 = new TechTalk.SpecFlow.Table(new string[] {
                        "Rn1",
                        "Rn2",
                        "Rn3",
                        "Rn4",
                        "Rn5",
                        "Rn6",
                        "Rn7",
                        "Rn8",
                        "Rn9",
                        "Rn10",
                        "Rn11",
                        "Rn12",
                        "Rn13",
                        "Rn14",
                        "Rn15",
                        "SubPayCodeX"});
            table353.AddRow(new string[] {
                        string.Format("{0}", rn1A),
                        string.Format("{0}", rn2A),
                        string.Format("{0}", rn3A),
                        string.Format("{0}", rn4A),
                        string.Format("{0}", rn5A),
                        string.Format("{0}", rn6A),
                        string.Format("{0}", rn7A),
                        string.Format("{0}", rn8A),
                        string.Format("{0}", rn9A),
                        string.Format("{0}", rn10A),
                        string.Format("{0}", rn11A),
                        string.Format("{0}", rn12A),
                        string.Format("{0}", rn13A),
                        string.Format("{0}", rn14A),
                        string.Format("{0}", rn15A),
                        string.Format("{0}", subPayCodeX2)});
#line 1424
  testRunner.And("In DIVX1034 I setup the Dividend Control Update as:", ((string)(null)), table353, "And ");
#line hidden
            TechTalk.SpecFlow.Table table354 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table354.AddRow(new string[] {
                        string.Format("{0}", componentRate1),
                        string.Format("{0}", group1),
                        string.Format("{0}", inputGroup1),
                        string.Format("{0}", sequence1),
                        string.Format("{0}", componentRate2),
                        string.Format("{0}", group2),
                        string.Format("{0}", inputGroup2),
                        string.Format("{0}", sequence2),
                        string.Format("{0}", componentRate3),
                        string.Format("{0}", group3),
                        string.Format("{0}", inputGroup3),
                        string.Format("{0}", sequence3)});
#line 1427
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table354, "And ");
#line hidden
            TechTalk.SpecFlow.Table table355 = new TechTalk.SpecFlow.Table(new string[] {
                        "ComponentRate1",
                        "Group1",
                        "InputGroup1",
                        "Sequence1",
                        "ComponentRate2",
                        "Group2",
                        "InputGroup2",
                        "Sequence2",
                        "ComponentRate3",
                        "Group3",
                        "InputGroup3",
                        "Sequence3"});
            table355.AddRow(new string[] {
                        string.Format("{0}", componentRate11),
                        string.Format("{0}", group11),
                        string.Format("{0}", inputGroup11),
                        string.Format("{0}", sequence11),
                        string.Format("{0}", componentRate22),
                        string.Format("{0}", group22),
                        string.Format("{0}", inputGroup22),
                        string.Format("{0}", sequence22),
                        string.Format("{0}", componentRate33),
                        string.Format("{0}", group33),
                        string.Format("{0}", inputGroup33),
                        string.Format("{0}", sequence33)});
#line 1430
  testRunner.And("In DIVX1035 I setup the Dividend Control Update as:", ((string)(null)), table355, "And ");
#line hidden
            TechTalk.SpecFlow.Table table356 = new TechTalk.SpecFlow.Table(new string[] {
                        "BaseCurrency",
                        "DIDCApply",
                        "DcrProcessInd",
                        "FgnChqApplyInd",
                        "OrideFCThresInd",
                        "CoyNamePrint",
                        "OrideFCThresAmt",
                        "DidcStartRef",
                        "DISortFlag",
                        "DCTapeDate",
                        "SeparateBulk",
                        "ChequesApply",
                        "ChequesStartRef",
                        "TaxDescPrint",
                        "ChqNumPreprinted",
                        "MCApply",
                        "PaidCurrency",
                        "MCAllConvRate",
                        "MCAllDesc",
                        "NbrMultCurrency",
                        "MCCurrency1",
                        "MCConversionRate1",
                        "MCConversionDesc1",
                        "DirectCreditApply1",
                        "ChequesApply1",
                        "MCDomCode11",
                        "MCDomCode12",
                        "MCStartRefNumber1",
                        "MCChqNumPreprinted1",
                        "MCCurrency2",
                        "MCConversionRate2",
                        "MCConversionDesc2",
                        "DirectCreditApply2",
                        "ChequesApply2",
                        "MCDomCode21",
                        "MCDomCode22",
                        "MCStartRefNumber2",
                        "MCChqNumPreprinted2"});
            table356.AddRow(new string[] {
                        string.Format("{0}", baseCurrency),
                        string.Format("{0}", dIDCApply),
                        string.Format("{0}", dcrProcessInd),
                        string.Format("{0}", fgnChqApplyInd),
                        string.Format("{0}", orideFCThresInd),
                        string.Format("{0}", coyNamePrint),
                        string.Format("{0}", orideFCThresAmt),
                        string.Format("{0}", didcStartRef),
                        string.Format("{0}", dISortFlag),
                        string.Format("{0}", dCTapeDate),
                        string.Format("{0}", separateBulk),
                        string.Format("{0}", chequesApply),
                        string.Format("{0}", chequesStartRef),
                        string.Format("{0}", taxDescPrint),
                        string.Format("{0}", chqNumPreprinted),
                        string.Format("{0}", mCApply),
                        string.Format("{0}", paidCurrency),
                        string.Format("{0}", mCAllConvRate),
                        string.Format("{0}", mCAllDesc),
                        string.Format("{0}", nbrMultCurrency),
                        string.Format("{0}", mCCurrency1),
                        string.Format("{0}", mCConversionRate1),
                        string.Format("{0}", mCConversionDesc1),
                        string.Format("{0}", directCreditApply1),
                        string.Format("{0}", chequesApply1),
                        string.Format("{0}", mCDomCode11),
                        string.Format("{0}", mCDomCode12),
                        string.Format("{0}", mCStartRefNumber1),
                        string.Format("{0}", mCChqNumPreprinted1),
                        string.Format("{0}", mCCurrency2),
                        string.Format("{0}", mCConversionRate2),
                        string.Format("{0}", mCConversionDesc2),
                        string.Format("{0}", directCreditApply2),
                        string.Format("{0}", chequesApply2),
                        string.Format("{0}", mCDomCode21),
                        string.Format("{0}", mCDomCode22),
                        string.Format("{0}", mCStartRefNumber2),
                        string.Format("{0}", mCChqNumPreprinted2)});
#line 1433
  testRunner.And("In DIVX1040 I setup the Dividend Control Update as:", ((string)(null)), table356, "And ");
#line hidden
            TechTalk.SpecFlow.Table table357 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuildRequired",
                        "ReconAccount",
                        "PaymentAccount1",
                        "PaymentAccount2"});
            table357.AddRow(new string[] {
                        string.Format("{0}", buildRequired),
                        string.Format("{0}", reconAccount),
                        string.Format("{0}", paymentAccount1),
                        string.Format("{0}", paymentAccount2)});
#line 1436
  testRunner.And("In DIVX1060 I setup the Dividend Control Update as:", ((string)(null)), table357, "And ");
#line hidden
            TechTalk.SpecFlow.Table table358 = new TechTalk.SpecFlow.Table(new string[] {
                        "Option"});
            table358.AddRow(new string[] {
                        string.Format("{0}", option2)});
#line 1439
  testRunner.And("In DIVX1020 I setup the Dividend Control Update as:", ((string)(null)), table358, "And ");
#line 1442
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1443
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1444
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1445
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1446
  testRunner.And("In SPS00102 I clcik on: \"payment job release monitor\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table359 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputDividendCode"});
            table359.AddRow(new string[] {
                        string.Format("{0}", inputDivCode)});
#line 1447
  testRunner.And("In DIS05010 I Enter Payment Automated Job Release details as:", ((string)(null)), table359, "And ");
#line hidden
            TechTalk.SpecFlow.Table table360 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection",
                        "CostSharesKnownInd",
                        "KnowBefPayDateInd"});
            table360.AddRow(new string[] {
                        string.Format("{0}", selection),
                        string.Format("{0}", costSharesKnownInd),
                        string.Format("{0}", knowBefPayDateInd)});
#line 1450
  testRunner.And("In DIS05030 I Enter Payment Automated Job Release details as:", ((string)(null)), table360, "And ");
#line 1453
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table361 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table361.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT",
                        "",
                        ""});
#line 1454
  testRunner.And("In JOBSUB90 I submit the report", ((string)(null)), table361, "And ");
#line 1457
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1458
  testRunner.And("In SPS00102 I clcik on: \"payment job release monitor\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table362 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputDividendCode"});
            table362.AddRow(new string[] {
                        string.Format("{0}", inputDivCode)});
#line 1459
  testRunner.And("In DIS05010 I Enter Payment Automated Job Release details as:", ((string)(null)), table362, "And ");
#line hidden
            TechTalk.SpecFlow.Table table363 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table363.AddRow(new string[] {
                        string.Format("{0}", selection1)});
#line 1462
  testRunner.And("In DIS05030 I Enter Payment Automated Job Release details as:", ((string)(null)), table363, "And ");
#line 1465
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table364 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table364.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT",
                        "",
                        ""});
#line 1466
  testRunner.And("In JOBSUB90 I submit the report", ((string)(null)), table364, "And ");
#line 1469
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1470
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1471
  testRunner.And("In MNS00101 I click on: \"reporting system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1472
  testRunner.And("In RSS00101 I click on: \"schedule transaction reporting run\" within the Reporting" +
                    " System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table365 = new TechTalk.SpecFlow.Table(new string[] {
                        "NightlyRunInd"});
            table365.AddRow(new string[] {
                        string.Format("{0}", nightlyRunInd)});
#line 1473
  testRunner.And("In RSS25010 I Enter URR Parameter as:", ((string)(null)), table365, "And ");
#line 1476
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table366 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table366.AddRow(new string[] {
                        "completion",
                        "800",
                        "error",
                        "DONE",
                        "EXIT",
                        "DIV_END_CALC_0017_D_DIV_A",
                        ""});
#line 1477
  testRunner.And("In JOBSUB90 I submit URR report for Dividend Job", ((string)(null)), table366, "And ");
#line 1480
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1481
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1482
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1483
  testRunner.And("In SPS00101 I clcik on: \"dividend payment parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1484
  testRunner.And("In SPS00102 I clcik on: \"payment job release monitor\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table367 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputDividendCode"});
            table367.AddRow(new string[] {
                        string.Format("{0}", inputDivCode)});
#line 1485
  testRunner.And("In DIS05010 I Enter Payment Automated Job Release details as:", ((string)(null)), table367, "And ");
#line hidden
            TechTalk.SpecFlow.Table table368 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table368.AddRow(new string[] {
                        string.Format("{0}", selection2)});
#line 1488
  testRunner.And("In DIS05030 I Enter Payment Automated Job Release details as:", ((string)(null)), table368, "And ");
#line 1491
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table369 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table369.AddRow(new string[] {
                        "completion",
                        "800",
                        "error",
                        "DONE",
                        "EXIT",
                        "DIV_PAY_COMBINE_0017_DIV_A",
                        ""});
#line 1492
  testRunner.And("In JOBSUB90 I submit the report", ((string)(null)), table369, "And ");
#line 1495
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1496
 testRunner.When("In SELCOY01 I select the company: \"DIV_A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1497
  testRunner.And("In MNS00101 I click on: \"reporting system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1498
  testRunner.And("In RSS00101 I click on: \"schedule transaction reporting run\" within the Reporting" +
                    " System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table370 = new TechTalk.SpecFlow.Table(new string[] {
                        "NightlyRunInd",
                        "Action"});
            table370.AddRow(new string[] {
                        string.Format("{0}", nightlyRunInd),
                        string.Format("{0}", action3)});
#line 1499
  testRunner.And("In RSS25010 I Enter URR Parameter as:", ((string)(null)), table370, "And ");
#line 1502
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table371 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX",
                        "DivJobName",
                        "DivJobName1"});
            table371.AddRow(new string[] {
                        "completion",
                        "800",
                        "error",
                        "DONE",
                        "EXIT",
                        "",
                        ""});
#line 1503
  testRunner.And("In JOBSUB90 I submit URR report for Dividend Job", ((string)(null)), table371, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dividendfilecompare")]
        [NUnit.Framework.TestCaseAttribute("DIV1", "div1", "CPU_LNX", "div1", null)]
        public virtual void Dividendfilecompare(string reportHeading, string fileName, string cOY, string dividendName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dividendfilecompare", exampleTags);
#line 1515
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table372 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportHeading",
                        "FileName",
                        "COY",
                        "DividendName"});
            table372.AddRow(new string[] {
                        string.Format("{0}", reportHeading),
                        string.Format("{0}", fileName),
                        string.Format("{0}", cOY),
                        string.Format("{0}", dividendName)});
#line 1516
  testRunner.Given("I copy DIV output files to local", ((string)(null)), table372, "Given ");
#line 1519
  testRunner.When("I parse the files from VMS or Linux", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1520
  testRunner.And("I compare the files from VMS and Linux goldcopy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
