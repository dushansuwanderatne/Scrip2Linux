// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SCRIPAU.Automation.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Allotment")]
    public partial class AllotmentFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Allotment.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Allotment", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Allotment_Test1")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.TestCaseAttribute("Test1", "1", "16/06/2016", "Y", "9999", "", "T", "O", "Y", "EC1", "", "NSW", "", "N", "Y", "ENT", "", "", "0", "LR", "", "I", "A", "", "", "", "", "5555", "NDF", "Allotment List", "CTS", "******", "QBE ENTITLEMENT MARCH 2012", "Y", "CONFIRM", "QBE_AUTO", null)]
        public virtual void Allotment_Test1(
                    string reportHeading, 
                    string allotmentNum, 
                    string repDate, 
                    string printHolderID, 
                    string bCRunNumber, 
                    string xtrFilname, 
                    string allotmentType, 
                    string processType, 
                    string returnMail, 
                    string selcls1, 
                    string selcls2, 
                    string selreg01, 
                    string selreg02, 
                    string deductSelcls, 
                    string scripReq, 
                    string firstAltClass, 
                    string secondAltClass, 
                    string tranTypeCode, 
                    string certInd, 
                    string allotmentRegister, 
                    string nspRequiredInd, 
                    string eomSelectionCode, 
                    string scripSeq, 
                    string scripComment40A, 
                    string scripComment40B, 
                    string cNAllotmentDate, 
                    string buildDeferDate, 
                    string orderNumber, 
                    string opsInitials, 
                    string description, 
                    string serviceProvider, 
                    string serviceCode, 
                    string firstAltClassDesc, 
                    string nightlyRunInd, 
                    string action, 
                    string cOY, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Allotment_Test1", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("In SELCOY01 I select the company: \"QBE_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
  testRunner.And("In MNS00101 I click on: \"system parameter setups\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
  testRunner.And("In SPS00101 I click on: \"allotment system parameters\" within the system Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "AllotmentNum"});
            table1.AddRow(new string[] {
                        string.Format("{0}", allotmentNum)});
#line 12
  testRunner.And("In ALS01001 I continue with the following details:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "RepDate",
                        "PrintHolderID",
                        "BCRunNumber",
                        "XtrFilname",
                        "AllotmentType",
                        "ProcessType",
                        "ReturnMail"});
            table2.AddRow(new string[] {
                        string.Format("{0}", repDate),
                        string.Format("{0}", printHolderID),
                        string.Format("{0}", bCRunNumber),
                        string.Format("{0}", xtrFilname),
                        string.Format("{0}", allotmentType),
                        string.Format("{0}", processType),
                        string.Format("{0}", returnMail)});
#line 15
  testRunner.And("In ALS01010 I continue with the following details:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selcls1",
                        "Selcls2",
                        "Selreg01",
                        "Selreg02",
                        "DeductSelcls",
                        "ScripReq",
                        "FirstAltClass",
                        "SecondAltClass",
                        "TranTypeCode",
                        "CertInd",
                        "AllotmentRegister",
                        "NspRequiredInd",
                        "EomSelectionCode"});
            table3.AddRow(new string[] {
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2),
                        string.Format("{0}", selreg01),
                        string.Format("{0}", selreg02),
                        string.Format("{0}", deductSelcls),
                        string.Format("{0}", scripReq),
                        string.Format("{0}", firstAltClass),
                        string.Format("{0}", secondAltClass),
                        string.Format("{0}", tranTypeCode),
                        string.Format("{0}", certInd),
                        string.Format("{0}", allotmentRegister),
                        string.Format("{0}", nspRequiredInd),
                        string.Format("{0}", eomSelectionCode)});
#line 18
  testRunner.And("In ALS01020 I continue with the following details:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ScripSeq",
                        "ScripComment40A",
                        "ScripComment40B"});
            table4.AddRow(new string[] {
                        string.Format("{0}", scripSeq),
                        string.Format("{0}", scripComment40A),
                        string.Format("{0}", scripComment40B)});
#line 21
  testRunner.And("In ALS01025 I continue with the following details:", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "CNAllotmentDate",
                        "BuildDeferDate"});
            table5.AddRow(new string[] {
                        string.Format("{0}", cNAllotmentDate),
                        string.Format("{0}", buildDeferDate)});
#line 24
  testRunner.And("In ALS01028 I continue with the following details:", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "OrderNumber",
                        "OpsInitials",
                        "Description"});
            table6.AddRow(new string[] {
                        string.Format("{0}", orderNumber),
                        string.Format("{0}", opsInitials),
                        string.Format("{0}", description)});
#line 27
  testRunner.And("In ALS01030 I continue with the following details:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServiceProvider",
                        "ServiceCode"});
            table7.AddRow(new string[] {
                        string.Format("{0}", serviceProvider),
                        string.Format("{0}", serviceCode)});
#line 30
  testRunner.And("In BILCTL99 I continue with the following details:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstAltClass",
                        "FirstAltClassDesc"});
            table8.AddRow(new string[] {
                        string.Format("{0}", firstAltClass),
                        string.Format("{0}", firstAltClassDesc)});
#line 33
 testRunner.Then("In ALS01040 I verify the following details:", ((string)(null)), table8, "Then ");
#line 36
 testRunner.When("I Exit from System Setup Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "COY",
                        "passCriteria1",
                        "failCriteria1",
                        "passCriteria2",
                        "passCriteria3",
                        "passCriteria4",
                        "passCriteria5",
                        "passCriteriaLnx1",
                        "passCriteriaLnx2",
                        "passCriteriaLnx3"});
            table9.AddRow(new string[] {
                        string.Format("{0}", cOY),
                        "SCRIP (Dec System) Utilities Menu",
                        "",
                        "OPS Housekeeping MENU",
                        "OPS Setup special process MENU",
                        "ALLOTMENT SETUP",
                        "",
                        "NHK - SCRIP Utilities",
                        "OPSM - Ops Housekeeping",
                        "SSTP - Sub System Setups"});
#line 37
 testRunner.When("I continue with the following details for Allotments in nhk_menu:", ((string)(null)), table9, "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "JobName1",
                        "COY",
                        "passCriteria1",
                        "failCriteria1",
                        "passCriteria2",
                        "passCriteria3",
                        "AllotmentName",
                        "passCriteria4",
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "JobName2",
                        "JobName3",
                        "passCriteria6",
                        "passCriteria7",
                        "JobNameLnx1",
                        "passCriteriaJobLnx1",
                        "PassCriteriaLinux",
                        "FailCriteriaLinux",
                        "JobNameLnx2",
                        "JobNameLnx3"});
            table10.AddRow(new string[] {
                        "ALT1_CALC_QBE_AUTO.COM",
                        "qbe_auto",
                        "qbe_auto",
                        "",
                        "qbe_auto.alt1",
                        "/NOTIFYALT1_CALC_QBE_AUTO.COM",
                        "alt1",
                        "started",
                        "completion",
                        "300",
                        "error",
                        "ALT1_CHESS_NOTICE_QBE_AUTO.COM",
                        "ALT1_COMBINE_QBE_AUTO.COM",
                        "/NOTIFYALT1_CHESS_NOTICE_QBE_AUTO.COM",
                        "/NOTIFYALT1_COMBINE_QBE_AUTO.COM",
                        "alt1_calc_qbe_auto.sh",
                        "queue default",
                        "DONE",
                        "EXIT",
                        "alt1_chess_notice_qbe_auto.sh",
                        "alt1_combine_qbe_auto.sh"});
#line 40
 testRunner.When("I release Allotment jobs:", ((string)(null)), table10, "When ");
#line 49
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.When("In SELCOY01 I select the company: \"QBE_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
  testRunner.And("In MNS00101 I click on: \"reporting system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
  testRunner.And("In RSS00101 I click on: \"schedule transaction reporting run\" within the Reporting" +
                    " System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "NightlyRunInd",
                        "Action"});
            table11.AddRow(new string[] {
                        string.Format("{0}", nightlyRunInd),
                        string.Format("{0}", action)});
#line 53
  testRunner.And("In RSS25010 I Enter URR Parameter as:", ((string)(null)), table11, "And ");
#line 56
 testRunner.When("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria"});
            table12.AddRow(new string[] {
                        "completion",
                        "3600",
                        "error"});
#line 57
  testRunner.And("In JOBSUB90 I submit the report for VMS and Linux", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
