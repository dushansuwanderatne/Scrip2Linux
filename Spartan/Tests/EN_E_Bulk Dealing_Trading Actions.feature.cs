// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SCRIPAU.Automation.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EN_E_Bulk Dealing_Trading Actions")]
    public partial class EN_E_BulkDealing_TradingActionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EN_E_Bulk Dealing_Trading Actions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EN_E_Bulk Dealing_Trading Actions", "Ensure N_E_Bulk Dealing_Trading Actions functionality covered", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 18006: 01_DLH Dealing History Transaction Action")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("EnquiryTest")]
        [NUnit.Framework.CategoryAttribute("CPU_AUTO")]
        [NUnit.Framework.CategoryAttribute("EN_Bulk_Dealing_Trading_Actions")]
        [NUnit.Framework.CategoryAttribute("18006")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        public virtual void TestCase1800601_DLHDealingHistoryTransactionAction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 18006: 01_DLH Dealing History Transaction Action", new string[] {
                        "winformsTest",
                        "EnquiryTest",
                        "CPU_AUTO",
                        "EN_Bulk_Dealing_Trading_Actions",
                        "18006",
                        "FullSmokeTest"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.When("In SELCOY01 I select the company: \"CPU_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
  testRunner.And("I go to the Enquiry system for \"I0100007487\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Action",
                        "DLH"});
            table1.AddRow(new string[] {
                        "Locate Argument",
                        ""});
#line 15
  testRunner.And("I enter the following details as the Locate action:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "HIN",
                        "I0100007487"});
            table2.AddRow(new string[] {
                        "Line1",
                        "DEP 10A              DEP0001410   11747803  12/07/10  15:31            DLGAD  P"});
            table2.AddRow(new string[] {
                        "Line2",
                        "DLGRG"});
            table2.AddRow(new string[] {
                        "Line3",
                        "DEP0001414   11759202  12/08/10  11:23            DLGAD  P"});
            table2.AddRow(new string[] {
                        "Line4",
                        "DLGRG"});
            table2.AddRow(new string[] {
                        "Line5",
                        "DEP0001420   11806120  13/09/10  12:20            DLGAD  P"});
#line 19
 testRunner.Then("In ENS01048 I should see Dealing History details as below:", ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Action",
                        "M"});
            table3.AddRow(new string[] {
                        "Locate Argument",
                        ""});
#line 27
 testRunner.When("I enter the following details as the Locate action:", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "HIN",
                        "I0100007487"});
            table4.AddRow(new string[] {
                        "Line1",
                        "DEP 10A              DEP0001440   11848312                             DLGRG"});
            table4.AddRow(new string[] {
                        "Line2",
                        "DEP0001445   11858873  14/02/11  12:54            DLGAD  P"});
            table4.AddRow(new string[] {
                        "Line3",
                        "DLGRG"});
            table4.AddRow(new string[] {
                        "Line4",
                        "DEP0001450   11906721  15/03/11  12:02            DLGAD  P"});
            table4.AddRow(new string[] {
                        "Line5",
                        "DLGRG"});
#line 31
 testRunner.Then("In ENS01048 I should see Dealing History details as below:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 17994: 01_Pending Transactions -PT")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("EnquiryTest")]
        [NUnit.Framework.CategoryAttribute("Bug")]
        [NUnit.Framework.CategoryAttribute("CPU_AUTO")]
        [NUnit.Framework.CategoryAttribute("EN_E_Bulk_Dealing_Trading_Actions")]
        [NUnit.Framework.CategoryAttribute("17994")]
        public virtual void TestCase1799401_PendingTransactions_PT()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 17994: 01_Pending Transactions -PT", new string[] {
                        "winformsTest",
                        "EnquiryTest",
                        "Bug",
                        "CPU_AUTO",
                        "EN_E_Bulk_Dealing_Trading_Actions",
                        "17994"});
#line 46
this.ScenarioSetup(scenarioInfo);
#line 48
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
 testRunner.When("In SELCOY01 I select the company: \"CPU_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
  testRunner.And("I go to the Enquiry system for \"I0100007487\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "Action",
                        "PT"});
            table5.AddRow(new string[] {
                        "Locate Argument",
                        ""});
#line 51
  testRunner.And("I enter the following details as the Locate action:", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "HIN",
                        "I0100007487"});
            table6.AddRow(new string[] {
                        "Pending Trade1",
                        "DEP Sale         2DEF0004629 12606658           100.000000"});
#line 55
 testRunner.Then("In ENSTRD47 I should see Pending Trading Transactions as below:", ((string)(null)), table6, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "Action",
                        ">"});
            table7.AddRow(new string[] {
                        "Locate Argument",
                        ""});
#line 59
 testRunner.When("I enter the following details as the Locate action:", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "Line1",
                        "23/04/15                Audited    0000"});
#line 63
 testRunner.Then("In ENSTRD57 I should see Reservation Extra Details as below:", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View Trading History Details")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("EnquiryTest")]
        [NUnit.Framework.CategoryAttribute("CPU_AUTO")]
        [NUnit.Framework.CategoryAttribute("EN_E_Bulk_Dealing_Trading_Actions")]
        [NUnit.Framework.CategoryAttribute("ViewTradeHistDetails")]
        public virtual void ViewTradingHistoryDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View Trading History Details", new string[] {
                        "winformsTest",
                        "EnquiryTest",
                        "CPU_AUTO",
                        "EN_E_Bulk_Dealing_Trading_Actions",
                        "ViewTradeHistDetails"});
#line 72
this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
  testRunner.When("In SELCOY01 I select the company: \"CPU_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
  testRunner.And("I go to the Enquiry system for \"I0100007479\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "Action",
                        "THD"});
            table9.AddRow(new string[] {
                        "Locate Argument",
                        "I0100007479/1DEF0000122/00003030"});
#line 77
  testRunner.And("I enter the following details as the Locate action:", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "Holder",
                        "I0100007479"});
            table10.AddRow(new string[] {
                        "Sell Units",
                        "200.000000"});
            table10.AddRow(new string[] {
                        "Final Price",
                        "10.000000"});
            table10.AddRow(new string[] {
                        "Gross Amount",
                        "2000.00"});
            table10.AddRow(new string[] {
                        "Charges",
                        "84.50"});
            table10.AddRow(new string[] {
                        "Net Amount",
                        "1908.55"});
            table10.AddRow(new string[] {
                        "Payment Date",
                        "03/03/2015"});
            table10.AddRow(new string[] {
                        "Currency",
                        "AUD"});
            table10.AddRow(new string[] {
                        "Currency Desc",
                        "AUSTRALIAN DOLLAR"});
            table10.AddRow(new string[] {
                        "Trade Date",
                        "03/03/2015"});
            table10.AddRow(new string[] {
                        "Settlement Date",
                        "03/03/2015"});
#line 81
 testRunner.Then("In ENSTRDSH I expect to see the following in the Trade history screen for \"Sell P" +
                    "artial\"", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 17994: 01_Pending Transactions -PEND)")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("EnquiryTest")]
        [NUnit.Framework.CategoryAttribute("CPU_AUTO")]
        [NUnit.Framework.CategoryAttribute("EN_E_Bulk_Dealing_Trading_Actions")]
        [NUnit.Framework.CategoryAttribute("17994")]
        public virtual void TestCase1799401_PendingTransactions_PEND()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 17994: 01_Pending Transactions -PEND)", new string[] {
                        "winformsTest",
                        "EnquiryTest",
                        "CPU_AUTO",
                        "EN_E_Bulk_Dealing_Trading_Actions",
                        "17994"});
#line 100
this.ScenarioSetup(scenarioInfo);
#line 102
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 103
 testRunner.When("In SELCOY01 I select the company: \"CPU_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 104
  testRunner.And("I go to the Enquiry system for \"I0100007487\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "Action",
                        "PEND"});
            table11.AddRow(new string[] {
                        "Locate Argument",
                        ""});
#line 105
  testRunner.And("I enter the following details as the Locate action:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "HIN",
                        "I0100007487"});
            table12.AddRow(new string[] {
                        "Pending Transaction",
                        "DEP 10A 20100712EM   2DEF0004629  12606658 23/04/15                        100-  " +
                            "R"});
#line 109
 testRunner.Then("In ENS01047 I should see Pending Transactions as below:", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 18013: 02_TH Trading History Transaction Action")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("EnquiryTest")]
        [NUnit.Framework.CategoryAttribute("CPU_AUTO")]
        [NUnit.Framework.CategoryAttribute("18013")]
        [NUnit.Framework.CategoryAttribute("EN_E_Bulk_Dealing_Trading_Actions")]
        [NUnit.Framework.TestCaseAttribute("I0100007479", "DEP Sale     1DEF0000122  00003030 03/03/15 Set          200.000000       1908.55" +
            "      10.000000", "", "", "", "", "01", "", "EMP", "1DEF0000122", "3030", "Settled", "200.000000", "1908.55", "DEP", "200.000000", "10.000000", "2000.00", "", "", "", "84.50", "6.95", "", "1908.55", "03/03/2015", "03/03/2015", "CBRC", "CPMC", "CWIR", "CDCR", "CLCQ", "CFCQ", "Broker", "Commission", "Wire", "Direct Banking", "Local Cheque", "Foreign Cheque", "9.50", "60.00", "15.00", "A", "A", "03/03/2015", "3739", "TSSAL", "AUD", "AUSTRALIAN DOLLAR", "Cheque/Unpres", "84.50", "6.95", "", "", "84.50", "6.95", "02A", "20020603EM", "2.002400", "1599.52", "CPU_AUTO", "", "", "", "", "", "", "", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("I0030244044", "OPT Sale     OPTE0000001  00554592 07/03/13 Set        66667.000000     177792.25" +
            "      10.229375", "DEP Sale     2DEF0003814  12338085 07/03/13 Set          206.000000       2096.87" +
            "      10.360000", "OPT Sale     OPTM0000006  00577482 17/12/12 Set        20000.000000      22878.09" +
            "       8.703051", "OPT Sale     OPTM0000005  00577481 07/12/12 Set        10000.000000      12302.83" +
            "       8.789620", "DEP Sale     2DEF0003677  12259206 07/12/12 Set          685.000000       5919.71" +
            "       8.710000", "01", "", "IND", "OPTE0000001", "554592", "Settled", "66667.000000", "177792.25", "OPT", "66667.000000", "10.229375", "681961.74", "", "", "502669.18", "1363.92", "136.39", "", "177792.25", "04/03/2013", "07/03/2013", "CBPB", "CWIR", "CDCR", "CLCQ", "CFCQ", "", "Broker", "Wire", "Direct Banking", "Local Cheque", "Foreign Cheque", "", "1363.92", "", "", "A", "A", "07/03/2013", "6588", "TSSAL", "AUD", "AUSTRALIAN DOLLAR", "Direct Banking", "1363.92", "136.39", "", "", "1363.92", "136.39", "09A", "20090130EE", "7.540000", "179292.56", "CPU_AUTO", "124-001", "000000000010345679", "YI KIBYAF & KI VIBC", "", "", "", "", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("I0030153839", "ELA Sale     3ELA0000528  57006712 04/02/11 Set           10.000000         14.34" +
            "      24.640000", "", "", "", "", "01", "", "STF", "3ELA0000528", "57006712", "Settled", "28.000000", "14.34", "ELA", "10.000000", "24.640000", "246.40", "", "168.56", "", "63.50", "", "", "14.34", "01/02/2011", "04/02/2011", "CBRK", "CPMM", "CWIR", "CDCR", "CLCQ", "CFCQ", "Broker", "Commission", "Wire", "Direct Banking", "Local Cheque", "Foreign Cheque", "9.50", "53.50", ".50", "A", "A", "04/02/2011", "80513", "TSSAL", "AUD", "AUSTRALIAN DOLLAR", "Cheque/Unpres", "63.50", "", "", "", "63.50", "", "99A", "19991112ER", "24.010000", "17.64", "NAB_AUTO", "", "", "", "18.000000", "Issuer", "I0030153839", "ORD", "VIC", "UC", null)]
        public virtual void TestCase1801302_THTradingHistoryTransactionAction(
                    string hIN, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string action, 
                    string locateArgument, 
                    string type, 
                    string iD, 
                    string tran, 
                    string tradingStatus, 
                    string units, 
                    string money, 
                    string @class, 
                    string unitsSold, 
                    string finalPrice, 
                    string grossAmount, 
                    string purchaseRes, 
                    string loan, 
                    string options, 
                    string charges, 
                    string gST, 
                    string tAX, 
                    string netAmount, 
                    string tradeDate, 
                    string settlementDate, 
                    string chargeCode1, 
                    string chargeCode2, 
                    string chargeCode3, 
                    string chargeCode4, 
                    string chargeCode5, 
                    string chargeCode6, 
                    string chargeDesc1, 
                    string chargeDesc2, 
                    string chargeDesc3, 
                    string chargeDesc4, 
                    string chargeDesc5, 
                    string chargeDesc6, 
                    string charge1, 
                    string charge2, 
                    string charge3, 
                    string paidByFlag1, 
                    string paidByFlag2, 
                    string paymentDate, 
                    string payRefNumber, 
                    string paymentAccount, 
                    string currencyCode, 
                    string currencyDesc, 
                    string paymentMethod, 
                    string paidbyHolder, 
                    string gSTTaxApply, 
                    string paidbyCoy, 
                    string reportOnly, 
                    string totalCharges, 
                    string totalGST, 
                    string register, 
                    string certificateID, 
                    string awardPrice, 
                    string gainLoss, 
                    string cOY, 
                    string bankCode, 
                    string accountNbr, 
                    string accountName, 
                    string remBal, 
                    string remBalDesc, 
                    string toHolder, 
                    string transferClass, 
                    string transferReg, 
                    string transferCertID, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "EnquiryTest",
                    "CPU_AUTO",
                    "18013",
                    "EN_E_Bulk_Dealing_Trading_Actions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 18013: 02_TH Trading History Transaction Action", @__tags);
#line 119
this.ScenarioSetup(scenarioInfo);
#line 121
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 122
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", hIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "Action",
                        "TH"});
            table13.AddRow(new string[] {
                        "Locate Argument",
                        ""});
#line 124
  testRunner.And("I enter the following details as the Locate action:", ((string)(null)), table13, "And ");
#line 128
 testRunner.Then(string.Format("In ENSTRD48 I should see trading history summary as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        "", line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 129
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 130
 testRunner.Then(string.Format("In ENSTRDSH  I should see Trading History as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" " +
                        "\"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}\"", hIN, type, iD, tran, tradingStatus, units, money, @class, unitsSold, finalPrice, grossAmount, purchaseRes, loan, options, charges, gST, tAX, netAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 131
  testRunner.And(string.Format("In ENSTRDSH  I should see Trading History Charge details as \"{0}\" \"{1}\" \"{2}\" \"{3" +
                        "}\" \"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\"" +
                        " \"{16}\" \"{17}\" \"{18}\"", tradeDate, settlementDate, chargeCode1, chargeCode2, chargeCode3, chargeCode4, chargeCode5, chargeCode6, chargeDesc1, chargeDesc2, chargeDesc3, chargeDesc4, chargeDesc5, chargeDesc6, charge1, charge2, charge3, paidByFlag1, paidByFlag2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
  testRunner.And(string.Format("In ENSTRDSH  I should see Trading History Payment details as \"{0}\" \"{1}\" \"{2}\" \"{" +
                        "3}\" \"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\"", paymentDate, payRefNumber, paymentAccount, currencyCode, currencyDesc, paymentMethod, bankCode, accountNbr, accountName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
  testRunner.And(string.Format("In ENSTRDSH  I should see Trading History Summary of Charges as \"{0}\" \"{1}\" \"{2}\"" +
                        " \"{3}\" \"{4}\" \"{5}\"", paidbyHolder, gSTTaxApply, paidbyCoy, reportOnly, totalCharges, totalGST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
  testRunner.And(string.Format("In ENSTRDSH  I should see Trading History Remaining Balance Details as \"{0}\" \"{1}" +
                        "\" \"{2}\" \"{3}\" \"{4}\" \"{5}\"", remBal, remBalDesc, toHolder, transferClass, transferReg, transferCertID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "Action",
                        ">"});
            table14.AddRow(new string[] {
                        "Locate Argument",
                        ""});
#line 135
 testRunner.When("I enter the following details as the Locate action:", ((string)(null)), table14, "When ");
#line 139
 testRunner.Then(string.Format("In ENSTRDSC I should see Certificate details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5" +
                        "}\"", register, certificateID, units, awardPrice, finalPrice, gainLoss), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 18015: 03_THD Trading  History Details Action")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("EnquiryTest")]
        [NUnit.Framework.CategoryAttribute("CPU_AUTO")]
        [NUnit.Framework.CategoryAttribute("18015")]
        [NUnit.Framework.CategoryAttribute("EN_E_Bulk_Dealing_Trading_Actions")]
        [NUnit.Framework.TestCaseAttribute("I0100007479", "THD", "I0100007479/1DEF0000122/00003030", "EMP", "1DEF0000122", "3030", "Settled", "200.000000", "1908.55", "DEP", "200.000000", "10.000000", "2000.00", "", "", "", "84.50", "6.95", "", "1908.55", "03/03/2015", "03/03/2015", "CBRC", "CPMC", "CWIR", "CDCR", "CLCQ", "CFCQ", "Broker", "Commission", "Wire", "Direct Banking", "Local Cheque", "Foreign Cheque", "9.50", "60.00", "15.00", "A", "A", "03/03/2015", "3739", "TSSAL", "AUD", "AUSTRALIAN DOLLAR", "Cheque/Unpres", "84.50", "6.95", "", "", "84.50", "6.95", "02A", "20020603EM", "2.002400", "1599.52", "CPU_AUTO", "", "", "", "", "", "", "", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("I0030244044", "THD", "I0030244044/OPTE0000001/00554592", "IND", "OPTE0000001", "554592", "Settled", "66667.000000", "177792.25", "OPT", "66667.000000", "10.229375", "681961.74", "", "", "502669.18", "1363.92", "136.39", "", "177792.25", "04/03/2013", "07/03/2013", "CBPB", "CWIR", "CDCR", "CLCQ", "CFCQ", "", "Broker", "Wire", "Direct Banking", "Local Cheque", "Foreign Cheque", "", "1363.92", "", "", "A", "A", "07/03/2013", "6588", "TSSAL", "AUD", "AUSTRALIAN DOLLAR", "Direct Banking", "1363.92", "136.39", "", "", "1363.92", "136.39", "09A", "20090130EE", "7.540000", "179292.56", "CPU_AUTO", "124-001", "000000000010345679", "YI KIBYAF & KI VIBC", "", "", "", "", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("I0030153839", "THD", "I0030153839/3ELA0000528/57006712", "STF", "3ELA0000528", "57006712", "Settled", "28.000000", "14.34", "ELA", "10.000000", "24.640000", "246.40", "", "168.56", "", "63.50", "", "", "14.34", "01/02/2011", "04/02/2011", "CBRK", "CPMM", "CWIR", "CDCR", "CLCQ", "CFCQ", "Broker", "Commission", "Wire", "Direct Banking", "Local Cheque", "Foreign Cheque", "9.50", "53.50", ".50", "A", "A", "04/02/2011", "80513", "TSSAL", "AUD", "AUSTRALIAN DOLLAR", "Cheque/Unpres", "63.50", "", "", "", "63.50", "", "99A", "19991112ER", "24.010000", "17.64", "NAB_AUTO", "", "", "", "18.000000", "Issuer", "I0030153839", "ORD", "VIC", "UC", null)]
        public virtual void TestCase1801503_THDTradingHistoryDetailsAction(
                    string hIN, 
                    string action, 
                    string locateArgument, 
                    string type, 
                    string iD, 
                    string tran, 
                    string tradingStatus, 
                    string units, 
                    string money, 
                    string @class, 
                    string unitsSold, 
                    string finalPrice, 
                    string grossAmount, 
                    string purchaseRes, 
                    string loan, 
                    string options, 
                    string charges, 
                    string gST, 
                    string tAX, 
                    string netAmount, 
                    string tradeDate, 
                    string settlementDate, 
                    string chargeCode1, 
                    string chargeCode2, 
                    string chargeCode3, 
                    string chargeCode4, 
                    string chargeCode5, 
                    string chargeCode6, 
                    string chargeDesc1, 
                    string chargeDesc2, 
                    string chargeDesc3, 
                    string chargeDesc4, 
                    string chargeDesc5, 
                    string chargeDesc6, 
                    string charge1, 
                    string charge2, 
                    string charge3, 
                    string paidByFlag1, 
                    string paidByFlag2, 
                    string paymentDate, 
                    string payRefNumber, 
                    string paymentAccount, 
                    string currencyCode, 
                    string currencyDesc, 
                    string paymentMethod, 
                    string paidbyHolder, 
                    string gSTTaxApply, 
                    string paidbyCoy, 
                    string reportOnly, 
                    string totalCharges, 
                    string totalGST, 
                    string register, 
                    string certificateID, 
                    string awardPrice, 
                    string gainLoss, 
                    string cOY, 
                    string bankCode, 
                    string accountNbr, 
                    string accountName, 
                    string remBal, 
                    string remBalDesc, 
                    string toHolder, 
                    string transferClass, 
                    string transferReg, 
                    string transferCertID, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "EnquiryTest",
                    "CPU_AUTO",
                    "18015",
                    "EN_E_Bulk_Dealing_Trading_Actions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 18015: 03_THD Trading  History Details Action", @__tags);
#line 152
this.ScenarioSetup(scenarioInfo);
#line 154
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 155
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 156
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", hIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.Then(string.Format("In ENSTRDSH  I should see Trading History as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" " +
                        "\"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}\"", hIN, type, iD, tran, tradingStatus, units, money, @class, unitsSold, finalPrice, grossAmount, purchaseRes, loan, options, charges, gST, tAX, netAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 159
  testRunner.And(string.Format("In ENSTRDSH  I should see Trading History Charge details as \"{0}\" \"{1}\" \"{2}\" \"{3" +
                        "}\" \"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\"" +
                        " \"{16}\" \"{17}\" \"{18}\"", tradeDate, settlementDate, chargeCode1, chargeCode2, chargeCode3, chargeCode4, chargeCode5, chargeCode6, chargeDesc1, chargeDesc2, chargeDesc3, chargeDesc4, chargeDesc5, chargeDesc6, charge1, charge2, charge3, paidByFlag1, paidByFlag2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
  testRunner.And(string.Format("In ENSTRDSH  I should see Trading History Payment details as \"{0}\" \"{1}\" \"{2}\" \"{" +
                        "3}\" \"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\"", paymentDate, payRefNumber, paymentAccount, currencyCode, currencyDesc, paymentMethod, bankCode, accountNbr, accountName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
  testRunner.And(string.Format("In ENSTRDSH  I should see Trading History Summary of Charges as \"{0}\" \"{1}\" \"{2}\"" +
                        " \"{3}\" \"{4}\" \"{5}\"", paidbyHolder, gSTTaxApply, paidbyCoy, reportOnly, totalCharges, totalGST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
  testRunner.And(string.Format("In ENSTRDSH  I should see Trading History Remaining Balance Details as \"{0}\" \"{1}" +
                        "\" \"{2}\" \"{3}\" \"{4}\" \"{5}\"", remBal, remBalDesc, toHolder, transferClass, transferReg, transferCertID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "Action",
                        ">"});
            table15.AddRow(new string[] {
                        "Locate Argument",
                        ""});
#line 163
 testRunner.When("I enter the following details as the Locate action:", ((string)(null)), table15, "When ");
#line 167
 testRunner.Then(string.Format("In ENSTRDSC I should see Certificate details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5" +
                        "}\"", register, certificateID, units, awardPrice, finalPrice, gainLoss), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
