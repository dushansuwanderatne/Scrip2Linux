// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SCRIPAU.Automation.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TS_TradingSystemReports")]
    public partial class TS_TradingSystemReportsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TS_TradingSystemReports.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TS_TradingSystemReports", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deferred Real Time Sale EndtoEnd")]
        [NUnit.Framework.CategoryAttribute("AESSPlanSales")]
        [NUnit.Framework.CategoryAttribute("TFS538234")]
        [NUnit.Framework.CategoryAttribute("TS_TradingSystemGold")]
        [NUnit.Framework.CategoryAttribute("30108")]
        [NUnit.Framework.TestCaseAttribute("SellAll", "NAB2_AUTO", "M", "3383", "CLS.GAP", "ORMSAUUAT", "Y", "0.00", "Y", "C", "ESTSC", "ORD", "VIC", "123451234", "I0032187749", "A", "", "C", "AUD", "E", "73.000000", "73.000000", "1", "30.00", "73.000000", "2190.00", "", "", "", "6.57", "100.00", "15.00", "10.66", "2057.77", "N", "CIFAH.K.KLUPPUR._test@computershare.com", "73.000000", "Y", "C", "C", "20/08/2015", "10", "00", "20/08/2015", "73.000000", "73.000000", "2190.00", "30.000000", "30.000000", "30.000000", "2190.00", "", "121.57", "", "", "10.66", "", "2057.77", "6.57", "100.00", "", "", "15.00", "", "1", "2057.77", "", "", "", "", "", "", "", "", "", "", "121.57", "10.66", "", "", "", "", "", "", "TSSAL", "ATS1", "NDF", "ATS", "1", "73.000000", "", "", "20/08/2015", "20/08/2015", "S", "S", "", "Settled", "30.000000", "1", "73.000000", "2057.77", "Y", "Cheque Loc", "AUD", "73.000000", "Sell All", "S", "SALE", "Settled", "1", "73.000000", "2057.77", "20/08/2015", "20/08/2015", "ESSOPT", "1501", "1.000000", "99999999999.000000", "10:00", "ORD", "VIC", "Market", "ATS Sale     ATSR0000002  79268996 20/08/15 Set           73.000000       2057.77" +
            "      30.000000", "", "", "", "", "01", "", "20/08/2015", "AUSTRALIAN DOLLAR", "Cheque/Unpres", "121.57", "10.66", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "73.000000", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "ATSR", "73.000000", "2057.77", "NAB2_AUTO", null)]
        public virtual void DeferredRealTimeSaleEndtoEnd(
                    string reportHeading, 
                    string cOY, 
                    string onMarketTrade, 
                    string brokerCode, 
                    string brokerAccountID, 
                    string connectionCode, 
                    string realTimeTrading, 
                    string topupPercentage, 
                    string sellSelected, 
                    string option, 
                    string tranType, 
                    string @class, 
                    string reg, 
                    string worldLinkNumber, 
                    string searchName, 
                    string sellOption, 
                    string units, 
                    string paymentMethod, 
                    string prefCurrency, 
                    string notificationReqdInd, 
                    string balance, 
                    string availBalance, 
                    string durationType, 
                    string estMarketValue, 
                    string unitsSell, 
                    string marketValue, 
                    string purchResidueAmt, 
                    string federalTaxWithheld, 
                    string loanAmt, 
                    string chargeAmount1, 
                    string chargeAmount2, 
                    string chargeAmount3, 
                    string totalGst, 
                    string estimatedProceeds, 
                    string overrideEmailInd, 
                    string emailAddress, 
                    string confirmUnits, 
                    string confirmWarningFlag5, 
                    string menuSelection, 
                    string confirmStatus, 
                    string tradeDate, 
                    string tradeTimeHH, 
                    string tradeTimeMM, 
                    string settlementDate, 
                    string totalUnits, 
                    string unitsTraded, 
                    string totalCost, 
                    string finalPrice, 
                    string tradePrice, 
                    string priceATAudit, 
                    string grossAmount, 
                    string purchaseResidue, 
                    string holderCharges1, 
                    string loanAmount, 
                    string optionCost, 
                    string gst, 
                    string taxWithheld, 
                    string nettAmount, 
                    string chargeAmount01, 
                    string chargeAmount02, 
                    string chargeAmount03, 
                    string chargeAmount04, 
                    string chargeAmount05, 
                    string chargeAmount06, 
                    string localChqCount, 
                    string localChqNettAmount, 
                    string foreignChqCount, 
                    string foreignChqNettAmt, 
                    string wireCount, 
                    string wireNettAmount, 
                    string directBankingCount, 
                    string directBankNettAmt, 
                    string employerCount, 
                    string employerNettAmount, 
                    string companyCharges, 
                    string companyTax, 
                    string holderCharges, 
                    string holderTax, 
                    string reportCharges, 
                    string reportTax, 
                    string paymentAccount, 
                    string bankType, 
                    string branchNumber, 
                    string accountNumber, 
                    string paymentAccount1, 
                    string orderNO, 
                    string ident, 
                    string classCode, 
                    string nbrTrades, 
                    string tradeGrossAmount, 
                    string tradeFrom, 
                    string tradeTO, 
                    string settlementFrom, 
                    string settlementTO, 
                    string menuSelection1, 
                    string confirmStatus1, 
                    string tradingID, 
                    string status, 
                    string price, 
                    string transCount, 
                    string transTotal, 
                    string moneyTotal, 
                    string applyTaxInd, 
                    string paymentMethodDesc, 
                    string currency, 
                    string sellUnits, 
                    string orderType, 
                    string bulkType, 
                    string bulkTypeDesc, 
                    string statusDesc, 
                    string totalCount, 
                    string orderTransUnits, 
                    string totalMoney, 
                    string reqdSettlementDate, 
                    string actualSettlementDate, 
                    string reconciliationCode, 
                    string cshtrnReference, 
                    string minimumDeal, 
                    string maximumDeal, 
                    string cutOffTime, 
                    string counterpartyClass, 
                    string counterRegisterCode, 
                    string orderType1, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string action, 
                    string locateArgument, 
                    string paymentDate, 
                    string currencyDesc, 
                    string paymentMethod1, 
                    string totalCharges, 
                    string gstTaxTotal, 
                    string bankCode, 
                    string payeeAccountNumber, 
                    string accountName, 
                    string cover01, 
                    string cover02, 
                    string cover03, 
                    string cover04, 
                    string cover05, 
                    string cover06, 
                    string cover07, 
                    string cover08, 
                    string cover09, 
                    string cover10, 
                    string cover11, 
                    string cover12, 
                    string cover13, 
                    string cover14, 
                    string cover15, 
                    string units1, 
                    string sellAll01, 
                    string units01, 
                    string sellAll02, 
                    string units02, 
                    string sellAll03, 
                    string units03, 
                    string sellAll04, 
                    string units04, 
                    string sellAll05, 
                    string units05, 
                    string sellAll06, 
                    string units06, 
                    string sellAll07, 
                    string units07, 
                    string sellAll08, 
                    string units08, 
                    string sellAll09, 
                    string units09, 
                    string remainingBalance, 
                    string remBalIndDesc, 
                    string transfereeHolder, 
                    string transfereeClass, 
                    string tradeControlCode, 
                    string tradeUnits, 
                    string transMoney, 
                    string currentCOY, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AESSPlanSales",
                    "TFS538234",
                    "TS_TradingSystemGold",
                    "30108"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deferred Real Time Sale EndtoEnd", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
  testRunner.And("I go to \"Trading Control Codes\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
  testRunner.And(string.Format("In TRD24000 I select the Trade Control Code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
  testRunner.And(string.Format("In TRD24001 I perform a Change for On Market Trade \"{0}\", \"{1}\", \"{2}\", \"{3}\", \"{" +
                        "4}\" and Top Up \"{5}\", \"{6}\" and Remaining Balance Options \"{7}\", \"{8}\", \"{9}\", \"" +
                        "{10}\" and World Link Number \"{11}\"", onMarketTrade, brokerCode, brokerAccountID, connectionCode, realTimeTrading, topupPercentage, sellSelected, option, tranType, @class, reg, worldLinkNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
  testRunner.And(string.Format("I go to the Trading system Sales and trade control code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
  testRunner.And(string.Format("In TRS00501 I Add Postal Transaction Entry details as \"{0}\"", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
  testRunner.And(string.Format("In TRS00502 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\"", sellOption, units, paymentMethod, prefCurrency, notificationReqdInd, balance, availBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
  testRunner.And(string.Format("In TRS00507 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}" +
                        "\" \"{17}\"", sellAll01, units01, sellAll02, units02, sellAll03, units03, sellAll04, units04, sellAll05, units05, sellAll06, units06, sellAll07, units07, sellAll08, units08, sellAll09, units09), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
  testRunner.And(string.Format("In TRS00511 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", durationType, estMarketValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
  testRunner.And(string.Format("In TRS00513 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\"", cover01, cover02, cover03, cover04, cover05, cover06, cover07, cover08, cover09, cover10, cover11, cover12, cover13, cover14, cover15), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
  testRunner.And(string.Format("In TRS00504 I Verify Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" " +
                        "\"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\"", unitsSell, estMarketValue, marketValue, purchResidueAmt, federalTaxWithheld, loanAmt, chargeAmount1, chargeAmount2, chargeAmount3, totalGst, estimatedProceeds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
  testRunner.And(string.Format("In TRS00512 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", overrideEmailInd, emailAddress), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
  testRunner.And(string.Format("In TRS00503 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", confirmUnits, confirmWarningFlag5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
  testRunner.And(string.Format("In TRD00401 I Change Order Status to \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\"", menuSelection, confirmStatus, tradeDate, tradeTimeHH, tradeTimeMM, settlementDate, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.Then(string.Format("In TRD004CS I Verify Change Order Status details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", unitsTraded, totalCost, finalPrice, tradePrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
  testRunner.And(string.Format("In TRD004CS I Verify Change Order Status details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.When(string.Format("In TRD00101 I Run the Generate Output Job as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" " +
                        "\"{6}\" \"{7}\" \"{8}\" \"{9}\"", paymentAccount1, orderNO, ident, classCode, nbrTrades, tradeGrossAmount, tradeFrom, tradeTO, settlementFrom, settlementTO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX"});
            table1.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT"});
#line 29
  testRunner.And("I wait for  GenerateOutput job to complete", ((string)(null)), table1, "And ");
#line 32
  testRunner.And(string.Format("In TRD00401 I Force Settle the Order as \"{0}\" \"{1}\"", menuSelection1, confirmStatus1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.Then(string.Format("In TRS01010 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\"", tradingID, status, price, classCode, transCount, transTotal, moneyTotal, settlementDate, applyTaxInd, paymentMethod, paymentMethodDesc, currency, sellUnits, orderType, tradeUnits, transMoney), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
  testRunner.And(string.Format("In TRDSCH02 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" " +
                        "\"{17}\" \"{18}\"", tradingID, bulkType, bulkTypeDesc, statusDesc, totalCount, orderTransUnits, totalMoney, tradeDate, reqdSettlementDate, actualSettlementDate, finalPrice, reconciliationCode, cshtrnReference, minimumDeal, maximumDeal, cutOffTime, counterpartyClass, counterRegisterCode, orderType1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\"", unitsTraded, totalCost, finalPrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
  testRunner.And("I go the Main Menu From Trading System", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Action",
                        "TH"});
            table2.AddRow(new string[] {
                        "Locate Argument",
                        "/ATS"});
#line 41
  testRunner.And("I enter the following details as the Locate action:", ((string)(null)), table2, "And ");
#line 45
 testRunner.Then(string.Format("In ENSTRD48 I should see trading history summary as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        "", line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", units1, unitsSell, finalPrice, grossAmount, purchaseResidue, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06, paymentDate, paymentAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", prefCurrency, currencyDesc, paymentMethod1, holderCharges, holderTax, companyCharges, companyTax, reportCharges, reportTax, totalCharges, gstTaxTotal, bankCode, payeeAccountNumber, accountName, remainingBalance, remBalIndDesc, transfereeHolder, transfereeClass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportHeading",
                        "FileName",
                        "COY",
                        "CurrentCOY"});
            table3.AddRow(new string[] {
                        string.Format("{0}", reportHeading),
                        "",
                        string.Format("{0}", cOY),
                        string.Format("{0}", currentCOY)});
#line 49
 testRunner.Then("I copy output files to local", ((string)(null)), table3, "Then ");
#line 52
  testRunner.And("I parse the files from VMS or Linux", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
  testRunner.And("I compare the files from VMS and Linux goldcopy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Options Real Time Sale EndtoEnd")]
        [NUnit.Framework.CategoryAttribute("TS_TradingSystemGold")]
        [NUnit.Framework.CategoryAttribute("OptionsPlanSales")]
        [NUnit.Framework.CategoryAttribute("30522")]
        [NUnit.Framework.TestCaseAttribute("ExerciseAll", "NAB2_AUTO", "N", "M", "3383", "CLS.GAP", "ORMSAUUAT", "Y", "0.00", "", "C", "ESOXR", "ORD", "VIC", "123451234", "", "I0036534915", "Y", "", "", "", "", "", "", "", "", "", "", "", "A", "", "C", "AUD", "N", "4000.000000", "4000.000000", "1", "30.00", "1000.000000", "1000.000000", "30000.00", "", "", "19000.00", "", "90.00", "100.00", "15.00", "19.00", "10776.00", "", "", "C", "C", "20/08/2015", "10", "00", "20/08/2015", "1000.000000", "1000.000000", "30000.00", "30.000000", "30.000000", "30.000000", "30000.00", "", "205.00", "", "19.00", "", "10776.00", "90.00", "100.00", "", "", "15.00", "", "1", "10776.00", "", "", "", "", "", "", "", "", "", "", "205.00", "19.00", "", "", "", "", "", "", "TSSAL", "OPT1", "NDF", "OPT", "1", "1000.000000", "", "", "20/08/2015", "20/08/2015", "S", "S", "", "Settled", "30.000000", "1", "1000.000000", "10776.00", "Y", "Cheque Loc", "AUD", "1000.000000", "Sell All", "S", "SALE", "Settled", "1", "1000.000000", "10776.00", "20/08/2015", "20/08/2015", "ESSOPT", "", "1.000000", "99999999999.000000", "10:00", "ORD", "VIC", "Market", "", "", "", "", "", "01", "", "20/08/2015", "AUSTRALIAN DOLLAR", "Cheque/Unpres", "205.00", "19.00", "R", "R", "TH", "/OPT", "", "", "", "", "", "", "", "ROPT", "1000.000000", "10776.00", "NAB2_AUTO", null)]
        public virtual void OptionsRealTimeSaleEndtoEnd(
                    string reportHeading, 
                    string cOY, 
                    string multi_Cert, 
                    string onMarketTrade, 
                    string brokerCode, 
                    string brokerAccountID, 
                    string connectionCode, 
                    string realTimeTrading, 
                    string topupPercentage, 
                    string sellSelected, 
                    string option, 
                    string tranType, 
                    string @class, 
                    string reg, 
                    string worldLinkNumber, 
                    string transNumber, 
                    string searchName, 
                    string sellAll01, 
                    string exerciseUnits01, 
                    string units01, 
                    string sellAll02, 
                    string exerciseUnits02, 
                    string units02, 
                    string sellAll03, 
                    string exerciseUnits03, 
                    string units03, 
                    string sellAll04, 
                    string exerciseUnits04, 
                    string units04, 
                    string sellOption, 
                    string remainingBalInd, 
                    string paymentMethod, 
                    string prefCurrency, 
                    string notificationReqdInd, 
                    string balance, 
                    string availBalance, 
                    string durationType, 
                    string estMarketValue, 
                    string unitsExercise, 
                    string unitsSell, 
                    string marketValue, 
                    string purchResidueAmt, 
                    string federalTaxWithheld, 
                    string optionCost, 
                    string loanAmt, 
                    string chargeAmount1, 
                    string chargeAmount2, 
                    string chargeAmount3, 
                    string totalGst, 
                    string estimatedProceeds, 
                    string confirmUnits, 
                    string confirmWarningFlag5, 
                    string menuSelection, 
                    string confirmStatus, 
                    string tradeDate, 
                    string tradeTimeHH, 
                    string tradeTimeMM, 
                    string settlementDate, 
                    string totalUnits, 
                    string unitsTraded, 
                    string totalCost, 
                    string finalPrice, 
                    string tradePrice, 
                    string priceATAudit, 
                    string grossAmount, 
                    string purchaseResidue, 
                    string holderCharges1, 
                    string loanAmount, 
                    string gst, 
                    string taxWithheld, 
                    string nettAmount, 
                    string chargeAmount01, 
                    string chargeAmount02, 
                    string chargeAmount03, 
                    string chargeAmount04, 
                    string chargeAmount05, 
                    string chargeAmount06, 
                    string localChqCount, 
                    string localChqNettAmount, 
                    string foreignChqCount, 
                    string foreignChqNettAmt, 
                    string wireCount, 
                    string wireNettAmount, 
                    string directBankingCount, 
                    string directBankNettAmt, 
                    string employerCount, 
                    string employerNettAmount, 
                    string companyCharges, 
                    string companyTax, 
                    string holderCharges, 
                    string holderTax, 
                    string reportCharges, 
                    string reportTax, 
                    string paymentAccount, 
                    string bankType, 
                    string branchNumber, 
                    string accountNumber, 
                    string paymentAccount1, 
                    string orderNO, 
                    string ident, 
                    string classCode, 
                    string nbrTrades, 
                    string tradeGrossAmount, 
                    string tradeFrom, 
                    string tradeTO, 
                    string settlementFrom, 
                    string settlementTO, 
                    string menuSelection1, 
                    string confirmStatus1, 
                    string tradingID, 
                    string status, 
                    string price, 
                    string transCount, 
                    string transTotal, 
                    string moneyTotal, 
                    string applyTaxInd, 
                    string paymentMethodDesc, 
                    string currency, 
                    string sellUnits, 
                    string orderType, 
                    string bulkType, 
                    string bulkTypeDesc, 
                    string statusDesc, 
                    string totalCount, 
                    string orderTransUnits, 
                    string totalMoney, 
                    string reqdSettlementDate, 
                    string actualSettlementDate, 
                    string reconciliationCode, 
                    string cshtrnReference, 
                    string minimumDeal, 
                    string maximumDeal, 
                    string cutOffTime, 
                    string counterpartyClass, 
                    string counterRegisterCode, 
                    string orderType1, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string action, 
                    string locateArgument, 
                    string paymentDate, 
                    string currencyDesc, 
                    string paymentMethod1, 
                    string totalCharges, 
                    string gstTaxTotal, 
                    string menuSelection2, 
                    string confirmStatus2, 
                    string action1, 
                    string locateArgument1, 
                    string bankCode, 
                    string payeeAccountNumber, 
                    string accountName, 
                    string remainingBalance, 
                    string remBalIndDesc, 
                    string transfereeHolder, 
                    string transfereeClass, 
                    string tradeControlCode, 
                    string tradeUnits, 
                    string transMoney, 
                    string currentCOY, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TS_TradingSystemGold",
                    "OptionsPlanSales",
                    "30522"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Options Real Time Sale EndtoEnd", @__tags);
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
  testRunner.And("I go to \"Company Options\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
  testRunner.And(string.Format("In HKS01516 I set the Multi-Cert Flag to \"{0}\"", multi_Cert), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
  testRunner.And("I go to \"Trading Control Codes\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
  testRunner.And(string.Format("In TRD24000 I select the Trade Control Code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
  testRunner.And(string.Format("In TRD24001 I perform a Change for On Market Trade \"{0}\", \"{1}\", \"{2}\", \"{3}\", \"{" +
                        "4}\" and Top Up \"{5}\", \"{6}\" and Remaining Balance Options \"{7}\", \"{8}\", \"{9}\", \"" +
                        "{10}\" and World Link Number \"{11}\"", onMarketTrade, brokerCode, brokerAccountID, connectionCode, realTimeTrading, topupPercentage, sellSelected, option, tranType, @class, reg, worldLinkNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
  testRunner.And(string.Format("I go to the Trading system Sales and trade control code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
  testRunner.And(string.Format("In TRS00701 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", transNumber, searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.When(string.Format("In TRS00702 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\"", sellOption, remainingBalInd, paymentMethod, prefCurrency, notificationReqdInd, balance, availBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
  testRunner.And(string.Format("In TRS00707 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\"", sellAll01, exerciseUnits01, units01, sellAll02, exerciseUnits02, units02, sellAll03, exerciseUnits03, units03, sellAll04, exerciseUnits04, units04), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
  testRunner.And(string.Format("In TRS00511 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", durationType, estMarketValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
  testRunner.And(string.Format("In TRS00704 I Verify Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" " +
                        "\"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\"", unitsExercise, unitsSell, estMarketValue, marketValue, purchResidueAmt, federalTaxWithheld, optionCost, chargeAmount1, chargeAmount2, chargeAmount3, totalGst, estimatedProceeds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
  testRunner.And(string.Format("In TRS00703 I Add Postal Transaction Entry details as \"<ExerciseUnits>\" \"{0}\" \"{1" +
                        "}\"", confirmUnits, confirmWarningFlag5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
  testRunner.And(string.Format("In TRD00401 I Change Order Status to \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\"", menuSelection, confirmStatus, tradeDate, tradeTimeHH, tradeTimeMM, settlementDate, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.Then(string.Format("In TRD004CS I Verify Change Order Status details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", unitsTraded, totalCost, finalPrice, tradePrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 81
  testRunner.And(string.Format("In TRD004CS I Verify Change Order Status details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.When(string.Format("In TRD00101 I Run the Generate Output Job as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" " +
                        "\"{6}\" \"{7}\" \"{8}\" \"{9}\"", paymentAccount1, orderNO, ident, classCode, nbrTrades, tradeGrossAmount, tradeFrom, tradeTO, settlementFrom, settlementTO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX"});
            table4.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT"});
#line 83
  testRunner.And("I wait for  GenerateOutput job to complete", ((string)(null)), table4, "And ");
#line 86
  testRunner.And(string.Format("In TRD00401 I Apply Exercise Transaction as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"" +
                        "{6}\"", menuSelection2, confirmStatus2, tradeDate, tradeTimeHH, tradeTimeMM, settlementDate, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
  testRunner.And(string.Format("In TRD00401 I Force Settle the Order as \"{0}\" \"{1}\"", menuSelection1, confirmStatus1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.Then(string.Format("In TRS01010 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\"", tradingID, status, price, classCode, transCount, transTotal, moneyTotal, settlementDate, applyTaxInd, paymentMethod, paymentMethodDesc, currency, sellUnits, orderType, tradeUnits, transMoney), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
  testRunner.And(string.Format("In TRDSCH02 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" " +
                        "\"{17}\" \"{18}\"", tradingID, bulkType, bulkTypeDesc, statusDesc, totalCount, orderTransUnits, totalMoney, tradeDate, reqdSettlementDate, actualSettlementDate, finalPrice, reconciliationCode, cshtrnReference, minimumDeal, maximumDeal, cutOffTime, counterpartyClass, counterRegisterCode, orderType1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\"", unitsTraded, totalCost, finalPrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
  testRunner.And("I go the Main Menu From Trading System", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action1, locateArgument1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.Then(string.Format("In ENSTRD48 I should see trading history summary as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        "", line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 98
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", orderTransUnits, unitsSell, finalPrice, grossAmount, purchaseResidue, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06, paymentDate, paymentAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", prefCurrency, currencyDesc, paymentMethod1, holderCharges, holderTax, companyCharges, companyTax, reportCharges, reportTax, totalCharges, gstTaxTotal, bankCode, payeeAccountNumber, accountName, remainingBalance, remBalIndDesc, transfereeHolder, transfereeClass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportHeading",
                        "FileName",
                        "COY",
                        "CurrentCOY"});
            table5.AddRow(new string[] {
                        string.Format("{0}", reportHeading),
                        "",
                        string.Format("{0}", cOY),
                        string.Format("{0}", currentCOY)});
#line 101
 testRunner.Then("I copy output files to local", ((string)(null)), table5, "Then ");
#line 104
  testRunner.And("I parse the files from VMS or Linux", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
  testRunner.And("I compare the files from VMS and Linux goldcopy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Loan Real Time Sale EndtoEnd")]
        [NUnit.Framework.CategoryAttribute("TS_TradingSystemGold")]
        [NUnit.Framework.CategoryAttribute("LoanPlanSales")]
        [NUnit.Framework.CategoryAttribute("30881")]
        [NUnit.Framework.TestCaseAttribute("SellPartial", "NAB2_AUTO", "M", "3383", "CLS.GAP", "ORMSAUUAT", "Y", "0.00", "Y", "C", "ESTSC", "ORD", "VIC", "123451234", "I0036534010", "P", "750", "D", "AUD", "E", "1500.000000", "1500.000000", "1", "30.00", "750.000000", "22500.00", "", "", "2000.00", "67.50", "100.00", "10.00", "16.75", "20305.75", "N", "REAL-TIME-HOLDER2@TEST.COM", "750.000000", "", "C", "C", "20/08/2015", "10", "00", "20/08/2015", "750.000000", "750.000000", "22500.00", "30.000000", "30.000000", "30.000000", "22500.00", "", "177.50", "2000.00", "", "16.75", "", "20305.75", "67.50", "100.00", "", "10.00", "", "", "", "", "", "", "", "", "1", "20305.75", "", "", "", "", "177.50", "16.75", "", "", "", "", "", "", "TSSAL", "ELA2", "NDF", "ELA", "1", "750.000000", "", "", "20/08/2015", "20/08/2015", "S", "S", "", "Settled", "30.000000", "1", "750.000000", "20305.75", "Y", "Dir-Credit", "AUD", "750.000000", "Sell Partial", "S", "SALE", "Settled", "1", "750.000000", "20305.75", "20/08/2015", "20/08/2015", "ESSOPT", "1565", "1.000000", "99999999999.000000", "10:00", "ORD", "VIC", "Market", "ELA Sale     RELA0000003  79269004 20/08/15 Set          750.000000      20305.75" +
            "      30.000000", "", "", "", "", "01", "", "20/08/2015", "AUSTRALIAN DOLLAR", "Direct Banking", "177.50", "16.75", "013-481", "000000000145214177", "MR REAL-TIME LOAN-HOLDER2", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "750.000000", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "RELA", "750.000000", "20305.75", "NAB2_AUTO", null)]
        public virtual void LoanRealTimeSaleEndtoEnd(
                    string reportHeading, 
                    string cOY, 
                    string onMarketTrade, 
                    string brokerCode, 
                    string brokerAccountID, 
                    string connectionCode, 
                    string realTimeTrading, 
                    string topupPercentage, 
                    string sellSelected, 
                    string option, 
                    string tranType, 
                    string @class, 
                    string reg, 
                    string worldLinkNumber, 
                    string searchName, 
                    string sellOption, 
                    string units, 
                    string paymentMethod, 
                    string prefCurrency, 
                    string notificationReqdInd, 
                    string balance, 
                    string availBalance, 
                    string durationType, 
                    string estMarketValue, 
                    string unitsSell, 
                    string marketValue, 
                    string purchResidueAmt, 
                    string federalTaxWithheld, 
                    string loanAmt, 
                    string chargeAmount1, 
                    string chargeAmount2, 
                    string chargeAmount3, 
                    string totalGst, 
                    string estimatedProceeds, 
                    string overrideEmailInd, 
                    string emailAddress, 
                    string confirmUnits, 
                    string confirmWarningFlag5, 
                    string menuSelection, 
                    string confirmStatus, 
                    string tradeDate, 
                    string tradeTimeHH, 
                    string tradeTimeMM, 
                    string settlementDate, 
                    string totalUnits, 
                    string unitsTraded, 
                    string totalCost, 
                    string finalPrice, 
                    string tradePrice, 
                    string priceATAudit, 
                    string grossAmount, 
                    string purchaseResidue, 
                    string holderCharges1, 
                    string loanAmount, 
                    string optionCost, 
                    string gst, 
                    string taxWithheld, 
                    string nettAmount, 
                    string chargeAmount01, 
                    string chargeAmount02, 
                    string chargeAmount03, 
                    string chargeAmount04, 
                    string chargeAmount05, 
                    string chargeAmount06, 
                    string localChqCount, 
                    string localChqNettAmount, 
                    string foreignChqCount, 
                    string foreignChqNettAmt, 
                    string wireCount, 
                    string wireNettAmount, 
                    string directBankingCount, 
                    string directBankNettAmt, 
                    string employerCount, 
                    string employerNettAmount, 
                    string companyCharges, 
                    string companyTax, 
                    string holderCharges, 
                    string holderTax, 
                    string reportCharges, 
                    string reportTax, 
                    string paymentAccount, 
                    string bankType, 
                    string branchNumber, 
                    string accountNumber, 
                    string paymentAccount1, 
                    string orderNO, 
                    string ident, 
                    string classCode, 
                    string nbrTrades, 
                    string tradeGrossAmount, 
                    string tradeFrom, 
                    string tradeTO, 
                    string settlementFrom, 
                    string settlementTO, 
                    string menuSelection1, 
                    string confirmStatus1, 
                    string tradingID, 
                    string status, 
                    string price, 
                    string transCount, 
                    string transTotal, 
                    string moneyTotal, 
                    string applyTaxInd, 
                    string paymentMethodDesc, 
                    string currency, 
                    string sellUnits, 
                    string orderType, 
                    string bulkType, 
                    string bulkTypeDesc, 
                    string statusDesc, 
                    string totalCount, 
                    string orderTransUnits, 
                    string totalMoney, 
                    string reqdSettlementDate, 
                    string actualSettlementDate, 
                    string reconciliationCode, 
                    string cshtrnReference, 
                    string minimumDeal, 
                    string maximumDeal, 
                    string cutOffTime, 
                    string counterpartyClass, 
                    string counterRegisterCode, 
                    string orderType1, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string action, 
                    string locateArgument, 
                    string paymentDate, 
                    string currencyDesc, 
                    string paymentMethod1, 
                    string totalCharges, 
                    string gstTaxTotal, 
                    string bankCode, 
                    string payeeAccountNumber, 
                    string accountName, 
                    string cover01, 
                    string cover02, 
                    string cover03, 
                    string cover04, 
                    string cover05, 
                    string cover06, 
                    string cover07, 
                    string cover08, 
                    string cover09, 
                    string cover10, 
                    string cover11, 
                    string cover12, 
                    string cover13, 
                    string cover14, 
                    string cover15, 
                    string unitsTraded1, 
                    string sellAll01, 
                    string units01, 
                    string sellAll02, 
                    string units02, 
                    string sellAll03, 
                    string units03, 
                    string sellAll04, 
                    string units04, 
                    string sellAll05, 
                    string units05, 
                    string sellAll06, 
                    string units06, 
                    string sellAll07, 
                    string units07, 
                    string sellAll08, 
                    string units08, 
                    string sellAll09, 
                    string units09, 
                    string remainingBalance, 
                    string remBalIndDesc, 
                    string transfereeHolder, 
                    string transfereeClass, 
                    string tradeControlCode, 
                    string tradeUnits, 
                    string tradeMoney, 
                    string currentCOY, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TS_TradingSystemGold",
                    "LoanPlanSales",
                    "30881"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Loan Real Time Sale EndtoEnd", @__tags);
#line 117
this.ScenarioSetup(scenarioInfo);
#line 118
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 119
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 122
  testRunner.And("I go to \"Trading Control Codes\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
  testRunner.And(string.Format("In TRD24000 I select the Trade Control Code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
  testRunner.And(string.Format("In TRD24001 I perform a Change for On Market Trade \"{0}\", \"{1}\", \"{2}\", \"{3}\", \"{" +
                        "4}\" and Top Up \"{5}\", \"{6}\" and Remaining Balance Options \"{7}\", \"{8}\", \"{9}\", \"" +
                        "{10}\" and World Link Number \"{11}\"", onMarketTrade, brokerCode, brokerAccountID, connectionCode, realTimeTrading, topupPercentage, sellSelected, option, tranType, @class, reg, worldLinkNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
  testRunner.And(string.Format("I go to the Trading system Sales and trade control code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
  testRunner.And(string.Format("In TRS00501 I Add Postal Transaction Entry details as \"{0}\"", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
  testRunner.And(string.Format("In TRS00502 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\"", sellOption, units, paymentMethod, prefCurrency, notificationReqdInd, balance, availBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
  testRunner.And(string.Format("In TRS00507 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}" +
                        "\" \"{17}\"", sellAll01, units01, sellAll02, units02, sellAll03, units03, sellAll04, units04, sellAll05, units05, sellAll06, units06, sellAll07, units07, sellAll08, units08, sellAll09, units09), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
  testRunner.And(string.Format("In TRS00511 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", durationType, estMarketValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
  testRunner.And(string.Format("In TRS00513 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\"", cover01, cover02, cover03, cover04, cover05, cover06, cover07, cover08, cover09, cover10, cover11, cover12, cover13, cover14, cover15), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
  testRunner.And(string.Format("In TRS00504 I Verify Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" " +
                        "\"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\"", unitsSell, estMarketValue, marketValue, purchResidueAmt, federalTaxWithheld, loanAmt, chargeAmount1, chargeAmount2, chargeAmount3, totalGst, estimatedProceeds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
  testRunner.And(string.Format("In TRS00512 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", overrideEmailInd, emailAddress), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
  testRunner.And(string.Format("In TRS00503 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", confirmUnits, confirmWarningFlag5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
  testRunner.And(string.Format("In TRD00401 I Change Order Status to \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\"", menuSelection, confirmStatus, tradeDate, tradeTimeHH, tradeTimeMM, settlementDate, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.Then(string.Format("In TRD004CS I Verify Change Order Status details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", unitsTraded, totalCost, finalPrice, tradePrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 136
  testRunner.And(string.Format("In TRD004CS I Verify Change Order Status details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
 testRunner.When(string.Format("In TRD00101 I Run the Generate Output Job as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" " +
                        "\"{6}\" \"{7}\" \"{8}\" \"{9}\"", paymentAccount1, orderNO, ident, classCode, nbrTrades, tradeGrossAmount, tradeFrom, tradeTO, settlementFrom, settlementTO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX"});
            table6.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT"});
#line 138
  testRunner.And("I wait for  GenerateOutput job to complete", ((string)(null)), table6, "And ");
#line 141
  testRunner.And(string.Format("In TRD00401 I Force Settle the Order as \"{0}\" \"{1}\"", menuSelection1, confirmStatus1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.Then(string.Format("In TRS01010 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\"", tradingID, status, price, classCode, transCount, transTotal, moneyTotal, settlementDate, applyTaxInd, paymentMethod, paymentMethodDesc, currency, sellUnits, orderType, tradeUnits, tradeMoney), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 143
  testRunner.And(string.Format("In TRDSCH02 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" " +
                        "\"{17}\" \"{18}\"", tradingID, bulkType, bulkTypeDesc, statusDesc, totalCount, orderTransUnits, totalMoney, tradeDate, reqdSettlementDate, actualSettlementDate, finalPrice, reconciliationCode, cshtrnReference, minimumDeal, maximumDeal, cutOffTime, counterpartyClass, counterRegisterCode, orderType1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\"", unitsTraded, totalCost, finalPrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
  testRunner.And("I go the Main Menu From Trading System", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "Action",
                        "TH"});
            table7.AddRow(new string[] {
                        "Locate Argument",
                        "/ELA"});
#line 150
  testRunner.And("I enter the following details as the Locate action:", ((string)(null)), table7, "And ");
#line 154
 testRunner.Then(string.Format("In ENSTRD48 I should see trading history summary as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        "", line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 155
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 156
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", totalUnits, unitsSell, finalPrice, grossAmount, purchaseResidue, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06, paymentDate, paymentAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", prefCurrency, currencyDesc, paymentMethod1, holderCharges, holderTax, companyCharges, companyTax, reportCharges, reportTax, totalCharges, gstTaxTotal, bankCode, payeeAccountNumber, accountName, remainingBalance, remBalIndDesc, transfereeHolder, transfereeClass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportHeading",
                        "FileName",
                        "COY",
                        "CurrentCOY"});
            table8.AddRow(new string[] {
                        string.Format("{0}", reportHeading),
                        "",
                        string.Format("{0}", cOY),
                        string.Format("{0}", currentCOY)});
#line 158
 testRunner.Then("I copy output files to local", ((string)(null)), table8, "Then ");
#line 161
  testRunner.And("I parse the files from VMS or Linux", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
  testRunner.And("I compare the files from VMS and Linux goldcopy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Rights Real Time Sale EndtoEnd")]
        [NUnit.Framework.CategoryAttribute("TS_TradingSystemGold")]
        [NUnit.Framework.CategoryAttribute("RightsPlanSales")]
        [NUnit.Framework.CategoryAttribute("31035")]
        [NUnit.Framework.TestCaseAttribute("ExerciseSelectedWHT", "NAB2_AUTO", "N", "M", "3383", "CLS.GAP", "ORMSAUUAT", "Y", "0.00", "", "C", "ESOXR", "ORD", "VIC", "123451234", "", "I0036536314", "", "", "", "", "", "", "", "799", "", "", "", "", "A", "", "E", "", "N", "4000.000000", "3900.000000", "1", "30.00", "799.000000", "799.000000", "23970.00", "", "12426.04", "", "", "71.91", "100.00", "", "17.19", "11354.86", "", "", "C", "C", "20/08/2015", "10", "00", "20/08/2015", "799.000000", "799.000000", "23970.00", "30.000000", "30.000000", "30.000000", "23970.00", "", "171.91", "", "17.19", "12426.04", "11354.86", "71.91", "100.00", "", "", "", "", "", "", "", "", "", "", "", "", "1", "11354.86", "", "", "171.91", "17.19", "", "", "", "", "", "", "TSSAL", "RGT4", "NDF", "PRS", "1", "799.000000", "", "", "20/08/2015", "20/08/2015", "S", "S", "", "Settled", "30.000000", "1", "799.000000", "11354.86", "Y", "Employer", "AUD", "799.000000", "Sell Specific", "S", "SALE", "Settled", "1", "799.000000", "11354.86", "20/08/2015", "20/08/2015", "ESSOPT", "", "1.000000", "99999999999.000000", "10:00", "ORD", "VIC", "Market", "", "", "", "", "", "01", "", "20/08/2015", "AUSTRALIAN DOLLAR", "Employer", "171.91", "17.19", "R", "R", "TH", "/PRS", "", "", "", "", "", "", "", "RPRS", "799.000000", "11354.86", "NAB2_AUTO", null)]
        public virtual void RightsRealTimeSaleEndtoEnd(
                    string reportHeading, 
                    string cOY, 
                    string multi_Cert, 
                    string onMarketTrade, 
                    string brokerCode, 
                    string brokerAccountID, 
                    string connectionCode, 
                    string realTimeTrading, 
                    string topupPercentage, 
                    string sellSelected, 
                    string option, 
                    string tranType, 
                    string @class, 
                    string reg, 
                    string worldLinkNumber, 
                    string transNumber, 
                    string searchName, 
                    string sellAll01, 
                    string exerciseUnits01, 
                    string units01, 
                    string sellAll02, 
                    string exerciseUnits02, 
                    string units02, 
                    string sellAll03, 
                    string exerciseUnits03, 
                    string units03, 
                    string sellAll04, 
                    string exerciseUnits04, 
                    string units04, 
                    string sellOption, 
                    string remainingBalInd, 
                    string paymentMethod, 
                    string prefCurrency, 
                    string notificationReqdInd, 
                    string balance, 
                    string availBalance, 
                    string durationType, 
                    string estMarketValue, 
                    string unitsExercise, 
                    string unitsSell, 
                    string marketValue, 
                    string purchResidueAmt, 
                    string federalTaxWithheld, 
                    string optionCost, 
                    string loanAmt, 
                    string chargeAmount1, 
                    string chargeAmount2, 
                    string chargeAmount3, 
                    string totalGst, 
                    string estimatedProceeds, 
                    string confirmUnits, 
                    string confirmWarningFlag5, 
                    string menuSelection, 
                    string confirmStatus, 
                    string tradeDate, 
                    string tradeTimeHH, 
                    string tradeTimeMM, 
                    string settlementDate, 
                    string totalUnits, 
                    string unitsTraded, 
                    string totalCost, 
                    string finalPrice, 
                    string tradePrice, 
                    string priceATAudit, 
                    string grossAmount, 
                    string purchaseResidue, 
                    string holderCharges1, 
                    string loanAmount, 
                    string gst, 
                    string taxWithheld, 
                    string nettAmount, 
                    string chargeAmount01, 
                    string chargeAmount02, 
                    string chargeAmount03, 
                    string chargeAmount04, 
                    string chargeAmount05, 
                    string chargeAmount06, 
                    string localChqCount, 
                    string localChqNettAmount, 
                    string foreignChqCount, 
                    string foreignChqNettAmt, 
                    string wireCount, 
                    string wireNettAmount, 
                    string directBankingCount, 
                    string directBankNettAmt, 
                    string employerCount, 
                    string employerNettAmount, 
                    string companyCharges, 
                    string companyTax, 
                    string holderCharges, 
                    string holderTax, 
                    string reportCharges, 
                    string reportTax, 
                    string paymentAccount, 
                    string bankType, 
                    string branchNumber, 
                    string accountNumber, 
                    string paymentAccount1, 
                    string orderNO, 
                    string ident, 
                    string classCode, 
                    string nbrTrades, 
                    string tradeGrossAmount, 
                    string tradeFrom, 
                    string tradeTO, 
                    string settlementFrom, 
                    string settlementTO, 
                    string menuSelection1, 
                    string confirmStatus1, 
                    string tradingID, 
                    string status, 
                    string price, 
                    string transCount, 
                    string transTotal, 
                    string moneyTotal, 
                    string applyTaxInd, 
                    string paymentMethodDesc, 
                    string currency, 
                    string sellUnits, 
                    string orderType, 
                    string bulkType, 
                    string bulkTypeDesc, 
                    string statusDesc, 
                    string totalCount, 
                    string orderTransUnits, 
                    string totalMoney, 
                    string reqdSettlementDate, 
                    string actualSettlementDate, 
                    string reconciliationCode, 
                    string cshtrnReference, 
                    string minimumDeal, 
                    string maximumDeal, 
                    string cutOffTime, 
                    string counterpartyClass, 
                    string counterRegisterCode, 
                    string orderType1, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string action, 
                    string locateArgument, 
                    string paymentDate, 
                    string currencyDesc, 
                    string paymentMethod1, 
                    string totalCharges, 
                    string gstTaxTotal, 
                    string menuSelection2, 
                    string confirmStatus2, 
                    string action1, 
                    string locateArgument1, 
                    string bankCode, 
                    string payeeAccountNumber, 
                    string accountName, 
                    string remainingBalance, 
                    string remBalIndDesc, 
                    string transfereeHolder, 
                    string transfereeClass, 
                    string tradeControlCode, 
                    string tradeUnits, 
                    string transMoney, 
                    string currentCOY, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TS_TradingSystemGold",
                    "RightsPlanSales",
                    "31035"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rights Real Time Sale EndtoEnd", @__tags);
#line 172
this.ScenarioSetup(scenarioInfo);
#line 173
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 174
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 175
  testRunner.And("I go to \"Company Options\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
  testRunner.And(string.Format("In HKS01516 I set the Multi-Cert Flag to \"{0}\"", multi_Cert), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
  testRunner.And("I go to \"Trading Control Codes\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
  testRunner.And(string.Format("In TRD24000 I select the Trade Control Code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
  testRunner.And(string.Format("In TRD24001 I perform a Change for On Market Trade \"{0}\", \"{1}\", \"{2}\", \"{3}\", \"{" +
                        "4}\" and Top Up \"{5}\", \"{6}\" and Remaining Balance Options \"{7}\", \"{8}\", \"{9}\", \"" +
                        "{10}\" and World Link Number \"{11}\"", onMarketTrade, brokerCode, brokerAccountID, connectionCode, realTimeTrading, topupPercentage, sellSelected, option, tranType, @class, reg, worldLinkNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
  testRunner.And(string.Format("I go to the Trading system Sales and trade control code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 181
  testRunner.And(string.Format("In TRS00701 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", transNumber, searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.When(string.Format("In TRS00702 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\"", sellOption, remainingBalInd, paymentMethod, prefCurrency, notificationReqdInd, balance, availBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 184
  testRunner.And(string.Format("In TRS00707 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\"", sellAll01, exerciseUnits01, units01, sellAll02, exerciseUnits02, units02, sellAll03, exerciseUnits03, units03, sellAll04, exerciseUnits04, units04), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
  testRunner.And(string.Format("In TRS00511 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", durationType, estMarketValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
  testRunner.And(string.Format("In TRS00704 I Verify Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" " +
                        "\"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\"", unitsExercise, unitsSell, estMarketValue, marketValue, purchResidueAmt, federalTaxWithheld, optionCost, chargeAmount1, chargeAmount2, chargeAmount3, totalGst, estimatedProceeds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
  testRunner.And(string.Format("In TRS00703 I Add Postal Transaction Entry details as \"<ExerciseUnits>\" \"{0}\" \"{1" +
                        "}\"", confirmUnits, confirmWarningFlag5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
  testRunner.And(string.Format("In TRD00401 I Change Order Status to \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\"", menuSelection, confirmStatus, tradeDate, tradeTimeHH, tradeTimeMM, settlementDate, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
 testRunner.Then(string.Format("In TRD004CS I Verify Change Order Status details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", unitsTraded, totalCost, finalPrice, tradePrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 190
  testRunner.And(string.Format("In TRD004CS I Verify Change Order Status details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
 testRunner.When(string.Format("In TRD00101 I Run the Generate Output Job as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" " +
                        "\"{6}\" \"{7}\" \"{8}\" \"{9}\"", paymentAccount1, orderNO, ident, classCode, nbrTrades, tradeGrossAmount, tradeFrom, tradeTO, settlementFrom, settlementTO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX"});
            table9.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT"});
#line 192
  testRunner.And("I wait for  GenerateOutput job to complete", ((string)(null)), table9, "And ");
#line 195
  testRunner.And(string.Format("In TRD00401 I Apply Exercise Transaction as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"" +
                        "{6}\"", menuSelection2, confirmStatus2, tradeDate, tradeTimeHH, tradeTimeMM, settlementDate, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
  testRunner.And(string.Format("In TRD00401 I Force Settle the Order as \"{0}\" \"{1}\"", menuSelection1, confirmStatus1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
 testRunner.Then(string.Format("In TRS01010 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\"", tradingID, status, price, classCode, transCount, transTotal, moneyTotal, settlementDate, applyTaxInd, paymentMethod, paymentMethodDesc, currency, sellUnits, orderType, tradeUnits, transMoney), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 198
  testRunner.And(string.Format("In TRDSCH02 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" " +
                        "\"{17}\" \"{18}\"", tradingID, bulkType, bulkTypeDesc, statusDesc, totalCount, orderTransUnits, totalMoney, tradeDate, reqdSettlementDate, actualSettlementDate, finalPrice, reconciliationCode, cshtrnReference, minimumDeal, maximumDeal, cutOffTime, counterpartyClass, counterRegisterCode, orderType1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\"", unitsTraded, totalCost, finalPrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
  testRunner.And("I go the Main Menu From Trading System", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 204
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action1, locateArgument1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 206
 testRunner.Then(string.Format("In ENSTRD48 I should see trading history summary as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        "", line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 207
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 208
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", tradeUnits, unitsSell, finalPrice, grossAmount, purchaseResidue, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06, paymentDate, paymentAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 209
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", prefCurrency, currencyDesc, paymentMethod1, holderCharges, holderTax, companyCharges, companyTax, reportCharges, reportTax, totalCharges, gstTaxTotal, bankCode, payeeAccountNumber, accountName, remainingBalance, remBalIndDesc, transfereeHolder, transfereeClass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportHeading",
                        "FileName",
                        "COY",
                        "CurrentCOY"});
            table10.AddRow(new string[] {
                        string.Format("{0}", reportHeading),
                        "",
                        string.Format("{0}", cOY),
                        string.Format("{0}", currentCOY)});
#line 210
 testRunner.Then("I copy output files to local", ((string)(null)), table10, "Then ");
#line 213
  testRunner.And("I parse the files from VMS or Linux", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
  testRunner.And("I compare the files from VMS and Linux goldcopy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
