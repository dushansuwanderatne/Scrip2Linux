// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SCRIPAU.Automation.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SmokeTestShort")]
    public partial class SmokeTestShortFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SmokeTestShort.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SmokeTestShort", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 17348: 01_Employee Search (EA,ED,ES,ESS) -ED")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("EnquiryTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTest")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        public virtual void TestCase1734801_EmployeeSearchEAEDESESS_ED()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 17348: 01_Employee Search (EA,ED,ES,ESS) -ED", new string[] {
                        "winformsTest",
                        "EnquiryTest",
                        "SmokeTest",
                        "FullSmokeTest"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.When("In SELCOY01 I select the company: \"NAB_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
  testRunner.And("I go to the Enquiry system for \"I0070036924\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Action",
                        "ED"});
            table1.AddRow(new string[] {
                        "Locate Argument",
                        ""});
#line 15
  testRunner.And("I enter the following details as the Locate action:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "HIN",
                        "I0070036924"});
            table2.AddRow(new string[] {
                        "Type",
                        "IND"});
            table2.AddRow(new string[] {
                        "Name",
                        "TRANSACTION CODE TEST 2,"});
            table2.AddRow(new string[] {
                        "Address1",
                        "TEST AUTOMATION"});
            table2.AddRow(new string[] {
                        "Address2",
                        "ABBOTSFORD"});
            table2.AddRow(new string[] {
                        "Postcode",
                        "3000"});
            table2.AddRow(new string[] {
                        "AutoForfeit",
                        "Y"});
            table2.AddRow(new string[] {
                        "BirthDate",
                        "01/01/2001"});
            table2.AddRow(new string[] {
                        "Leavercode",
                        "EEE"});
            table2.AddRow(new string[] {
                        "LeaverCodeDesc",
                        "E DEFAULT"});
            table2.AddRow(new string[] {
                        "BlackoutRestricted",
                        "Y"});
            table2.AddRow(new string[] {
                        "BlackoutRestrictedCode",
                        "DE"});
            table2.AddRow(new string[] {
                        "BlackoutRestrictedDesc",
                        "DESIGNATED EMPLOYEES"});
            table2.AddRow(new string[] {
                        "PayrollID",
                        "AUS"});
            table2.AddRow(new string[] {
                        "EmployeeID",
                        "0070036924"});
            table2.AddRow(new string[] {
                        "SubPayrollID",
                        ""});
            table2.AddRow(new string[] {
                        "EmployeeUniqueID",
                        "70036924"});
            table2.AddRow(new string[] {
                        "EmployeeStatus",
                        "E"});
            table2.AddRow(new string[] {
                        "EmployeeStatusDesc",
                        "CURRENT EMPLOYEE"});
            table2.AddRow(new string[] {
                        "EffectiveDate",
                        "11/05/2015"});
            table2.AddRow(new string[] {
                        "LeaverPack",
                        "N"});
            table2.AddRow(new string[] {
                        "LeaverPackSentDate",
                        "No date"});
            table2.AddRow(new string[] {
                        "TerminationDate",
                        "01/01/2015"});
            table2.AddRow(new string[] {
                        "TerminationDesc",
                        "15/05/2015"});
            table2.AddRow(new string[] {
                        "PreferredName",
                        "SALMAN"});
            table2.AddRow(new string[] {
                        "LocationCode",
                        "AUS"});
            table2.AddRow(new string[] {
                        "BusinessUnit",
                        "AUS"});
            table2.AddRow(new string[] {
                        "JobBand",
                        "AUS"});
            table2.AddRow(new string[] {
                        "CostCentre",
                        "MEL"});
            table2.AddRow(new string[] {
                        "EmployeeFlag1",
                        "D"});
            table2.AddRow(new string[] {
                        "EmployeeFlag2",
                        "F"});
            table2.AddRow(new string[] {
                        "GSPEmployee",
                        "N"});
#line 19
 testRunner.Then("In ENSESS01 I should see full holder Employee Details as below:", ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Action",
                        "PID"});
            table3.AddRow(new string[] {
                        "Locate Argument",
                        ""});
#line 53
 testRunner.When("I enter the following details as the Locate action:", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "PayrollID",
                        "AUS"});
            table4.AddRow(new string[] {
                        "PayrollDesc",
                        "AUSTRALIA NAB EMPLOYEES"});
            table4.AddRow(new string[] {
                        "PayeeName1",
                        "COMPUTERSHARE TECHNOLOGY SERVICES"});
            table4.AddRow(new string[] {
                        "PayeeName2",
                        "COMPUTERSHARE TECHNOLOGY SERVICES"});
            table4.AddRow(new string[] {
                        "Name",
                        "COMPUTERSHARE TECHNOLOGIES"});
            table4.AddRow(new string[] {
                        "Address1",
                        "452 JHONSTON ST, ABBOTSFOED"});
            table4.AddRow(new string[] {
                        "Address2",
                        "452 JHONSTON ST, ABBOTSFOED"});
            table4.AddRow(new string[] {
                        "Address3",
                        "452 JHONSTON ST, ABBOTSFOED"});
            table4.AddRow(new string[] {
                        "Address4",
                        "452 JHONSTON ST, ABBOTSFOED"});
            table4.AddRow(new string[] {
                        "Address5",
                        "452 JHONSTON ST, ABBOTSFOED"});
            table4.AddRow(new string[] {
                        "Address6",
                        "452 JHONSTON ST, ABBOTSFOED"});
            table4.AddRow(new string[] {
                        "Postcode",
                        "3000"});
#line 57
 testRunner.Then("In ENSESS17 I should see Payroll Identifier Parameters as below:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 34316: 2_GRT. Manual Grant of Options -EX")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTest")]
        [NUnit.Framework.CategoryAttribute("EP_EmployeePlanProcessing")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.TestCaseAttribute("Test1", "OPT", "EX", "14A", "01/02/2014", "3132002", "1000", "", "I0032044964", "14A BONUS", "Bonus Optn", "1000", "5000.00", "ESOB", "/OPT", "EXECUTIVE SHARE OPTION PLAN #2", "14A EX   01/02/2014 HK Def         1000        1000           0        1000      " +
            "     0           0           0           0", "", "** Totals        1000        1000           0        1000           0           0" +
            "           0           0", "", "ESOTF", "14A EX   01/02/2014     D01       HK Def        1000           01/02/2019        " +
            "   0           0        1000", "", "", "", "ESOT", "14A EX  01/02/14     D01       HK Def        1000  01/     01/01/15         250  " +
            "         0           0           0        1000", "02/     01/04/15         250           0           0           0        1000", "03/     01/07/15         250           0           0           0        1000", null)]
        public virtual void TestCase343162_GRT_ManualGrantOfOptions_EX(
                    string test, 
                    string classCode, 
                    string menuItem, 
                    string registerCode, 
                    string appropDate, 
                    string transNumber, 
                    string totalUnits, 
                    string grantCountry, 
                    string searchName, 
                    string registerDesc, 
                    string registerType1, 
                    string units1, 
                    string money1, 
                    string action, 
                    string locateArgument, 
                    string planDesc, 
                    string bLine1, 
                    string bLine2, 
                    string bLine3, 
                    string bLine4, 
                    string action1, 
                    string lineF1, 
                    string lineF2, 
                    string lineF3, 
                    string lineF4, 
                    string action2, 
                    string tLine1, 
                    string tLine2, 
                    string tLine3, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "SmokeTest",
                    "EP_EmployeePlanProcessing",
                    "FullSmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 34316: 2_GRT. Manual Grant of Options -EX", @__tags);
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 78
 testRunner.When("In SELCOY01 I select the company: \"NAB2_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
  testRunner.And(string.Format("I go to the Employee Scheme Processing Menu \"{0}\"", classCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
  testRunner.And(string.Format("I go to the Grant Options Menu for \"{0}\"", menuItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
  testRunner.And(string.Format("I go to the Manual Grant of Options Menu \"{0}\"", registerCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
  testRunner.And(string.Format("In EOL00901 I Add Grant details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"", appropDate, transNumber, totalUnits, grantCountry, searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.Then(string.Format("In EOL00905 I should see Buyer details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\"", classCode, registerCode, registerDesc, registerType1, units1, money1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 84
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 85
 testRunner.When("In SELCOY01 I select the company: \"NAB2_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 86
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.Then(string.Format("In ENSESS24 I should see Options Balance as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\"", classCode, planDesc, bLine1, bLine2, bLine3, bLine4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action1, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 90
 testRunner.Then(string.Format("In ENSESS26 I should see Future Vesting Details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" " +
                        "\"{5}\"", classCode, planDesc, lineF1, lineF2, lineF3, lineF4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 91
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action2, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
 testRunner.Then(string.Format("In ENSESS25 I should see Options Balance as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"", classCode, planDesc, tLine1, tLine2, tLine3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deferred Plan Manual Purchase EP")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTest")]
        [NUnit.Framework.CategoryAttribute("ESSPurchase")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.TestCaseAttribute("Test1", "CPU_AUTO", "DEP", "EP", "13A", "ASA", "67350", "01/07/2013", "2500", "", "M", "", "", "", "", "I0030313364", "Partnership", "2500.00", "Unchanged", "Unchanged", "MAN", "67351", "M", "1", "1", "C", "", "02/07/2013", "250.00", "", "", "Part", "AUD", "RPH", "M", "1", "1", "", "", "", "", "", "", "B", "AWP", "DEP", "CBS", "B", "03/07/2013", "03/07/2013", "1000", "10.00000", "10.00000", "", "", "", "", "", "", "B", "03/07/2013", "10", "A", "A", "C", "C", "12/07/2013", "", "1", "250.00", "25", "250.00", "250.00", "", "", "", "", "GCB", "AUD", "03/07/2013", "03/07/2013", "", "AUD", "03/07/2013", "Y", "", "", "", "", "", "", "", "", "", "", "DP13A", "5555", "NDF", "1", "", "N", "FBS", "S", "", "", "", "", "", "", "", "", "", "", "", "", "S", "", "BTQ", "", "SETTLED", "1", "250.00", "Settled", "1", "25", "25", "250.00", "250.00", "ESAWP", "BPE", "P", "PURCHASE", "25", "250.00", "M", "", "", "", "C", "/DEP/13A", "DEP/DEFERRED EMP SHARE PLAN - AU", "13A 20130712EP   12/07/13            25", "**** Total for 20130712EP                 25", "", "", "", "", "", "", "", null)]
        public virtual void DeferredPlanManualPurchaseEP(
                    string test, 
                    string cOY, 
                    string classCode, 
                    string selection, 
                    string registerCode, 
                    string selection1, 
                    string transNumber, 
                    string transDate, 
                    string totalMoney, 
                    string totalUnits, 
                    string paymentFrequency, 
                    string residualInd, 
                    string grantCountry, 
                    string retentionDate, 
                    string taxRetentionDate, 
                    string searchName, 
                    string registerType1, 
                    string money1, 
                    string retentionDate1, 
                    string taxRetentionDate1, 
                    string selection2, 
                    string transNumberM, 
                    string paymentFrequencyM, 
                    string accumPeriod, 
                    string paymentNumber, 
                    string paymentStatus, 
                    string eol01901ReceiptCurrency, 
                    string paymentDate, 
                    string paymentAmount, 
                    string employerPymtAmt, 
                    string eol01901ExchangeRate, 
                    string registerType, 
                    string eol01902EmpBaseCurr, 
                    string selection3, 
                    string payFreq1, 
                    string accumPeriodFrom1, 
                    string accumPeriodTO1, 
                    string payFreq2, 
                    string accumPeriodFrom2, 
                    string accumPeriodTO2, 
                    string payFreq3, 
                    string accumPeriodFrom3, 
                    string accumPeriodTO3, 
                    string releaseMode, 
                    string confirmRelType, 
                    string bulkCode, 
                    string selection4, 
                    string menuSelection, 
                    string settlementDate, 
                    string tradeDate, 
                    string tradeTime, 
                    string indicativePrice, 
                    string finalPrice, 
                    string chargeCode1, 
                    string chargeCode2, 
                    string chargeCode3, 
                    string chargeDesc1, 
                    string chargeDesc2, 
                    string chargeDesc3, 
                    string confirmStatus, 
                    string confirmSettlement, 
                    string confirmFinalPrice, 
                    string menuSelection1, 
                    string confirmStatus1, 
                    string menuSelection2, 
                    string confirmStatus2, 
                    string awardDate, 
                    string registerCode1, 
                    string totalCount, 
                    string totalUnits1, 
                    string unitsCalc, 
                    string costOFShares, 
                    string totalCost, 
                    string residueKept, 
                    string residueRefunded, 
                    string taxONCharges, 
                    string accumCharges, 
                    string selection5, 
                    string bulkCurrency, 
                    string settlementFrom, 
                    string settlementTO, 
                    string bulkID1, 
                    string currency1, 
                    string settlementDate1, 
                    string processBulkInd1, 
                    string bulkID2, 
                    string currency2, 
                    string settlementDate2, 
                    string processBulkInd2, 
                    string bulkID3, 
                    string currency3, 
                    string settlementDate3, 
                    string processBulkInd3, 
                    string homeBankDesc, 
                    string ausTraceAccount, 
                    string paymentAccount, 
                    string orderNO, 
                    string ident, 
                    string nbrBulks, 
                    string paymentDate1, 
                    string addConvRateInd, 
                    string selection6, 
                    string menuSelection3, 
                    string settlementDateS, 
                    string tradeDateS, 
                    string tradeTimeS, 
                    string indicativePriceS, 
                    string finalPriceS, 
                    string registerCode1S, 
                    string chargeCode1S, 
                    string chargeCode2S, 
                    string chargeCode3S, 
                    string chargeDesc1S, 
                    string chargeDesc2S, 
                    string chargeDesc3S, 
                    string confirmStatus3, 
                    string awardDateS, 
                    string selection7, 
                    string bulkID, 
                    string status, 
                    string transCount, 
                    string transTotal, 
                    string statusDesc, 
                    string bulkCount, 
                    string bulkUnits, 
                    string transUnits, 
                    string bulkMoney, 
                    string transMoney, 
                    string tranTypeParent, 
                    string selection8, 
                    string bulkType, 
                    string bulkTypeDesc, 
                    string bulkTransUnits, 
                    string bulkTransMoney, 
                    string actionM, 
                    string bankType, 
                    string bankCode, 
                    string accountNumber, 
                    string action, 
                    string locateArgument, 
                    string certificateLine1, 
                    string certificateLine2, 
                    string certificateLine3, 
                    string certificateLine4, 
                    string certificateLine5, 
                    string certificateLine6, 
                    string certificateLine7, 
                    string certificateLine8, 
                    string certificateLine9, 
                    string certificateLine10, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "SmokeTest",
                    "ESSPurchase",
                    "FullSmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deferred Plan Manual Purchase EP", @__tags);
#line 102
this.ScenarioSetup(scenarioInfo);
#line 103
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 104
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
  testRunner.And(string.Format("I go to the Employee Scheme Processing Menu \"{0}\"", classCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
  testRunner.And("In EOL00113 I click on \"awards\" Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table5.AddRow(new string[] {
                        string.Format("{0}", selection)});
#line 108
  testRunner.And("In EOL00115 I select the Register Type as:", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "RegisterCode"});
            table6.AddRow(new string[] {
                        string.Format("{0}", registerCode)});
#line 111
  testRunner.And("In EOL00103 I select the RegisterCode as:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table7.AddRow(new string[] {
                        string.Format("{0}", selection1)});
#line 114
  testRunner.And("In EOL00114 I continue with the following values:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransNumber",
                        "TransDate",
                        "TotalMoney",
                        "TotalUnits",
                        "PaymentFrequency",
                        "ResidualInd",
                        "GrantCountry",
                        "RetentionDate",
                        "TaxRetentionDate",
                        "SearchName"});
            table8.AddRow(new string[] {
                        string.Format("{0}", transNumber),
                        string.Format("{0}", transDate),
                        string.Format("{0}", totalMoney),
                        string.Format("{0}", totalUnits),
                        string.Format("{0}", paymentFrequency),
                        string.Format("{0}", residualInd),
                        string.Format("{0}", grantCountry),
                        string.Format("{0}", retentionDate),
                        string.Format("{0}", taxRetentionDate),
                        string.Format("{0}", searchName)});
#line 117
  testRunner.And("In EOL00901 I Add Savings amount as:", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "RegisterType1",
                        "Money1",
                        "PaymentFrequency",
                        "RetentionDate",
                        "TaxRetentionDate"});
            table9.AddRow(new string[] {
                        string.Format("{0}", registerType1),
                        string.Format("{0}", money1),
                        string.Format("{0}", paymentFrequency),
                        string.Format("{0}", retentionDate1),
                        string.Format("{0}", taxRetentionDate1)});
#line 120
  testRunner.And("In EOL00905 I continue with the following values:", ((string)(null)), table9, "And ");
#line 123
  testRunner.And("I Escape to the Main Menu from Employee Processing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
  testRunner.And(string.Format("I go to the Employee Scheme Processing Menu \"{0}\"", classCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
  testRunner.And("In EOL00113 I click on \"payments\" Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table10.AddRow(new string[] {
                        string.Format("{0}", selection)});
#line 127
  testRunner.And("In EOL00115 I select the Register Type as:", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "RegisterCode"});
            table11.AddRow(new string[] {
                        string.Format("{0}", registerCode)});
#line 130
  testRunner.And("In EOL00103 I select the RegisterCode as:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table12.AddRow(new string[] {
                        string.Format("{0}", selection2)});
#line 133
  testRunner.And("In EOL00120 I continue with the following values:", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransNumber",
                        "PaymentFrequency",
                        "AccumPeriod",
                        "PaymentNumber",
                        "PaymentStatus",
                        "Eol01901ReceiptCurrency",
                        "PaymentDate",
                        "PaymentAmount",
                        "EmployerPymtAmt",
                        "Eol01901ExchangeRate",
                        "SearchName"});
            table13.AddRow(new string[] {
                        string.Format("{0}", transNumberM),
                        string.Format("{0}", paymentFrequencyM),
                        string.Format("{0}", accumPeriod),
                        string.Format("{0}", paymentNumber),
                        string.Format("{0}", paymentStatus),
                        string.Format("{0}", eol01901ReceiptCurrency),
                        string.Format("{0}", paymentDate),
                        string.Format("{0}", paymentAmount),
                        string.Format("{0}", employerPymtAmt),
                        string.Format("{0}", eol01901ExchangeRate),
                        string.Format("{0}", searchName)});
#line 136
  testRunner.And("In EOL01901 I Add Manual Payment as:", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccumPeriod",
                        "PaymentNumber",
                        "PaymentFrequency",
                        "RegisterType",
                        "PaymentAmount",
                        "Eol01902EmpBaseCurr"});
            table14.AddRow(new string[] {
                        string.Format("{0}", accumPeriod),
                        string.Format("{0}", paymentNumber),
                        string.Format("{0}", paymentFrequency),
                        string.Format("{0}", registerType),
                        string.Format("{0}", paymentAmount),
                        string.Format("{0}", eol01902EmpBaseCurr)});
#line 139
  testRunner.And("In EOL01902 I verify the following values:", ((string)(null)), table14, "And ");
#line 142
  testRunner.And("I Escape to the Main Menu from Employee Processing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
  testRunner.And(string.Format("I go to the Employee Scheme Processing Menu \"{0}\"", classCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
  testRunner.And("In EOL00113 I click on \"releases\" Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table15.AddRow(new string[] {
                        string.Format("{0}", selection)});
#line 146
  testRunner.And("In EOL00115 I select the Register Type as:", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "RegisterCode"});
            table16.AddRow(new string[] {
                        string.Format("{0}", registerCode)});
#line 149
  testRunner.And("In EOL00103 I select the RegisterCode as:", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table17.AddRow(new string[] {
                        string.Format("{0}", selection3)});
#line 152
  testRunner.And("In EOL00106 I continue with the following values:", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "PayFreq1",
                        "AccumPeriodFrom1",
                        "AccumPeriodTO1",
                        "PayFreq2",
                        "AccumPeriodFrom2",
                        "AccumPeriodTO2",
                        "PayFreq3",
                        "AccumPeriodFrom3",
                        "AccumPeriodTO3",
                        "ReleaseMode"});
            table18.AddRow(new string[] {
                        string.Format("{0}", payFreq1),
                        string.Format("{0}", accumPeriodFrom1),
                        string.Format("{0}", accumPeriodTO1),
                        string.Format("{0}", payFreq2),
                        string.Format("{0}", accumPeriodFrom2),
                        string.Format("{0}", accumPeriodTO2),
                        string.Format("{0}", payFreq3),
                        string.Format("{0}", accumPeriodFrom3),
                        string.Format("{0}", accumPeriodTO3),
                        string.Format("{0}", releaseMode)});
#line 155
  testRunner.And("In EOLBLK05 I continue with the following values:", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "ConfirmRelType"});
            table19.AddRow(new string[] {
                        string.Format("{0}", confirmRelType)});
#line 158
  testRunner.And("In EOLBLK04 I continue with the following values:", ((string)(null)), table19, "And ");
#line 161
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria"});
            table20.AddRow(new string[] {
                        "completion",
                        "600",
                        "error"});
#line 162
  testRunner.And("In JOBSUB90 I submit the report for VMS and Linux", ((string)(null)), table20, "And ");
#line 165
  testRunner.And("I Escape to the Main Menu from Employee Processing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "BulkCode"});
            table21.AddRow(new string[] {
                        string.Format("{0}", bulkCode)});
#line 167
  testRunner.And("I go to the Bulk Processing System and select Bulk code as:", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table22.AddRow(new string[] {
                        string.Format("{0}", selection4)});
#line 170
  testRunner.And("In OLSBLK02 I continue with the following values:", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "MenuSelection"});
            table23.AddRow(new string[] {
                        string.Format("{0}", menuSelection)});
#line 173
  testRunner.And("In OLSB0401 I change the Bulk Status as:", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "SettlementDate",
                        "TradeDate",
                        "TradeTime",
                        "IndicativePrice",
                        "FinalPrice",
                        "RegisterCode",
                        "ChargeCode1",
                        "ChargeCode2",
                        "ChargeCode3",
                        "ChargeDesc1",
                        "ChargeDesc2",
                        "ChargeDesc3",
                        "ConfirmStatus"});
            table24.AddRow(new string[] {
                        string.Format("{0}", settlementDate),
                        string.Format("{0}", tradeDate),
                        string.Format("{0}", tradeTime),
                        string.Format("{0}", indicativePrice),
                        string.Format("{0}", finalPrice),
                        string.Format("{0}", registerCode),
                        string.Format("{0}", chargeCode1),
                        string.Format("{0}", chargeCode2),
                        string.Format("{0}", chargeCode3),
                        string.Format("{0}", chargeDesc1),
                        string.Format("{0}", chargeDesc2),
                        string.Format("{0}", chargeDesc3),
                        string.Format("{0}", confirmStatus)});
#line 177
  testRunner.And("In OLSB0402 I change the Bulk Status as:", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "ConfirmSettlement",
                        "ConfirmFinalPrice"});
            table25.AddRow(new string[] {
                        string.Format("{0}", confirmSettlement),
                        string.Format("{0}", confirmFinalPrice)});
#line 180
  testRunner.And("In OLSB0403 I continue with the following values:", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table26.AddRow(new string[] {
                        string.Format("{0}", selection4)});
#line 183
  testRunner.And("In OLSBLK02 I continue with the following values:", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "MenuSelection"});
            table27.AddRow(new string[] {
                        string.Format("{0}", menuSelection1)});
#line 186
  testRunner.And("In OLSB0401 I change the Bulk Status as:", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "SettlementDate",
                        "TradeDate",
                        "TradeTime",
                        "IndicativePrice",
                        "FinalPrice",
                        "RegisterCode",
                        "ChargeCode1",
                        "ChargeCode2",
                        "ChargeCode3",
                        "ChargeDesc1",
                        "ChargeDesc2",
                        "ChargeDesc3",
                        "ConfirmStatus"});
            table28.AddRow(new string[] {
                        string.Format("{0}", settlementDate),
                        string.Format("{0}", tradeDate),
                        string.Format("{0}", tradeTime),
                        string.Format("{0}", indicativePrice),
                        string.Format("{0}", finalPrice),
                        string.Format("{0}", registerCode1),
                        string.Format("{0}", chargeCode1),
                        string.Format("{0}", chargeCode2),
                        string.Format("{0}", chargeCode3),
                        string.Format("{0}", chargeDesc1),
                        string.Format("{0}", chargeDesc2),
                        string.Format("{0}", chargeDesc3),
                        string.Format("{0}", confirmStatus1)});
#line 189
  testRunner.And("In OLSB0402 I change the Bulk Status as:", ((string)(null)), table28, "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "ConfirmSettlement",
                        "ConfirmFinalPrice"});
            table29.AddRow(new string[] {
                        string.Format("{0}", confirmSettlement),
                        string.Format("{0}", confirmFinalPrice)});
#line 192
  testRunner.And("In OLSB0403 I continue with the following values:", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table30.AddRow(new string[] {
                        string.Format("{0}", selection4)});
#line 195
  testRunner.And("In OLSBLK02 I continue with the following values:", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "MenuSelection"});
            table31.AddRow(new string[] {
                        string.Format("{0}", menuSelection2)});
#line 198
  testRunner.And("In OLSB0401 I change the Bulk Status as:", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "SettlementDate",
                        "TradeDate",
                        "TradeTime",
                        "IndicativePrice",
                        "FinalPrice",
                        "RegisterCode",
                        "ChargeCode1",
                        "ChargeCode2",
                        "ChargeCode3",
                        "ChargeDesc1",
                        "ChargeDesc2",
                        "ChargeDesc3",
                        "ConfirmStatus",
                        "AwardDate"});
            table32.AddRow(new string[] {
                        string.Format("{0}", settlementDate),
                        string.Format("{0}", tradeDate),
                        string.Format("{0}", tradeTime),
                        string.Format("{0}", indicativePrice),
                        string.Format("{0}", finalPrice),
                        string.Format("{0}", registerCode1),
                        string.Format("{0}", chargeCode1),
                        string.Format("{0}", chargeCode2),
                        string.Format("{0}", chargeCode3),
                        string.Format("{0}", chargeDesc1),
                        string.Format("{0}", chargeDesc2),
                        string.Format("{0}", chargeDesc3),
                        string.Format("{0}", confirmStatus2),
                        string.Format("{0}", awardDate)});
#line 201
  testRunner.And("In OLSB0402 I change the Bulk Status as:", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "ConfirmSettlement",
                        "ConfirmFinalPrice"});
            table33.AddRow(new string[] {
                        string.Format("{0}", confirmSettlement),
                        string.Format("{0}", confirmFinalPrice)});
#line 204
  testRunner.And("In OLSB0403 I continue with the following values:", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "TotalCount",
                        "TotalUnits",
                        "SettlementDate",
                        "FinalPrice",
                        "UnitsCalc",
                        "CostOFShares",
                        "TotalCost",
                        "ResidueKept",
                        "ResidueRefunded",
                        "TaxONCharges",
                        "AccumCharges"});
            table34.AddRow(new string[] {
                        string.Format("{0}", totalCount),
                        string.Format("{0}", totalUnits1),
                        string.Format("{0}", settlementDate),
                        string.Format("{0}", finalPrice),
                        string.Format("{0}", unitsCalc),
                        string.Format("{0}", costOFShares),
                        string.Format("{0}", totalCost),
                        string.Format("{0}", residueKept),
                        string.Format("{0}", residueRefunded),
                        string.Format("{0}", taxONCharges),
                        string.Format("{0}", accumCharges)});
#line 207
  testRunner.And("In OLSB0404 I verify the following values:", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table35.AddRow(new string[] {
                        string.Format("{0}", selection5)});
#line 210
  testRunner.And("In OLSBLK02 I continue with the following values:", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "BulkCurrency",
                        "SettlementFrom",
                        "SettlementTO"});
            table36.AddRow(new string[] {
                        string.Format("{0}", bulkCurrency),
                        string.Format("{0}", settlementFrom),
                        string.Format("{0}", settlementTO)});
#line 214
  testRunner.And("In OLSB0105 I continue with the following values:", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "BulkID1",
                        "Currency1",
                        "SettlementDate1",
                        "ProcessBulkInd1",
                        "BulkID2",
                        "Currency2",
                        "SettlementDate2",
                        "ProcessBulkInd2",
                        "BulkID3",
                        "Currency3",
                        "SettlementDate3",
                        "ProcessBulkInd3"});
            table37.AddRow(new string[] {
                        string.Format("{0}", bulkID1),
                        string.Format("{0}", currency1),
                        string.Format("{0}", settlementDate1),
                        string.Format("{0}", processBulkInd1),
                        string.Format("{0}", bulkID2),
                        string.Format("{0}", currency2),
                        string.Format("{0}", settlementDate2),
                        string.Format("{0}", processBulkInd2),
                        string.Format("{0}", bulkID3),
                        string.Format("{0}", currency3),
                        string.Format("{0}", settlementDate3),
                        string.Format("{0}", processBulkInd3)});
#line 217
  testRunner.And("In OLSB0106 I continue with the following values:", ((string)(null)), table37, "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "HomeBankDesc",
                        "AusTraceAccount"});
            table38.AddRow(new string[] {
                        string.Format("{0}", homeBankDesc),
                        string.Format("{0}", ausTraceAccount)});
#line 220
  testRunner.And("In OLSB0104 I verify the following values:", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "PaymentAccount",
                        "OrderNO",
                        "Ident",
                        "NbrBulks",
                        "SettlementFrom",
                        "SettlementTO",
                        "PaymentDate",
                        "AddConvRateInd"});
            table39.AddRow(new string[] {
                        string.Format("{0}", paymentAccount),
                        string.Format("{0}", orderNO),
                        string.Format("{0}", ident),
                        string.Format("{0}", nbrBulks),
                        string.Format("{0}", settlementFrom),
                        string.Format("{0}", settlementTO),
                        string.Format("{0}", paymentDate1),
                        string.Format("{0}", addConvRateInd)});
#line 223
  testRunner.And("In OLSB0101 I continue with the following values:", ((string)(null)), table39, "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria"});
            table40.AddRow(new string[] {
                        "completion",
                        "600",
                        "error"});
#line 226
  testRunner.And("In JOBSUB90 I submit the report for VMS and Linux", ((string)(null)), table40, "And ");
#line 229
  testRunner.And("I PressESC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table41.AddRow(new string[] {
                        string.Format("{0}", selection6)});
#line 231
  testRunner.And("In OLSBLK02 I continue with the following values:", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "MenuSelection"});
            table42.AddRow(new string[] {
                        string.Format("{0}", menuSelection3)});
#line 234
  testRunner.And("In OLSB0401 I change the Bulk Status as:", ((string)(null)), table42, "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "SettlementDate",
                        "TradeDate",
                        "TradeTime",
                        "IndicativePrice",
                        "FinalPrice",
                        "RegisterCode",
                        "ChargeCode1",
                        "ChargeCode2",
                        "ChargeCode3",
                        "ChargeDesc1",
                        "ChargeDesc2",
                        "ChargeDesc3",
                        "ConfirmStatus",
                        "AwardDate"});
            table43.AddRow(new string[] {
                        string.Format("{0}", settlementDateS),
                        string.Format("{0}", tradeDateS),
                        string.Format("{0}", tradeTimeS),
                        string.Format("{0}", indicativePriceS),
                        string.Format("{0}", finalPriceS),
                        string.Format("{0}", registerCode1S),
                        string.Format("{0}", chargeCode1S),
                        string.Format("{0}", chargeCode2S),
                        string.Format("{0}", chargeCode3S),
                        string.Format("{0}", chargeDesc1S),
                        string.Format("{0}", chargeDesc2S),
                        string.Format("{0}", chargeDesc3S),
                        string.Format("{0}", confirmStatus3),
                        string.Format("{0}", awardDateS)});
#line 237
  testRunner.And("In OLSB0402 I change the Bulk Status as:", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "ConfirmSettlement",
                        "ConfirmFinalPrice"});
            table44.AddRow(new string[] {
                        string.Format("{0}", confirmSettlement),
                        string.Format("{0}", confirmFinalPrice)});
#line 240
  testRunner.And("In OLSB0403 I continue with the following values:", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table45.AddRow(new string[] {
                        string.Format("{0}", selection7)});
#line 244
  testRunner.And("In OLSBLK02 I continue with the following values:", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "BulkID",
                        "Status",
                        "RegisterCode",
                        "TransCount",
                        "TransTotal",
                        "SettlementDate"});
            table46.AddRow(new string[] {
                        string.Format("{0}", bulkID),
                        string.Format("{0}", status),
                        string.Format("{0}", registerCode),
                        string.Format("{0}", transCount),
                        string.Format("{0}", transTotal),
                        string.Format("{0}", settlementDate3)});
#line 247
  testRunner.And("In BLKSCH01 I continue with the following values:", ((string)(null)), table46, "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "BulkID",
                        "StatusDesc",
                        "BulkCount",
                        "BulkUnits",
                        "TransUnits",
                        "BulkMoney",
                        "TransMoney",
                        "TranTypeParent",
                        "HolderID",
                        "RegisterCode"});
            table47.AddRow(new string[] {
                        string.Format("{0}", bulkID),
                        string.Format("{0}", statusDesc),
                        string.Format("{0}", bulkCount),
                        string.Format("{0}", bulkUnits),
                        string.Format("{0}", transUnits),
                        string.Format("{0}", bulkMoney),
                        string.Format("{0}", transMoney),
                        string.Format("{0}", tranTypeParent),
                        string.Format("{0}", searchName),
                        string.Format("{0}", registerCode)});
#line 250
  testRunner.And("In OLSB1010 I verify the following values:", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table48.AddRow(new string[] {
                        string.Format("{0}", selection8)});
#line 254
  testRunner.And("In OLSBLK02 I continue with the following values:", ((string)(null)), table48, "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "BulkID",
                        "Status",
                        "RegisterCode",
                        "TransCount",
                        "TransTotal",
                        "SettlementDate"});
            table49.AddRow(new string[] {
                        string.Format("{0}", bulkID),
                        string.Format("{0}", status),
                        string.Format("{0}", registerCode),
                        string.Format("{0}", transCount),
                        string.Format("{0}", transTotal),
                        string.Format("{0}", settlementDate3)});
#line 257
  testRunner.And("In BLKSCH01 I continue with the following values:", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "BulkType",
                        "BulkTypeDesc",
                        "ClassCode",
                        "TotalCount",
                        "BulkTransUnits",
                        "BulkTransMoney",
                        "RegisterCode",
                        "SettlementDate",
                        "TradeDate",
                        "TradeTime",
                        "IndicativePrice",
                        "FinalPrice",
                        "ActionM"});
            table50.AddRow(new string[] {
                        string.Format("{0}", bulkType),
                        string.Format("{0}", bulkTypeDesc),
                        string.Format("{0}", classCode),
                        string.Format("{0}", totalCount),
                        string.Format("{0}", bulkTransUnits),
                        string.Format("{0}", bulkTransMoney),
                        string.Format("{0}", registerCode),
                        string.Format("{0}", settlementDate),
                        string.Format("{0}", tradeDate),
                        string.Format("{0}", tradeTime),
                        string.Format("{0}", indicativePrice),
                        string.Format("{0}", finalPrice),
                        string.Format("{0}", actionM)});
#line 260
  testRunner.And("In BLKSCH02 I verify the following values:", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "FinalPrice",
                        "UnitsCalc",
                        "CostOFShares",
                        "TotalCost",
                        "ResidueKept",
                        "ResidueRefunded",
                        "PaymentAccount",
                        "BankType",
                        "BankCode",
                        "AccountNumber"});
            table51.AddRow(new string[] {
                        string.Format("{0}", finalPrice),
                        string.Format("{0}", unitsCalc),
                        string.Format("{0}", costOFShares),
                        string.Format("{0}", totalCost),
                        string.Format("{0}", residueKept),
                        string.Format("{0}", residueRefunded),
                        string.Format("{0}", paymentAccount),
                        string.Format("{0}", bankType),
                        string.Format("{0}", bankCode),
                        string.Format("{0}", accountNumber)});
#line 263
  testRunner.And("In BLKSCH03 I verify the following values:", ((string)(null)), table51, "And ");
#line 266
  testRunner.And("I Escape to the Main Menu from Bulk Processing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 268
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 269
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "CertificateLine1",
                        "CertificateLine2",
                        "CertificateLine3",
                        "CertificateLine4",
                        "CertificateLine5",
                        "CertificateLine6",
                        "CertificateLine7",
                        "CertificateLine8",
                        "CertificateLine9",
                        "CertificateLine10"});
            table52.AddRow(new string[] {
                        string.Format("{0}", certificateLine1),
                        string.Format("{0}", certificateLine2),
                        string.Format("{0}", certificateLine3),
                        string.Format("{0}", certificateLine4),
                        string.Format("{0}", certificateLine5),
                        string.Format("{0}", certificateLine6),
                        string.Format("{0}", certificateLine7),
                        string.Format("{0}", certificateLine8),
                        string.Format("{0}", certificateLine9),
                        string.Format("{0}", certificateLine10)});
#line 270
 testRunner.Then("In ENS01012 I should see Register details as:", ((string)(null)), table52, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Options Plan Bulk Purchase EE")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("ESSPurchase")]
        [NUnit.Framework.CategoryAttribute("SmokeTest")]
        [NUnit.Framework.TestCaseAttribute("Test1", "CPU_AUTO", "OPT", "EE", "10B", "INT", "04/06/2010", "ESSUPLOPT.CSV", "F", "N", "Y", "N", "N", "Y", "N", "N", "Y", "N", "N", "N", "Y", "N", "F", "Y", "", "UPL", "", "C", "Bulk Upload Process", "", "A", "I0030024354", "C", "/OPT/10B/EE", "OPT/EMPLOYEE OPTIONS PLAN", "10B 20100604EE   04/06/10          1000", "**** Total for 20100604EE               1000", "", "", "", "", "", "", "", "S", "I0013454361", "10B 20100604EE   04/06/10          2000", "**** Total for 20100604EE               2000", null)]
        public virtual void OptionsPlanBulkPurchaseEE(
                    string test, 
                    string cOY, 
                    string classCode, 
                    string selection, 
                    string registerCode, 
                    string selection1, 
                    string appropDate, 
                    string inputFilename, 
                    string nameSelection, 
                    string pCSelection, 
                    string addressMatching, 
                    string allowBlankAddress, 
                    string updateAddrDetails, 
                    string updateEmpDetails, 
                    string autoGenEmpUnqID, 
                    string clearEmpUnqID, 
                    string updateContactDets, 
                    string uploadTfn, 
                    string updateMandates, 
                    string updateDrp, 
                    string runTrnedt, 
                    string createNewAccounts, 
                    string reportFullTotals, 
                    string autoFtpReportsInd, 
                    string fileName, 
                    string selection2, 
                    string timestamp, 
                    string confirm, 
                    string reportHeading, 
                    string reportDate, 
                    string reportSequence, 
                    string holderID1, 
                    string action, 
                    string locateArgument, 
                    string certificateLine1A, 
                    string certificateLine2A, 
                    string certificateLine3A, 
                    string certificateLine4A, 
                    string certificateLine5A, 
                    string certificateLine6A, 
                    string certificateLine7A, 
                    string certificateLine8A, 
                    string certificateLine9A, 
                    string certificateLine10A, 
                    string action1, 
                    string holderID2, 
                    string certificateLine2B, 
                    string certificateLine3B, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "ESSPurchase",
                    "SmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Options Plan Bulk Purchase EE", @__tags);
#line 281
this.ScenarioSetup(scenarioInfo);
#line 283
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 284
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 285
  testRunner.And(string.Format("I go to the Employee Scheme Processing Menu \"{0}\"", classCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 287
  testRunner.And("In EOL00107 I Click on \"grant options\" Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table53.AddRow(new string[] {
                        string.Format("{0}", selection)});
#line 288
  testRunner.And("In EOL00137 I select the Register Type as:", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "RegisterCode"});
            table54.AddRow(new string[] {
                        string.Format("{0}", registerCode)});
#line 291
  testRunner.And("In EOL00103 I select the RegisterCode as:", ((string)(null)), table54, "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table55.AddRow(new string[] {
                        string.Format("{0}", selection1)});
#line 294
  testRunner.And("In EOL00109 I continue with the following values:", ((string)(null)), table55, "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "AppropDate"});
            table56.AddRow(new string[] {
                        string.Format("{0}", appropDate)});
#line 297
  testRunner.And("In EOL00116 I continue with the following values:", ((string)(null)), table56, "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputFilename",
                        "NameSelection",
                        "PCSelection",
                        "AddressMatching",
                        "AllowBlankAddress",
                        "UpdateAddrDetails",
                        "UpdateEmpDetails",
                        "AutoGenEmpUnqID",
                        "ClearEmpUnqID",
                        "UpdateContactDets",
                        "UploadTfn",
                        "UpdateMandates",
                        "UpdateDrp",
                        "RunTrnedt",
                        "CreateNewAccounts",
                        "ReportFullTotals",
                        "AutoFtpReportsInd"});
            table57.AddRow(new string[] {
                        string.Format("{0}", inputFilename),
                        string.Format("{0}", nameSelection),
                        string.Format("{0}", pCSelection),
                        string.Format("{0}", addressMatching),
                        string.Format("{0}", allowBlankAddress),
                        string.Format("{0}", updateAddrDetails),
                        string.Format("{0}", updateEmpDetails),
                        string.Format("{0}", autoGenEmpUnqID),
                        string.Format("{0}", clearEmpUnqID),
                        string.Format("{0}", updateContactDets),
                        string.Format("{0}", uploadTfn),
                        string.Format("{0}", updateMandates),
                        string.Format("{0}", updateDrp),
                        string.Format("{0}", runTrnedt),
                        string.Format("{0}", createNewAccounts),
                        string.Format("{0}", reportFullTotals),
                        string.Format("{0}", autoFtpReportsInd)});
#line 300
  testRunner.And("In EOL00501 I continue with the following values:", ((string)(null)), table57, "And ");
#line 303
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria"});
            table58.AddRow(new string[] {
                        "completion",
                        "600",
                        "error"});
#line 304
  testRunner.And("In JOBSUB90 I submit the report for VMS and Linux", ((string)(null)), table58, "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "COY",
                        "FileName"});
            table59.AddRow(new string[] {
                        string.Format("{0}", cOY),
                        string.Format("{0}", fileName)});
#line 307
 testRunner.When("I read Timestamps from the Health and Integrity file as:", ((string)(null)), table59, "When ");
#line 310
  testRunner.And("I Escape to the Main Menu from Employee Processing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 311
  testRunner.And(string.Format("I go to the Employee Scheme Processing Menu \"{0}\"", classCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
  testRunner.And("In EOL00107 I Click on \"grant options\" Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table60.AddRow(new string[] {
                        string.Format("{0}", selection)});
#line 313
  testRunner.And("In EOL00137 I select the Register Type as:", ((string)(null)), table60, "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "RegisterCode"});
            table61.AddRow(new string[] {
                        string.Format("{0}", registerCode)});
#line 316
  testRunner.And("In EOL00103 I select the RegisterCode as:", ((string)(null)), table61, "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table62.AddRow(new string[] {
                        string.Format("{0}", selection2)});
#line 320
  testRunner.And("In EOL00109 I continue with the following values:", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "AppropDate"});
            table63.AddRow(new string[] {
                        string.Format("{0}", appropDate)});
#line 323
  testRunner.And("In EOL00116 I continue with the following values:", ((string)(null)), table63, "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "Timestamp",
                        "ReportFullTotals",
                        "AutoFtpReportsInd",
                        "Confirm"});
            table64.AddRow(new string[] {
                        string.Format("{0}", timestamp),
                        string.Format("{0}", reportFullTotals),
                        string.Format("{0}", autoFtpReportsInd),
                        string.Format("{0}", confirm)});
#line 326
  testRunner.And("In EOL00601 I continue with the following values:", ((string)(null)), table64, "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportHeading",
                        "ReportDate",
                        "ReportSequence"});
            table65.AddRow(new string[] {
                        string.Format("{0}", reportHeading),
                        string.Format("{0}", reportDate),
                        string.Format("{0}", reportSequence)});
#line 329
  testRunner.And("In EOL00602 I continue with the following values:", ((string)(null)), table65, "And ");
#line 332
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria"});
            table66.AddRow(new string[] {
                        "completion",
                        "600",
                        "error"});
#line 333
  testRunner.And("In JOBSUB90 I submit the report for VMS and Linux", ((string)(null)), table66, "And ");
#line 336
  testRunner.And("I Escape to the Main Menu from Employee Processing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 338
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", holderID1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 339
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "CertificateLine1",
                        "CertificateLine2",
                        "CertificateLine3",
                        "CertificateLine4",
                        "CertificateLine5",
                        "CertificateLine6",
                        "CertificateLine7",
                        "CertificateLine8",
                        "CertificateLine9",
                        "CertificateLine10"});
            table67.AddRow(new string[] {
                        string.Format("{0}", certificateLine1A),
                        string.Format("{0}", certificateLine2A),
                        string.Format("{0}", certificateLine3A),
                        string.Format("{0}", certificateLine4A),
                        string.Format("{0}", certificateLine5A),
                        string.Format("{0}", certificateLine6A),
                        string.Format("{0}", certificateLine7A),
                        string.Format("{0}", certificateLine8A),
                        string.Format("{0}", certificateLine9A),
                        string.Format("{0}", certificateLine10A)});
#line 340
 testRunner.Then("In ENS01012 I should see Register details as:", ((string)(null)), table67, "Then ");
#line 343
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action1, holderID2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 344
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "CertificateLine1",
                        "CertificateLine2",
                        "CertificateLine3",
                        "CertificateLine4",
                        "CertificateLine5",
                        "CertificateLine6",
                        "CertificateLine7",
                        "CertificateLine8",
                        "CertificateLine9",
                        "CertificateLine10"});
            table68.AddRow(new string[] {
                        string.Format("{0}", certificateLine1A),
                        string.Format("{0}", certificateLine2B),
                        string.Format("{0}", certificateLine3B),
                        string.Format("{0}", certificateLine4A),
                        string.Format("{0}", certificateLine5A),
                        string.Format("{0}", certificateLine6A),
                        string.Format("{0}", certificateLine7A),
                        string.Format("{0}", certificateLine8A),
                        string.Format("{0}", certificateLine9A),
                        string.Format("{0}", certificateLine10A)});
#line 345
 testRunner.Then("In ENS01012 I should see Register details as:", ((string)(null)), table68, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TestCase25506_PAYMV")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTest")]
        [NUnit.Framework.CategoryAttribute("OL_Online")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.TestCaseAttribute("Test1", "PAY", "PAYMV", "42371", "08/04/2016", "INT15", "D", "850902", "5045.41", "I0130398871", "I0130398871", "Holder ID\'s are the same", null)]
        public virtual void TestCase25506_PAYMV(string test, string selection, string selCode, string transNumber, string transDate, string payAccountNumber, string paymentMethod, string payRefNumber, string paymentAmount, string newHolderNameKey, string payOrigHolderIdent, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "SmokeTest",
                    "OL_Online",
                    "FullSmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TestCase25506_PAYMV", @__tags);
#line 358
this.ScenarioSetup(scenarioInfo);
#line 360
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 361
 testRunner.When("In SELCOY01 I select the company: \"WES_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 362
  testRunner.And("In MNS00101 I click on: \"online data entry system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 363
  testRunner.And("In OLS00101 I Click on: \"payment transactions\" with in the online data entry syst" +
                    "em menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selection"});
            table69.AddRow(new string[] {
                        string.Format("{0}", selection)});
#line 364
  testRunner.And("In OLS15001 I continue with the following details:", ((string)(null)), table69, "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelCode"});
            table70.AddRow(new string[] {
                        string.Format("{0}", selCode)});
#line 367
  testRunner.And("In SELTRN20 I continue with the following details:", ((string)(null)), table70, "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransNumber",
                        "TransDate",
                        "PayAccountNumber",
                        "PaymentMethod",
                        "PayRefNumber",
                        "PaymentAmount",
                        "NewHolderNameKey"});
            table71.AddRow(new string[] {
                        string.Format("{0}", transNumber),
                        string.Format("{0}", transDate),
                        string.Format("{0}", payAccountNumber),
                        string.Format("{0}", paymentMethod),
                        string.Format("{0}", payRefNumber),
                        string.Format("{0}", paymentAmount),
                        string.Format("{0}", newHolderNameKey)});
#line 370
  testRunner.And("In OLS10301 I continue with the following details:", ((string)(null)), table71, "And ");
#line 373
 testRunner.Then(string.Format("I should see the below ErrorMessage \"{0}\"", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 30262 OLSCRT CONSOLIDATE CERTIFICATE Transaction")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTest")]
        [NUnit.Framework.CategoryAttribute("OL_STD_StandardTransactions")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.TestCaseAttribute("Test1", "CONSC", "422321", "2550", "ORD", "", "C0000465932", "VIC", "W152444", "W152445", "W152446", "W152447", "W152448", "300", "500", "500", "500", "750", "", "", "", "", "", "", "", "", "H", "/ORD", "*ORD/ORDINARY SHARES         VIC          3300                      3300", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", null)]
        public virtual void TestCase30262OLSCRTCONSOLIDATECERTIFICATETransaction(
                    string test, 
                    string selCode, 
                    string transNumber, 
                    string totalUnits, 
                    string sellClass, 
                    string sellCertID, 
                    string sellHolderID, 
                    string sellReg, 
                    string sellCert1, 
                    string sellCert2, 
                    string sellCert3, 
                    string sellCert4, 
                    string sellCert5, 
                    string sellUnits1, 
                    string sellUnits2, 
                    string sellUnits3, 
                    string sellUnits4, 
                    string sellUnits5, 
                    string transferUnits, 
                    string buyTransDate, 
                    string buyCertID, 
                    string buyInstructions1, 
                    string buyInstructions2, 
                    string buyInstructions3, 
                    string buyInstructions4, 
                    string buyInstructions5, 
                    string action, 
                    string locateArgument, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string sellBroker, 
                    string buyReference, 
                    string buySplitNbr1To51, 
                    string buySplitNbr1To52, 
                    string buySplitUnits1To51, 
                    string buySplitUnits1To52, 
                    string holdBalance, 
                    string markingNumber, 
                    string reissueBal, 
                    string reissTOSellBroker, 
                    string buySplitUnits1To53, 
                    string buySplitNbr1To53, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "SmokeTest",
                    "OL_STD_StandardTransactions",
                    "FullSmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 30262 OLSCRT CONSOLIDATE CERTIFICATE Transaction", @__tags);
#line 383
this.ScenarioSetup(scenarioInfo);
#line 385
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 386
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 387
  testRunner.And("In MNS00101 I click on: \"online data entry system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 388
  testRunner.And("In OLS00101 I Click on: \"standard transactions\" with in the online data entry sys" +
                    "tem menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelCode"});
            table72.AddRow(new string[] {
                        string.Format("{0}", selCode)});
#line 389
  testRunner.And("In SELTRN20 I continue with the following details:", ((string)(null)), table72, "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransNumber",
                        "TotalUnits",
                        "SellClass",
                        "SellCertID",
                        "SellHolderID",
                        "SellReg",
                        "SellBroker"});
            table73.AddRow(new string[] {
                        string.Format("{0}", transNumber),
                        string.Format("{0}", totalUnits),
                        string.Format("{0}", sellClass),
                        string.Format("{0}", sellCertID),
                        string.Format("{0}", sellHolderID),
                        string.Format("{0}", sellReg),
                        string.Format("{0}", sellBroker)});
#line 392
  testRunner.And("IN OLSCRTSC I continue with the following details:", ((string)(null)), table73, "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "SellCert1",
                        "SellCert2",
                        "SellCert3",
                        "SellCert4",
                        "SellCert5",
                        "SellUnits1",
                        "SellUnits2",
                        "SellUnits3",
                        "SellUnits4",
                        "SellUnits5",
                        "BuyReference"});
            table74.AddRow(new string[] {
                        string.Format("{0}", sellCert1),
                        string.Format("{0}", sellCert2),
                        string.Format("{0}", sellCert3),
                        string.Format("{0}", sellCert4),
                        string.Format("{0}", sellCert5),
                        string.Format("{0}", sellUnits1),
                        string.Format("{0}", sellUnits2),
                        string.Format("{0}", sellUnits3),
                        string.Format("{0}", sellUnits4),
                        string.Format("{0}", sellUnits5),
                        string.Format("{0}", buyReference)});
#line 395
  testRunner.And("IN OLSCRTTC I continue with the following details:", ((string)(null)), table74, "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransferUnits",
                        "BuyTransDate",
                        "BuyCertID",
                        "BuyInstructions1",
                        "BuyInstructions2",
                        "BuyInstructions3",
                        "BuyInstructions4",
                        "BuyInstructions5",
                        "BuySplitNbr1to51",
                        "BuySplitNbr1to52",
                        "BuySplitUnits1to51",
                        "BuySplitUnits1to52",
                        "HoldBalance",
                        "MarkingNumber",
                        "ReissueBal",
                        "ReissTOSellBroker",
                        "BuySplitUnits1to53",
                        "BuySplitNbr1to53"});
            table75.AddRow(new string[] {
                        string.Format("{0}", transferUnits),
                        "<BuyTransDate1>",
                        string.Format("{0}", buyCertID),
                        string.Format("{0}", buyInstructions1),
                        string.Format("{0}", buyInstructions2),
                        string.Format("{0}", buyInstructions3),
                        string.Format("{0}", buyInstructions4),
                        string.Format("{0}", buyInstructions5),
                        string.Format("{0}", buySplitNbr1To51),
                        string.Format("{0}", buySplitNbr1To52),
                        string.Format("{0}", buySplitUnits1To51),
                        string.Format("{0}", buySplitUnits1To52),
                        string.Format("{0}", holdBalance),
                        string.Format("{0}", markingNumber),
                        string.Format("{0}", reissueBal),
                        string.Format("{0}", reissTOSellBroker),
                        string.Format("{0}", buySplitUnits1To53),
                        string.Format("{0}", buySplitNbr1To53)});
#line 398
  testRunner.And("IN OLSCRTBF I continue with the following details:", ((string)(null)), table75, "And ");
#line 401
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 402
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 403
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", sellHolderID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 404
  testRunner.And(string.Format("I enter the following details as the Locate action \"{0}\" \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 405
 testRunner.Then(string.Format("In ENS01007 I should see Holdings details as below \"{0}\" \"{1}\" \"{2}\" \"{3}\"", line1, line2, line3, line4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Deferred Real Time Sale SmokeTest")]
        [NUnit.Framework.CategoryAttribute("AESSPlanSales")]
        [NUnit.Framework.CategoryAttribute("TS_TradingSystem")]
        [NUnit.Framework.CategoryAttribute("SmokeTest")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.TestCaseAttribute("SelltoCover", "NAB2_AUTO", "M", "3383", "CLS.GAP", "ORMSAUUAT", "Y", "0.00", "Y", "C", "ESTSC", "ORD", "VIC", "123451234", "I0035312021", "C", "", "W", "", "E", "688.000000", "688.000000", "1", "30.00", "5.000000", "150.00", "", "", "", ".45", "100.00", "10.00", "10.05", "29.50", "N", "RI.W.WI._test@computershare.com", "", "Y", "C", "C", "20/08/2015", "10", "00", "20/08/2015", "688.000000", "5.000000", "150.00", "30.000000", "30.000000", "30.000000", "150.00", "", "110.45", "", "", "10.05", "", "29.50", ".45", "100.00", "10.00", "", "", "", "", "", "", "", "1", "29.50", "", "", "", "", "", "", "110.45", "10.05", "", "", "", "", "", "", "TSSAL", "ATS3", "NDF", "ATS", "1", "688.000000", "", "", "20/08/2015", "20/08/2015", "S", "S", "", "Settled", "30.000000", "1", "688.000000", "29.50", "Y", "Wire", "USD", "5.000000", "Sell to Cover", "S", "SALE", "Settled", "1", "688.000000", "29.50", "20/08/2015", "20/08/2015", "ESSOPT", "1540", "1.000000", "99999999999.000000", "10:00", "ORD", "VIC", "Market", "ATS Sale     ATSR0000003  79269000 20/08/15 Set            5.000000         29.50" +
            "      30.000000", "", "", "", "", "01", "", "20/08/2015", "US DOLLAR", "Wire", "110.45", "10.05", "", "12345678", "TEST AUTOMATION", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "", "", "", "", "", "", "", "", "688.000000", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "683.000000", "Issuer", "I0035312021", "ORD", "ATSR", "688.000000", "7050.50", null)]
        public virtual void DeferredRealTimeSaleSmokeTest(
                    string saleType, 
                    string cOY, 
                    string onMarketTrade, 
                    string brokerCode, 
                    string brokerAccountID, 
                    string connectionCode, 
                    string realTimeTrading, 
                    string topupPercentage, 
                    string sellSelected, 
                    string option, 
                    string tranType, 
                    string @class, 
                    string reg, 
                    string worldLinkNumber, 
                    string searchName, 
                    string sellOption, 
                    string units, 
                    string paymentMethod, 
                    string prefCurrency, 
                    string notificationReqdInd, 
                    string balance, 
                    string availBalance, 
                    string durationType, 
                    string estMarketValue, 
                    string unitsSell, 
                    string marketValue, 
                    string purchResidueAmt, 
                    string federalTaxWithheld, 
                    string loanAmt, 
                    string chargeAmount1, 
                    string chargeAmount2, 
                    string chargeAmount3, 
                    string totalGst, 
                    string estimatedProceeds, 
                    string overrideEmailInd, 
                    string emailAddress, 
                    string confirmUnits, 
                    string confirmWarningFlag5, 
                    string menuSelection, 
                    string confirmStatus, 
                    string tradeDate, 
                    string tradeTimeHH, 
                    string tradeTimeMM, 
                    string settlementDate, 
                    string totalUnits, 
                    string unitsTraded, 
                    string totalCost, 
                    string finalPrice, 
                    string tradePrice, 
                    string priceATAudit, 
                    string grossAmount, 
                    string purchaseResidue, 
                    string holderCharges1, 
                    string loanAmount, 
                    string optionCost, 
                    string gst, 
                    string taxWithheld, 
                    string nettAmount, 
                    string chargeAmount01, 
                    string chargeAmount02, 
                    string chargeAmount03, 
                    string chargeAmount04, 
                    string chargeAmount05, 
                    string chargeAmount06, 
                    string localChqCount, 
                    string localChqNettAmount, 
                    string foreignChqCount, 
                    string foreignChqNettAmt, 
                    string wireCount, 
                    string wireNettAmount, 
                    string directBankingCount, 
                    string directBankNettAmt, 
                    string employerCount, 
                    string employerNettAmount, 
                    string companyCharges, 
                    string companyTax, 
                    string holderCharges, 
                    string holderTax, 
                    string reportCharges, 
                    string reportTax, 
                    string paymentAccount, 
                    string bankType, 
                    string branchNumber, 
                    string accountNumber, 
                    string paymentAccount1, 
                    string orderNO, 
                    string ident, 
                    string classCode, 
                    string nbrTrades, 
                    string tradeGrossAmount, 
                    string tradeFrom, 
                    string tradeTO, 
                    string settlementFrom, 
                    string settlementTO, 
                    string menuSelection1, 
                    string confirmStatus1, 
                    string tradingID, 
                    string status, 
                    string price, 
                    string transCount, 
                    string transTotal, 
                    string moneyTotal, 
                    string applyTaxInd, 
                    string paymentMethodDesc, 
                    string currency, 
                    string sellUnits, 
                    string orderType, 
                    string bulkType, 
                    string bulkTypeDesc, 
                    string statusDesc, 
                    string totalCount, 
                    string orderTransUnits, 
                    string totalMoney, 
                    string reqdSettlementDate, 
                    string actualSettlementDate, 
                    string reconciliationCode, 
                    string cshtrnReference, 
                    string minimumDeal, 
                    string maximumDeal, 
                    string cutOffTime, 
                    string counterpartyClass, 
                    string counterRegisterCode, 
                    string orderType1, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string action, 
                    string locateArgument, 
                    string paymentDate, 
                    string currencyDesc, 
                    string paymentMethod1, 
                    string totalCharges, 
                    string gstTaxTotal, 
                    string bankCode, 
                    string payeeAccountNumber, 
                    string accountName, 
                    string cover01, 
                    string cover02, 
                    string cover03, 
                    string cover04, 
                    string cover05, 
                    string cover06, 
                    string cover07, 
                    string cover08, 
                    string cover09, 
                    string cover10, 
                    string cover11, 
                    string cover12, 
                    string cover13, 
                    string cover14, 
                    string cover15, 
                    string units1, 
                    string sellAll01, 
                    string units01, 
                    string sellAll02, 
                    string units02, 
                    string sellAll03, 
                    string units03, 
                    string sellAll04, 
                    string units04, 
                    string sellAll05, 
                    string units05, 
                    string sellAll06, 
                    string units06, 
                    string sellAll07, 
                    string units07, 
                    string sellAll08, 
                    string units08, 
                    string sellAll09, 
                    string units09, 
                    string remainingBalance, 
                    string remBalIndDesc, 
                    string transfereeHolder, 
                    string transfereeClass, 
                    string tradeControlCode, 
                    string tradeUnits, 
                    string transMoney, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AESSPlanSales",
                    "TS_TradingSystem",
                    "SmokeTest",
                    "FullSmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deferred Real Time Sale SmokeTest", @__tags);
#line 415
this.ScenarioSetup(scenarioInfo);
#line 416
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 417
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 420
  testRunner.And("I go to \"Trading Control Codes\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 421
  testRunner.And(string.Format("In TRD24000 I select the Trade Control Code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 422
  testRunner.And(string.Format("In TRD24001 I perform a Change for On Market Trade \"{0}\", \"{1}\", \"{2}\", \"{3}\", \"{" +
                        "4}\" and Top Up \"{5}\", \"{6}\" and Remaining Balance Options \"{7}\", \"{8}\", \"{9}\", \"" +
                        "{10}\" and World Link Number \"{11}\"", onMarketTrade, brokerCode, brokerAccountID, connectionCode, realTimeTrading, topupPercentage, sellSelected, option, tranType, @class, reg, worldLinkNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 423
  testRunner.And(string.Format("I go to the Trading system Sales and trade control code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 424
  testRunner.And(string.Format("In TRS00501 I Add Postal Transaction Entry details as \"{0}\"", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 425
  testRunner.And(string.Format("In TRS00502 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\"", sellOption, units, paymentMethod, prefCurrency, notificationReqdInd, balance, availBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 426
  testRunner.And(string.Format("In TRS00507 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}" +
                        "\" \"{17}\"", sellAll01, units01, sellAll02, units02, sellAll03, units03, sellAll04, units04, sellAll05, units05, sellAll06, units06, sellAll07, units07, sellAll08, units08, sellAll09, units09), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 427
  testRunner.And(string.Format("In TRS00511 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", durationType, estMarketValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 428
  testRunner.And(string.Format("In TRS00513 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\"", cover01, cover02, cover03, cover04, cover05, cover06, cover07, cover08, cover09, cover10, cover11, cover12, cover13, cover14, cover15), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 429
  testRunner.And(string.Format("In TRS00504 I Verify Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" " +
                        "\"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\"", unitsSell, estMarketValue, marketValue, purchResidueAmt, federalTaxWithheld, loanAmt, chargeAmount1, chargeAmount2, chargeAmount3, totalGst, estimatedProceeds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 430
  testRunner.And(string.Format("In TRS00512 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", overrideEmailInd, emailAddress), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 431
  testRunner.And(string.Format("In TRS00503 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", confirmUnits, confirmWarningFlag5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 432
  testRunner.And(string.Format("In TRD00401 I Change Order Status to \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\"", menuSelection, confirmStatus, tradeDate, tradeTimeHH, tradeTimeMM, settlementDate, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 433
 testRunner.Then(string.Format("In TRD004CS I Verify Change Order Status details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", unitsTraded, totalCost, finalPrice, tradePrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 434
  testRunner.And(string.Format("In TRD004CS I Verify Change Order Status details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 435
 testRunner.When(string.Format("In TRD00101 I Run the Generate Output Job as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" " +
                        "\"{6}\" \"{7}\" \"{8}\" \"{9}\"", paymentAccount1, orderNO, ident, classCode, nbrTrades, tradeGrossAmount, tradeFrom, tradeTO, settlementFrom, settlementTO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX"});
            table76.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT"});
#line 436
  testRunner.And("I wait for  GenerateOutput job to complete", ((string)(null)), table76, "And ");
#line 439
  testRunner.And(string.Format("In TRD00401 I Force Settle the Order as \"{0}\" \"{1}\"", menuSelection1, confirmStatus1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 440
 testRunner.Then(string.Format("In TRS01010 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\"", tradingID, status, price, classCode, transCount, transTotal, moneyTotal, settlementDate, applyTaxInd, paymentMethod, paymentMethodDesc, currency, sellUnits, orderType, tradeUnits, transMoney), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 441
  testRunner.And(string.Format("In TRDSCH02 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" " +
                        "\"{17}\" \"{18}\"", tradingID, bulkType, bulkTypeDesc, statusDesc, totalCount, orderTransUnits, totalMoney, tradeDate, reqdSettlementDate, actualSettlementDate, finalPrice, reconciliationCode, cshtrnReference, minimumDeal, maximumDeal, cutOffTime, counterpartyClass, counterRegisterCode, orderType1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 442
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\"", unitsTraded, totalCost, finalPrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 443
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 444
  testRunner.And("I go the Main Menu From Trading System", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 446
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 447
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table77.AddRow(new string[] {
                        "Action",
                        "TH"});
            table77.AddRow(new string[] {
                        "Locate Argument",
                        "/ATS"});
#line 448
  testRunner.And("I enter the following details as the Locate action:", ((string)(null)), table77, "And ");
#line 452
 testRunner.Then(string.Format("In ENSTRD48 I should see trading history summary as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        "", line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 453
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 454
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", units1, unitsSell, finalPrice, grossAmount, purchaseResidue, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06, paymentDate, paymentAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 455
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", prefCurrency, currencyDesc, paymentMethod1, holderCharges, holderTax, companyCharges, companyTax, reportCharges, reportTax, totalCharges, gstTaxTotal, bankCode, payeeAccountNumber, accountName, remainingBalance, remBalIndDesc, transfereeHolder, transfereeClass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ESS_Employee_Extract_Report_SmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTest")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.CategoryAttribute("ReportingGold")]
        [NUnit.Framework.CategoryAttribute("ReportSmokeTest")]
        [NUnit.Framework.TestCaseAttribute("Test1", "N", "", "", "", "", "", "Y", "N", "Y", "N", "Y", "N", "", "", "", "", "", "", "", "", "", "", "99999999999", "N", "N", "N", "N", "N", "S", ",", "Y", "", "A", "", "", "", "", "", "", "CPU_AUTO_R", null)]
        public virtual void ESS_Employee_Extract_Report_SmokeTest(
                    string reportHeading, 
                    string preload, 
                    string wildString, 
                    string empStatus1, 
                    string empStatus2, 
                    string leaverCode1, 
                    string leaverCode2, 
                    string holderIdentifier, 
                    string staticDetails, 
                    string extraIdentifier, 
                    string homePhone, 
                    string emailAddress, 
                    string holderStatus, 
                    string deceasedFlag, 
                    string exceptionFlag, 
                    string stopTradeFlag, 
                    string divIntentionFlag, 
                    string selcls1, 
                    string selcls2, 
                    string selgrp1, 
                    string selgrp2, 
                    string exd1, 
                    string unitBalanceFrom, 
                    string unitBalanceTO, 
                    string holderTotalsOnly, 
                    string classCode, 
                    string registerCode, 
                    string registerType, 
                    string awardDate, 
                    string select, 
                    string fieldSeparator, 
                    string textDelimiterReq, 
                    string reportDate, 
                    string reportSeq, 
                    string selgrp3, 
                    string selgrp4, 
                    string selgrp5, 
                    string selgrp6, 
                    string transDateFrom, 
                    string transDateTO, 
                    string company, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SmokeTest",
                    "FullSmokeTest",
                    "ReportingGold",
                    "ReportSmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESS_Employee_Extract_Report_SmokeTest", @__tags);
#line 464
this.ScenarioSetup(scenarioInfo);
#line 465
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 466
 testRunner.When(string.Format("In SELCOY01 I select the company: \"{0}\"", company), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 467
  testRunner.And("In MNS00101 I click on: \"reporting system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 468
  testRunner.And("In RSS00101 I click on: \"ess reporting\" within the Reporting System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 469
  testRunner.And("In ERS00100 I click on: \"employee extract report\" within the ESS Reporting Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Preload",
                        "WildString"});
            table78.AddRow(new string[] {
                        string.Format("{0}", preload),
                        string.Format("{0}", wildString)});
#line 470
  testRunner.And("In ERS01001 I continue with the following details:", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "EmpStatus1",
                        "EmpStatus2",
                        "LeaverCode1",
                        "LeaverCode2"});
            table79.AddRow(new string[] {
                        string.Format("{0}", empStatus1),
                        string.Format("{0}", empStatus2),
                        string.Format("{0}", leaverCode1),
                        string.Format("{0}", leaverCode2)});
#line 473
  testRunner.And("In ERS01002 I continue with the following details:", ((string)(null)), table79, "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "HolderIdentifier"});
            table80.AddRow(new string[] {
                        string.Format("{0}", holderIdentifier)});
#line 476
  testRunner.And("In ERS01010 I continue with the following details:", ((string)(null)), table80, "And ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "StaticDetails"});
            table81.AddRow(new string[] {
                        string.Format("{0}", staticDetails)});
#line 479
  testRunner.And("In ERS01011 I continue with the following details:", ((string)(null)), table81, "And ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "ExtraIdentifier",
                        "HomePhone",
                        "EmailAddress"});
            table82.AddRow(new string[] {
                        string.Format("{0}", extraIdentifier),
                        string.Format("{0}", homePhone),
                        string.Format("{0}", emailAddress)});
#line 482
  testRunner.And("In ERS01012 I continue with the following details:", ((string)(null)), table82, "And ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "HolderStatus",
                        "DeceasedFlag",
                        "ExceptionFlag",
                        "StopTradeFlag",
                        "DivIntentionFlag"});
            table83.AddRow(new string[] {
                        string.Format("{0}", holderStatus),
                        string.Format("{0}", deceasedFlag),
                        string.Format("{0}", exceptionFlag),
                        string.Format("{0}", stopTradeFlag),
                        string.Format("{0}", divIntentionFlag)});
#line 485
  testRunner.And("In ERS01028 I continue with the following details:", ((string)(null)), table83, "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selcls1",
                        "Selcls2",
                        "Selgrp1",
                        "Selgrp2",
                        "Exd1",
                        "UnitBalanceFrom",
                        "UnitBalanceTO",
                        "HolderTotalsOnly",
                        "Selgrp3",
                        "Selgrp4",
                        "Selgrp5",
                        "Selgrp6",
                        "TransDateFrom",
                        "TransDateTO"});
            table84.AddRow(new string[] {
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2),
                        string.Format("{0}", selgrp1),
                        string.Format("{0}", selgrp2),
                        string.Format("{0}", exd1),
                        string.Format("{0}", unitBalanceFrom),
                        string.Format("{0}", unitBalanceTO),
                        string.Format("{0}", holderTotalsOnly),
                        string.Format("{0}", selgrp3),
                        string.Format("{0}", selgrp4),
                        string.Format("{0}", selgrp5),
                        string.Format("{0}", selgrp6),
                        string.Format("{0}", transDateFrom),
                        string.Format("{0}", transDateTO)});
#line 488
  testRunner.And("In ERS01013 I continue with the following details:", ((string)(null)), table84, "And ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCode",
                        "RegisterCode",
                        "RegisterType",
                        "AwardDate"});
            table85.AddRow(new string[] {
                        string.Format("{0}", classCode),
                        string.Format("{0}", registerCode),
                        string.Format("{0}", registerType),
                        string.Format("{0}", awardDate)});
#line 491
  testRunner.And("In ERS01016 I continue with the following details:", ((string)(null)), table85, "And ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "Select",
                        "FieldSeparator",
                        "TextDelimiterReq"});
            table86.AddRow(new string[] {
                        string.Format("{0}", select),
                        string.Format("{0}", fieldSeparator),
                        string.Format("{0}", textDelimiterReq)});
#line 494
  testRunner.And("In ERS01017 I continue with the following details:", ((string)(null)), table86, "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportDate",
                        "ReportSeq"});
            table87.AddRow(new string[] {
                        string.Format("{0}", reportDate),
                        string.Format("{0}", reportSeq)});
#line 497
  testRunner.And("In ERS01003 I continue with the following details:", ((string)(null)), table87, "And ");
#line 500
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria"});
            table88.AddRow(new string[] {
                        "completion",
                        "600",
                        "error"});
#line 501
  testRunner.And("In JOBSUB90 I submit the report for VMS and Linux", ((string)(null)), table88, "And ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportHeading",
                        "FileName"});
            table89.AddRow(new string[] {
                        string.Format("{0}", reportHeading),
                        ""});
#line 504
  testRunner.Then("I copy output files to local", ((string)(null)), table89, "Then ");
#line 507
  testRunner.And("I parse the files from VMS or Linux", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 508
  testRunner.And("I compare the files from VMS and Linux goldcopy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
