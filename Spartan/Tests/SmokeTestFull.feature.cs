// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SCRIPAU.Automation.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SmokeTestFull")]
    public partial class SmokeTestFullFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SmokeTestFull.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SmokeTestFull", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Top_Holders_Report_SmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTestTemp")]
        [NUnit.Framework.CategoryAttribute("ReportGoldcopyOther")]
        [NUnit.Framework.CategoryAttribute("ReportingGold")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTestReports")]
        public virtual void Top_Holders_Report_SmokeTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Top_Holders_Report_SmokeTest", new string[] {
                        "SmokeTestTemp",
                        "ReportGoldcopyOther",
                        "ReportingGold",
                        "FullSmokeTest",
                        "SmokeTestReports"});
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.And("In SELCOY01 I select the company: \"CPU_AUTO_R\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("In MNS00101 I click on: \"reporting system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("In RSS00101 I click on: \"top holders list\" within the Reporting System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportDate",
                        "ASATRun"});
            table1.AddRow(new string[] {
                        "20/07/2015",
                        "5190"});
#line 16
 testRunner.And("In RSS02010 I continue with the following details:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Cls1",
                        "Cls2",
                        "Cls3",
                        "Cls4",
                        "Cls5",
                        "Cls6",
                        "Cls7",
                        "Cls8",
                        "Cls9",
                        "Cls10",
                        "ClgCon",
                        "GroupIDX",
                        "TopSHLimit",
                        "ReportType",
                        "ReportRun1",
                        "ReportRun1",
                        "UseGroupCodes",
                        "PrintGrpDetails",
                        "HolderIDTOPrint",
                        "NameAddressTOPrint",
                        "HtcFlag",
                        "HT",
                        "SystemInfoFree6",
                        "SystemInfoFree4",
                        "SystemInfoFree7",
                        "SystemInfoFree5"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "100",
                        "S",
                        "",
                        "",
                        "Y",
                        "",
                        "Y",
                        "F",
                        "A",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 19
 testRunner.And("In RSS02020 I continue with the following details:", ((string)(null)), table2, "And ");
#line 22
 testRunner.When("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria"});
            table3.AddRow(new string[] {
                        "completion",
                        "300",
                        "error"});
#line 23
  testRunner.And("In JOBSUB90 I submit the report for VMS and Linux", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportHeading",
                        "FileName"});
            table4.AddRow(new string[] {
                        "Filtered",
                        ""});
#line 26
  testRunner.Then("I copy output files to local", ((string)(null)), table4, "Then ");
#line 29
  testRunner.And("I parse the files from VMS or Linux", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
  testRunner.And("I compare the files from VMS and Linux goldcopy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Significant_Trade_Report_SmokeTest")]
        [NUnit.Framework.CategoryAttribute("SignificantTradeReport_Gold")]
        [NUnit.Framework.CategoryAttribute("ReportGoldcopyOther")]
        [NUnit.Framework.CategoryAttribute("ReportingGold")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTestTemp")]
        [NUnit.Framework.CategoryAttribute("SmokeTestTemp")]
        public virtual void Significant_Trade_Report_SmokeTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Significant_Trade_Report_SmokeTest", new string[] {
                        "SignificantTradeReport_Gold",
                        "ReportGoldcopyOther",
                        "ReportingGold",
                        "FullSmokeTest",
                        "SmokeTestTemp",
                        "SmokeTestTemp"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.And("In SELCOY01 I select the company: \"CPU_AUTO_R\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("In MNS00101 I click on: \"reporting system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("In RSS00101 I click on: \"shareholder movement reporting\" within the Reporting Sys" +
                    "tem Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("In RSS18010 I click on: \"significant trade report\" within the Shareholder Movemen" +
                    "t Reporting Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "PreloadDefaults"});
            table5.AddRow(new string[] {
                        "N"});
#line 45
 testRunner.And("In RSS18000 I continue with the following details:", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportHeading",
                        "Cls1",
                        "Cls2",
                        "Cls3",
                        "NadTOPrint",
                        "MovementLevel",
                        "HolderLimit",
                        "ReportType"});
            table6.AddRow(new string[] {
                        "Significant Trade Report",
                        "DEP",
                        "EXA",
                        "",
                        "N",
                        "150",
                        "100",
                        "D"});
#line 48
 testRunner.And("In RSS18001 I continue with the following details:", ((string)(null)), table6, "And ");
#line 51
 testRunner.When("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria"});
            table7.AddRow(new string[] {
                        "completion",
                        "300",
                        "error"});
#line 52
  testRunner.And("In JOBSUB90 I submit the report for VMS and Linux", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportHeading",
                        "FileName"});
            table8.AddRow(new string[] {
                        "Filtered",
                        ""});
#line 55
  testRunner.Then("I copy output files to local", ((string)(null)), table8, "Then ");
#line 58
  testRunner.And("I parse the files from VMS or Linux", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
  testRunner.And("I compare the files from VMS and Linux goldcopy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ESS_Purchase_Reconciliation_Report_SmokeTest")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTestReportsESSPurchaseRecon")]
        [NUnit.Framework.CategoryAttribute("ReportingGold")]
        [NUnit.Framework.CategoryAttribute("SmokeTestReports")]
        [NUnit.Framework.CategoryAttribute("SmokeTestTemp")]
        [NUnit.Framework.TestCaseAttribute("Test4", "N", "", "", "", "", "", "Y", "N", "Y", "N", "Y", "N", "", "", "", "", "", "", "11A", "", "EP", "", "01/01/2010", "01/01/2015", "S", "B", "Y", "Y", "Y", "Y", "Y", "Y", "Y", "N", "", "A", "3", "7", null)]
        public virtual void ESS_Purchase_Reconciliation_Report_SmokeTest(
                    string reportHeading, 
                    string preload, 
                    string wildString, 
                    string empStatus1, 
                    string empStatus2, 
                    string leaverCode1, 
                    string leaverCode2, 
                    string holderIdentifier, 
                    string staticDetails, 
                    string extraIdentifier, 
                    string homePhone, 
                    string emailAddress, 
                    string holderStatus, 
                    string deceasedFlag, 
                    string exceptionFlag, 
                    string stopTradeFlag, 
                    string divIntentionFlag, 
                    string selcls1, 
                    string selcls2, 
                    string selreg1, 
                    string selreg2, 
                    string regType1, 
                    string regType2, 
                    string dateFrom, 
                    string dateTO, 
                    string summaryDetailInd, 
                    string contributionTypeInd, 
                    string contractedSvgsInd, 
                    string svgsContribDiffInd, 
                    string dispResidualsInd, 
                    string dispUnitBalanceInd, 
                    string dispSharePriceInd, 
                    string dispShareCostInd, 
                    string dispUnitsAllocInd, 
                    string ers01004RecContribDetsInd, 
                    string reportDate, 
                    string reportSeq, 
                    string selGrp1, 
                    string selGrp2, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "FullSmokeTest",
                    "SmokeTestReportsESSPurchaseRecon",
                    "ReportingGold",
                    "SmokeTestReports",
                    "SmokeTestTemp"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESS_Purchase_Reconciliation_Report_SmokeTest", @__tags);
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
 testRunner.When("In SELCOY01 I select the company: \"CPU_AUTO_R\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
  testRunner.And("In MNS00101 I click on: \"reporting system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
  testRunner.And("In RSS00101 I click on: \"ess reporting\" within the Reporting System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
  testRunner.And("In ERS00100 I click on: \"purchase reconciliation report\" within the ESS Reporting" +
                    " Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Preload",
                        "WildString"});
            table9.AddRow(new string[] {
                        string.Format("{0}", preload),
                        string.Format("{0}", wildString)});
#line 72
  testRunner.And("In ERS01001 I continue with the following details:", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "EmpStatus1",
                        "EmpStatus2",
                        "LeaverCode1",
                        "LeaverCode2"});
            table10.AddRow(new string[] {
                        string.Format("{0}", empStatus1),
                        string.Format("{0}", empStatus2),
                        string.Format("{0}", leaverCode1),
                        string.Format("{0}", leaverCode2)});
#line 75
  testRunner.And("In ERS01002 I continue with the following details:", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "HolderIdentifier"});
            table11.AddRow(new string[] {
                        string.Format("{0}", holderIdentifier)});
#line 78
  testRunner.And("In ERS01010 I continue with the following details:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "StaticDetails"});
            table12.AddRow(new string[] {
                        string.Format("{0}", staticDetails)});
#line 81
  testRunner.And("In ERS01011 I continue with the following details:", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ExtraIdentifier",
                        "HomePhone",
                        "EmailAddress"});
            table13.AddRow(new string[] {
                        string.Format("{0}", extraIdentifier),
                        string.Format("{0}", homePhone),
                        string.Format("{0}", emailAddress)});
#line 84
  testRunner.And("In ERS01012 I continue with the following details:", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "HolderStatus",
                        "DeceasedFlag",
                        "ExceptionFlag",
                        "StopTradeFlag",
                        "DivIntentionFlag"});
            table14.AddRow(new string[] {
                        string.Format("{0}", holderStatus),
                        string.Format("{0}", deceasedFlag),
                        string.Format("{0}", exceptionFlag),
                        string.Format("{0}", stopTradeFlag),
                        string.Format("{0}", divIntentionFlag)});
#line 87
  testRunner.And("In ERS01028 I continue with the following details:", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Selcls1",
                        "Selcls2",
                        "Selreg1",
                        "Selreg2",
                        "RegType1",
                        "RegType2",
                        "DateFrom",
                        "DateTO",
                        "SummaryDetailInd",
                        "ContributionTypeInd",
                        "ContractedSvgsInd",
                        "SvgsContribDiffInd",
                        "DispResidualsInd",
                        "DispUnitBalanceInd",
                        "DispSharePriceInd",
                        "DispShareCostInd",
                        "DispUnitsAllocInd",
                        "Ers01004RecContribDetsInd",
                        "SelGrp1",
                        "SelGrp2"});
            table15.AddRow(new string[] {
                        string.Format("{0}", selcls1),
                        string.Format("{0}", selcls2),
                        string.Format("{0}", selreg1),
                        string.Format("{0}", selreg2),
                        string.Format("{0}", regType1),
                        string.Format("{0}", regType2),
                        string.Format("{0}", dateFrom),
                        string.Format("{0}", dateTO),
                        string.Format("{0}", summaryDetailInd),
                        string.Format("{0}", contributionTypeInd),
                        string.Format("{0}", contractedSvgsInd),
                        string.Format("{0}", svgsContribDiffInd),
                        string.Format("{0}", dispResidualsInd),
                        string.Format("{0}", dispUnitBalanceInd),
                        string.Format("{0}", dispSharePriceInd),
                        string.Format("{0}", dispShareCostInd),
                        string.Format("{0}", dispUnitsAllocInd),
                        string.Format("{0}", ers01004RecContribDetsInd),
                        string.Format("{0}", selGrp1),
                        string.Format("{0}", selGrp2)});
#line 90
  testRunner.And("In ERS01004 I continue with the following details:", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportDate",
                        "ReportSeq"});
            table16.AddRow(new string[] {
                        string.Format("{0}", reportDate),
                        string.Format("{0}", reportSeq)});
#line 93
  testRunner.And("In ERS01003 I continue with the following details:", ((string)(null)), table16, "And ");
#line 96
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria"});
            table17.AddRow(new string[] {
                        "completion",
                        "300",
                        "error"});
#line 97
  testRunner.And("In JOBSUB90 I submit the report for VMS and Linux", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportHeading",
                        "FileName"});
            table18.AddRow(new string[] {
                        string.Format("{0}", reportHeading),
                        ""});
#line 100
  testRunner.Then("I copy output files to local", ((string)(null)), table18, "Then ");
#line 103
  testRunner.And("I parse the files from VMS or Linux", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
  testRunner.And("I compare the files from VMS and Linux goldcopy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ESS_Employee_Option_Plan_Statement_SmokeTest")]
        [NUnit.Framework.CategoryAttribute("ReportGoldcopyESS")]
        [NUnit.Framework.CategoryAttribute("ESSEmployeeOptionPlanStatement_Gold")]
        [NUnit.Framework.CategoryAttribute("CPU_AUTO_R")]
        [NUnit.Framework.CategoryAttribute("ReportingGold")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTestReports")]
        [NUnit.Framework.CategoryAttribute("SmokeTestTemp")]
        [NUnit.Framework.TestCaseAttribute("Test6", "N", "", "", "", "", "", "", "", "2", "", "", "", "G", "4405", "", "", "", "10", "01/01/2014", "01/07/2013", "30/06/2014", "Y", "", "A", "", null)]
        public virtual void ESS_Employee_Option_Plan_Statement_SmokeTest(
                    string reportHeading, 
                    string preload, 
                    string wildString, 
                    string empStatus1, 
                    string empStatus2, 
                    string leaverCode1, 
                    string leaverCode2, 
                    string class1, 
                    string class2, 
                    string selgrp1, 
                    string selgrp2, 
                    string reg1, 
                    string reg2, 
                    string statementType, 
                    string runRangeTO, 
                    string statementRunFrom, 
                    string transDateFrom, 
                    string transDateTO, 
                    string marketValuePrice, 
                    string marketValueDate, 
                    string stmtDsplayDateFrom, 
                    string stmtDsplayDateTO, 
                    string nilHoldingsInd, 
                    string reportDate, 
                    string reportSeq, 
                    string confirm, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ReportGoldcopyESS",
                    "ESSEmployeeOptionPlanStatement_Gold",
                    "CPU_AUTO_R",
                    "ReportingGold",
                    "FullSmokeTest",
                    "SmokeTestReports",
                    "SmokeTestTemp"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ESS_Employee_Option_Plan_Statement_SmokeTest", @__tags);
#line 118
this.ScenarioSetup(scenarioInfo);
#line 120
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 121
 testRunner.When("In SELCOY01 I select the company: \"CPU_AUTO_R\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 122
  testRunner.And("In MNS00101 I click on: \"reporting system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
  testRunner.And("In RSS00101 I click on: \"ess reporting\" within the Reporting System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
  testRunner.And("In ERS00100 I click on: \"employee option plan statement\" within the ESS Reporting" +
                    " Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Preload",
                        "WildString"});
            table19.AddRow(new string[] {
                        string.Format("{0}", preload),
                        string.Format("{0}", wildString)});
#line 125
  testRunner.And("In ERS01001 I continue with the following details:", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "EmpStatus1",
                        "EmpStatus2",
                        "LeaverCode1",
                        "LeaverCode2"});
            table20.AddRow(new string[] {
                        string.Format("{0}", empStatus1),
                        string.Format("{0}", empStatus2),
                        string.Format("{0}", leaverCode1),
                        string.Format("{0}", leaverCode2)});
#line 128
  testRunner.And("In ERS01002 I continue with the following details:", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Class1",
                        "Class2",
                        "Selgrp1",
                        "Selgrp2",
                        "Reg1",
                        "Reg2",
                        "StatementType",
                        "RunRangeTO",
                        "StatementRunFrom",
                        "TransDateFrom",
                        "TransDateTO",
                        "MarketValuePrice",
                        "MarketValueDate",
                        "StmtDsplayDateFrom",
                        "StmtDsplayDateTO",
                        "NilHoldingsInd"});
            table21.AddRow(new string[] {
                        string.Format("{0}", class1),
                        string.Format("{0}", class2),
                        string.Format("{0}", selgrp1),
                        string.Format("{0}", selgrp2),
                        string.Format("{0}", reg1),
                        string.Format("{0}", reg2),
                        string.Format("{0}", statementType),
                        string.Format("{0}", runRangeTO),
                        string.Format("{0}", statementRunFrom),
                        string.Format("{0}", transDateFrom),
                        string.Format("{0}", transDateTO),
                        string.Format("{0}", marketValuePrice),
                        string.Format("{0}", marketValueDate),
                        string.Format("{0}", stmtDsplayDateFrom),
                        string.Format("{0}", stmtDsplayDateTO),
                        string.Format("{0}", nilHoldingsInd)});
#line 131
  testRunner.And("In ERS01043 I continue with the following details:", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Confirm"});
            table22.AddRow(new string[] {
                        string.Format("{0}", confirm)});
#line 134
  testRunner.And("In ERS01044 I continue with the following details:", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportDate",
                        "ReportSeq"});
            table23.AddRow(new string[] {
                        string.Format("{0}", reportDate),
                        string.Format("{0}", reportSeq)});
#line 137
  testRunner.And("In ERS01003 I continue with the following details:", ((string)(null)), table23, "And ");
#line 140
  testRunner.And("I continue to the report submit page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria"});
            table24.AddRow(new string[] {
                        "completion",
                        "600",
                        "error"});
#line 141
  testRunner.And("In JOBSUB90 I submit the report for VMS and Linux", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "ReportHeading",
                        "FileName"});
            table25.AddRow(new string[] {
                        string.Format("{0}", reportHeading),
                        ""});
#line 144
  testRunner.Then("I copy output files to local", ((string)(null)), table25, "Then ");
#line 147
  testRunner.And("I parse the files from VMS or Linux", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
  testRunner.And("I compare the files from VMS and Linux goldcopy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Options Real Time Sale SmokeTest")]
        [NUnit.Framework.CategoryAttribute("TS_TradingSystem")]
        [NUnit.Framework.CategoryAttribute("OptionsPlanSales")]
        [NUnit.Framework.CategoryAttribute("30522")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTestTradingOptionsdReal")]
        [NUnit.Framework.TestCaseAttribute("ExerciseSelected_Test3", "NAB2_AUTO", "N", "M", "3383", "CLS.GAP", "ORMSAUUAT", "Y", "0.00", "", "C", "ESOXR", "ORD", "VIC", "123451234", "", "I0036534591", "", "699", "", "", "", "", "", "", "", "", "", "", "A", "", "E", "", "N", "4000.000000", "4000.000000", "1", "30.00", "699.000000", "699.000000", "20970.00", "", "", "13281.00", "", "62.91", "100.00", "", "16.29", "7509.80", "", "", "C", "C", "20/08/2015", "10", "00", "20/08/2015", "699.000000", "699.000000", "20970.00", "30.000000", "30.000000", "30.000000", "20970.00", "", "162.91", "", "16.29", "", "7509.80", "62.91", "100.00", "", "", "", "", "", "", "", "", "", "", "", "", "1", "7509.80", "", "", "162.91", "16.29", "", "", "", "", "", "", "TSSAL", "OPT3", "NDF", "OPT", "1", "699.000000", "", "", "20/08/2015", "20/08/2015", "S", "S", "", "Settled", "30.000000", "1", "699.000000", "7509.80", "Y", "Employer", "AUD", "699.000000", "Sell Specific", "S", "SALE", "Settled", "1", "699.000000", "7509.80", "20/08/2015", "20/08/2015", "ESSOPT", "", "1.000000", "99999999999.000000", "10:00", "ORD", "VIC", "Market", "", "", "", "", "", "01", "", "20/08/2015", "AUSTRALIAN DOLLAR", "Employer", "162.91", "16.29", "R", "R", "TH", "/OPT", "", "", "", "", "", "", "", "ROPT", "699.000000", "7509.80", null)]
        public virtual void OptionsRealTimeSaleSmokeTest(
                    string exerciseType, 
                    string cOY, 
                    string multi_Cert, 
                    string onMarketTrade, 
                    string brokerCode, 
                    string brokerAccountID, 
                    string connectionCode, 
                    string realTimeTrading, 
                    string topupPercentage, 
                    string sellSelected, 
                    string option, 
                    string tranType, 
                    string @class, 
                    string reg, 
                    string worldLinkNumber, 
                    string transNumber, 
                    string searchName, 
                    string sellAll01, 
                    string exerciseUnits01, 
                    string units01, 
                    string sellAll02, 
                    string exerciseUnits02, 
                    string units02, 
                    string sellAll03, 
                    string exerciseUnits03, 
                    string units03, 
                    string sellAll04, 
                    string exerciseUnits04, 
                    string units04, 
                    string sellOption, 
                    string remainingBalInd, 
                    string paymentMethod, 
                    string prefCurrency, 
                    string notificationReqdInd, 
                    string balance, 
                    string availBalance, 
                    string durationType, 
                    string estMarketValue, 
                    string unitsExercise, 
                    string unitsSell, 
                    string marketValue, 
                    string purchResidueAmt, 
                    string federalTaxWithheld, 
                    string optionCost, 
                    string loanAmt, 
                    string chargeAmount1, 
                    string chargeAmount2, 
                    string chargeAmount3, 
                    string totalGst, 
                    string estimatedProceeds, 
                    string confirmUnits, 
                    string confirmWarningFlag5, 
                    string menuSelection, 
                    string confirmStatus, 
                    string tradeDate, 
                    string tradeTimeHH, 
                    string tradeTimeMM, 
                    string settlementDate, 
                    string totalUnits, 
                    string unitsTraded, 
                    string totalCost, 
                    string finalPrice, 
                    string tradePrice, 
                    string priceATAudit, 
                    string grossAmount, 
                    string purchaseResidue, 
                    string holderCharges1, 
                    string loanAmount, 
                    string gst, 
                    string taxWithheld, 
                    string nettAmount, 
                    string chargeAmount01, 
                    string chargeAmount02, 
                    string chargeAmount03, 
                    string chargeAmount04, 
                    string chargeAmount05, 
                    string chargeAmount06, 
                    string localChqCount, 
                    string localChqNettAmount, 
                    string foreignChqCount, 
                    string foreignChqNettAmt, 
                    string wireCount, 
                    string wireNettAmount, 
                    string directBankingCount, 
                    string directBankNettAmt, 
                    string employerCount, 
                    string employerNettAmount, 
                    string companyCharges, 
                    string companyTax, 
                    string holderCharges, 
                    string holderTax, 
                    string reportCharges, 
                    string reportTax, 
                    string paymentAccount, 
                    string bankType, 
                    string branchNumber, 
                    string accountNumber, 
                    string paymentAccount1, 
                    string orderNO, 
                    string ident, 
                    string classCode, 
                    string nbrTrades, 
                    string tradeGrossAmount, 
                    string tradeFrom, 
                    string tradeTO, 
                    string settlementFrom, 
                    string settlementTO, 
                    string menuSelection1, 
                    string confirmStatus1, 
                    string tradingID, 
                    string status, 
                    string price, 
                    string transCount, 
                    string transTotal, 
                    string moneyTotal, 
                    string applyTaxInd, 
                    string paymentMethodDesc, 
                    string currency, 
                    string sellUnits, 
                    string orderType, 
                    string bulkType, 
                    string bulkTypeDesc, 
                    string statusDesc, 
                    string totalCount, 
                    string orderTransUnits, 
                    string totalMoney, 
                    string reqdSettlementDate, 
                    string actualSettlementDate, 
                    string reconciliationCode, 
                    string cshtrnReference, 
                    string minimumDeal, 
                    string maximumDeal, 
                    string cutOffTime, 
                    string counterpartyClass, 
                    string counterRegisterCode, 
                    string orderType1, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string action, 
                    string locateArgument, 
                    string paymentDate, 
                    string currencyDesc, 
                    string paymentMethod1, 
                    string totalCharges, 
                    string gstTaxTotal, 
                    string menuSelection2, 
                    string confirmStatus2, 
                    string action1, 
                    string locateArgument1, 
                    string bankCode, 
                    string payeeAccountNumber, 
                    string accountName, 
                    string remainingBalance, 
                    string remBalIndDesc, 
                    string transfereeHolder, 
                    string transfereeClass, 
                    string tradeControlCode, 
                    string tradeUnits, 
                    string transMoney, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TS_TradingSystem",
                    "OptionsPlanSales",
                    "30522",
                    "FullSmokeTest",
                    "SmokeTestTradingOptionsdReal"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Options Real Time Sale SmokeTest", @__tags);
#line 159
this.ScenarioSetup(scenarioInfo);
#line 160
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 161
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 162
  testRunner.And("I go to \"Company Options\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
  testRunner.And(string.Format("In HKS01516 I set the Multi-Cert Flag to \"{0}\"", multi_Cert), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
  testRunner.And("I go to \"Trading Control Codes\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
  testRunner.And(string.Format("In TRD24000 I select the Trade Control Code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
  testRunner.And(string.Format("In TRD24001 I perform a Change for On Market Trade \"{0}\", \"{1}\", \"{2}\", \"{3}\", \"{" +
                        "4}\" and Top Up \"{5}\", \"{6}\" and Remaining Balance Options \"{7}\", \"{8}\", \"{9}\", \"" +
                        "{10}\" and World Link Number \"{11}\"", onMarketTrade, brokerCode, brokerAccountID, connectionCode, realTimeTrading, topupPercentage, sellSelected, option, tranType, @class, reg, worldLinkNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
  testRunner.And(string.Format("I go to the Trading system Sales and trade control code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
  testRunner.And(string.Format("In TRS00701 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", transNumber, searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
 testRunner.When(string.Format("In TRS00702 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\"", sellOption, remainingBalInd, paymentMethod, prefCurrency, notificationReqdInd, balance, availBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
  testRunner.And(string.Format("In TRS00707 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\"", sellAll01, exerciseUnits01, units01, sellAll02, exerciseUnits02, units02, sellAll03, exerciseUnits03, units03, sellAll04, exerciseUnits04, units04), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
  testRunner.And(string.Format("In TRS00511 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", durationType, estMarketValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
  testRunner.And(string.Format("In TRS00704 I Verify Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" " +
                        "\"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\"", unitsExercise, unitsSell, estMarketValue, marketValue, purchResidueAmt, federalTaxWithheld, optionCost, chargeAmount1, chargeAmount2, chargeAmount3, totalGst, estimatedProceeds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
  testRunner.And(string.Format("In TRS00703 I Add Postal Transaction Entry details as \"<ExerciseUnits>\" \"{0}\" \"{1" +
                        "}\"", confirmUnits, confirmWarningFlag5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
  testRunner.And(string.Format("In TRD00401 I Change Order Status to \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\"", menuSelection, confirmStatus, tradeDate, tradeTimeHH, tradeTimeMM, settlementDate, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
 testRunner.Then(string.Format("In TRD004CS I Verify Change Order Status details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", unitsTraded, totalCost, finalPrice, tradePrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 177
  testRunner.And(string.Format("In TRD004CS I Verify Change Order Status details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
 testRunner.When(string.Format("In TRD00101 I Run the Generate Output Job as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" " +
                        "\"{6}\" \"{7}\" \"{8}\" \"{9}\"", paymentAccount1, orderNO, ident, classCode, nbrTrades, tradeGrossAmount, tradeFrom, tradeTO, settlementFrom, settlementTO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX"});
            table26.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT"});
#line 179
  testRunner.And("I wait for  GenerateOutput job to complete", ((string)(null)), table26, "And ");
#line 182
  testRunner.And(string.Format("In TRD00401 I Apply Exercise Transaction as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"" +
                        "{6}\"", menuSelection2, confirmStatus2, tradeDate, tradeTimeHH, tradeTimeMM, settlementDate, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
  testRunner.And(string.Format("In TRD00401 I Force Settle the Order as \"{0}\" \"{1}\"", menuSelection1, confirmStatus1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
 testRunner.Then(string.Format("In TRS01010 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\"", tradingID, status, price, classCode, transCount, transTotal, moneyTotal, settlementDate, applyTaxInd, paymentMethod, paymentMethodDesc, currency, sellUnits, orderType, tradeUnits, transMoney), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 185
  testRunner.And(string.Format("In TRDSCH02 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" " +
                        "\"{17}\" \"{18}\"", tradingID, bulkType, bulkTypeDesc, statusDesc, totalCount, orderTransUnits, totalMoney, tradeDate, reqdSettlementDate, actualSettlementDate, finalPrice, reconciliationCode, cshtrnReference, minimumDeal, maximumDeal, cutOffTime, counterpartyClass, counterRegisterCode, orderType1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\"", unitsTraded, totalCost, finalPrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
  testRunner.And("I go the Main Menu From Trading System", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 190
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 191
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action1, locateArgument1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
 testRunner.Then(string.Format("In ENSTRD48 I should see trading history summary as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        "", line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 194
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 195
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", orderTransUnits, unitsSell, finalPrice, grossAmount, purchaseResidue, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06, paymentDate, paymentAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", prefCurrency, currencyDesc, paymentMethod1, holderCharges, holderTax, companyCharges, companyTax, reportCharges, reportTax, totalCharges, gstTaxTotal, bankCode, payeeAccountNumber, accountName, remainingBalance, remBalIndDesc, transfereeHolder, transfereeClass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Loan Real Time Sale SmokeTest")]
        [NUnit.Framework.CategoryAttribute("TS_TradingSystem")]
        [NUnit.Framework.CategoryAttribute("LoanPlanSales")]
        [NUnit.Framework.CategoryAttribute("30881")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTestTradingLoanReal")]
        [NUnit.Framework.TestCaseAttribute("SellAll", "NAB2_AUTO", "M", "3383", "CLS.GAP", "ORMSAUUAT", "Y", "0.00", "Y", "C", "ESTSC", "ORD", "VIC", "123451234", "I0036534036", "A", "", "C", "AUD", "E", "1500.000000", "1500.000000", "1", "30.00", "1500.000000", "45000.00", "", "", "3000.00", "135.00", "100.00", "15.00", "23.50", "41726.50", "N", "REAL-TIME-HOLDER1@TEST.COM", "1500.000000", "", "C", "C", "20/08/2015", "10", "00", "20/08/2015", "1500.000000", "1500.000000", "45000.00", "30.000000", "30.000000", "30.000000", "45000.00", "", "250.00", "3000.00", "", "23.50", "", "41726.50", "135.00", "100.00", "", "", "15.00", "", "1", "41726.50", "", "", "", "", "", "", "", "", "", "", "250.00", "23.50", "", "", "", "", "", "", "TSSAL", "ELA1", "NDF", "ELA", "1", "1500.000000", "", "", "20/08/2015", "20/08/2015", "S", "S", "", "Settled", "30.000000", "1", "1500.000000", "41726.50", "Y", "Cheque Loc", "AUD", "1500.000000", "Sell All", "S", "SALE", "Settled", "1", "1500.000000", "41726.50", "20/08/2015", "20/08/2015", "ESSOPT", "1562", "1.000000", "99999999999.000000", "10:00", "ORD", "VIC", "Market", "ELA Sale     RELA0000002  79269002 20/08/15 Set         1500.000000      41726.50" +
            "      30.000000", "", "", "", "", "01", "", "20/08/2015", "AUSTRALIAN DOLLAR", "Cheque/Unpres", "250.00", "23.50", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1500.000000", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "RELA", "1500.000000", "41726.50", null)]
        public virtual void LoanRealTimeSaleSmokeTest(
                    string saleType, 
                    string cOY, 
                    string onMarketTrade, 
                    string brokerCode, 
                    string brokerAccountID, 
                    string connectionCode, 
                    string realTimeTrading, 
                    string topupPercentage, 
                    string sellSelected, 
                    string option, 
                    string tranType, 
                    string @class, 
                    string reg, 
                    string worldLinkNumber, 
                    string searchName, 
                    string sellOption, 
                    string units, 
                    string paymentMethod, 
                    string prefCurrency, 
                    string notificationReqdInd, 
                    string balance, 
                    string availBalance, 
                    string durationType, 
                    string estMarketValue, 
                    string unitsSell, 
                    string marketValue, 
                    string purchResidueAmt, 
                    string federalTaxWithheld, 
                    string loanAmt, 
                    string chargeAmount1, 
                    string chargeAmount2, 
                    string chargeAmount3, 
                    string totalGst, 
                    string estimatedProceeds, 
                    string overrideEmailInd, 
                    string emailAddress, 
                    string confirmUnits, 
                    string confirmWarningFlag5, 
                    string menuSelection, 
                    string confirmStatus, 
                    string tradeDate, 
                    string tradeTimeHH, 
                    string tradeTimeMM, 
                    string settlementDate, 
                    string totalUnits, 
                    string unitsTraded, 
                    string totalCost, 
                    string finalPrice, 
                    string tradePrice, 
                    string priceATAudit, 
                    string grossAmount, 
                    string purchaseResidue, 
                    string holderCharges1, 
                    string loanAmount, 
                    string optionCost, 
                    string gst, 
                    string taxWithheld, 
                    string nettAmount, 
                    string chargeAmount01, 
                    string chargeAmount02, 
                    string chargeAmount03, 
                    string chargeAmount04, 
                    string chargeAmount05, 
                    string chargeAmount06, 
                    string localChqCount, 
                    string localChqNettAmount, 
                    string foreignChqCount, 
                    string foreignChqNettAmt, 
                    string wireCount, 
                    string wireNettAmount, 
                    string directBankingCount, 
                    string directBankNettAmt, 
                    string employerCount, 
                    string employerNettAmount, 
                    string companyCharges, 
                    string companyTax, 
                    string holderCharges, 
                    string holderTax, 
                    string reportCharges, 
                    string reportTax, 
                    string paymentAccount, 
                    string bankType, 
                    string branchNumber, 
                    string accountNumber, 
                    string paymentAccount1, 
                    string orderNO, 
                    string ident, 
                    string classCode, 
                    string nbrTrades, 
                    string tradeGrossAmount, 
                    string tradeFrom, 
                    string tradeTO, 
                    string settlementFrom, 
                    string settlementTO, 
                    string menuSelection1, 
                    string confirmStatus1, 
                    string tradingID, 
                    string status, 
                    string price, 
                    string transCount, 
                    string transTotal, 
                    string moneyTotal, 
                    string applyTaxInd, 
                    string paymentMethodDesc, 
                    string currency, 
                    string sellUnits, 
                    string orderType, 
                    string bulkType, 
                    string bulkTypeDesc, 
                    string statusDesc, 
                    string totalCount, 
                    string orderTransUnits, 
                    string totalMoney, 
                    string reqdSettlementDate, 
                    string actualSettlementDate, 
                    string reconciliationCode, 
                    string cshtrnReference, 
                    string minimumDeal, 
                    string maximumDeal, 
                    string cutOffTime, 
                    string counterpartyClass, 
                    string counterRegisterCode, 
                    string orderType1, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string action, 
                    string locateArgument, 
                    string paymentDate, 
                    string currencyDesc, 
                    string paymentMethod1, 
                    string totalCharges, 
                    string gstTaxTotal, 
                    string bankCode, 
                    string payeeAccountNumber, 
                    string accountName, 
                    string cover01, 
                    string cover02, 
                    string cover03, 
                    string cover04, 
                    string cover05, 
                    string cover06, 
                    string cover07, 
                    string cover08, 
                    string cover09, 
                    string cover10, 
                    string cover11, 
                    string cover12, 
                    string cover13, 
                    string cover14, 
                    string cover15, 
                    string unitsTraded1, 
                    string sellAll01, 
                    string units01, 
                    string sellAll02, 
                    string units02, 
                    string sellAll03, 
                    string units03, 
                    string sellAll04, 
                    string units04, 
                    string sellAll05, 
                    string units05, 
                    string sellAll06, 
                    string units06, 
                    string sellAll07, 
                    string units07, 
                    string sellAll08, 
                    string units08, 
                    string sellAll09, 
                    string units09, 
                    string remainingBalance, 
                    string remBalIndDesc, 
                    string transfereeHolder, 
                    string transfereeClass, 
                    string tradeControlCode, 
                    string tradeUnits, 
                    string tradeMoney, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TS_TradingSystem",
                    "LoanPlanSales",
                    "30881",
                    "FullSmokeTest",
                    "SmokeTestTradingLoanReal"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Loan Real Time Sale SmokeTest", @__tags);
#line 207
this.ScenarioSetup(scenarioInfo);
#line 208
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 209
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 212
  testRunner.And("I go to \"Trading Control Codes\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
  testRunner.And(string.Format("In TRD24000 I select the Trade Control Code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
  testRunner.And(string.Format("In TRD24001 I perform a Change for On Market Trade \"{0}\", \"{1}\", \"{2}\", \"{3}\", \"{" +
                        "4}\" and Top Up \"{5}\", \"{6}\" and Remaining Balance Options \"{7}\", \"{8}\", \"{9}\", \"" +
                        "{10}\" and World Link Number \"{11}\"", onMarketTrade, brokerCode, brokerAccountID, connectionCode, realTimeTrading, topupPercentage, sellSelected, option, tranType, @class, reg, worldLinkNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
  testRunner.And(string.Format("I go to the Trading system Sales and trade control code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
  testRunner.And(string.Format("In TRS00501 I Add Postal Transaction Entry details as \"{0}\"", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
  testRunner.And(string.Format("In TRS00502 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\"", sellOption, units, paymentMethod, prefCurrency, notificationReqdInd, balance, availBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
  testRunner.And(string.Format("In TRS00507 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}" +
                        "\" \"{17}\"", sellAll01, units01, sellAll02, units02, sellAll03, units03, sellAll04, units04, sellAll05, units05, sellAll06, units06, sellAll07, units07, sellAll08, units08, sellAll09, units09), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
  testRunner.And(string.Format("In TRS00511 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", durationType, estMarketValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
  testRunner.And(string.Format("In TRS00513 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\"", cover01, cover02, cover03, cover04, cover05, cover06, cover07, cover08, cover09, cover10, cover11, cover12, cover13, cover14, cover15), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
  testRunner.And(string.Format("In TRS00504 I Verify Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" " +
                        "\"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\"", unitsSell, estMarketValue, marketValue, purchResidueAmt, federalTaxWithheld, loanAmt, chargeAmount1, chargeAmount2, chargeAmount3, totalGst, estimatedProceeds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
  testRunner.And(string.Format("In TRS00512 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", overrideEmailInd, emailAddress), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
  testRunner.And(string.Format("In TRS00503 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", confirmUnits, confirmWarningFlag5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
  testRunner.And(string.Format("In TRD00401 I Change Order Status to \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\"", menuSelection, confirmStatus, tradeDate, tradeTimeHH, tradeTimeMM, settlementDate, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
 testRunner.Then(string.Format("In TRD004CS I Verify Change Order Status details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", unitsTraded, totalCost, finalPrice, tradePrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 226
  testRunner.And(string.Format("In TRD004CS I Verify Change Order Status details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 227
 testRunner.When(string.Format("In TRD00101 I Run the Generate Output Job as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" " +
                        "\"{6}\" \"{7}\" \"{8}\" \"{9}\"", paymentAccount1, orderNO, ident, classCode, nbrTrades, tradeGrossAmount, tradeFrom, tradeTO, settlementFrom, settlementTO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX"});
            table27.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT"});
#line 228
  testRunner.And("I wait for  GenerateOutput job to complete", ((string)(null)), table27, "And ");
#line 231
  testRunner.And(string.Format("In TRD00401 I Force Settle the Order as \"{0}\" \"{1}\"", menuSelection1, confirmStatus1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
 testRunner.Then(string.Format("In TRS01010 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\"", tradingID, status, price, classCode, transCount, transTotal, moneyTotal, settlementDate, applyTaxInd, paymentMethod, paymentMethodDesc, currency, sellUnits, orderType, tradeUnits, tradeMoney), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 233
  testRunner.And(string.Format("In TRDSCH02 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" " +
                        "\"{17}\" \"{18}\"", tradingID, bulkType, bulkTypeDesc, statusDesc, totalCount, orderTransUnits, totalMoney, tradeDate, reqdSettlementDate, actualSettlementDate, finalPrice, reconciliationCode, cshtrnReference, minimumDeal, maximumDeal, cutOffTime, counterpartyClass, counterRegisterCode, orderType1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\"", unitsTraded, totalCost, finalPrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
  testRunner.And("I go the Main Menu From Trading System", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 238
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 239
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table28.AddRow(new string[] {
                        "Action",
                        "TH"});
            table28.AddRow(new string[] {
                        "Locate Argument",
                        "/ELA"});
#line 240
  testRunner.And("I enter the following details as the Locate action:", ((string)(null)), table28, "And ");
#line 244
 testRunner.Then(string.Format("In ENSTRD48 I should see trading history summary as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        "", line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 245
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 246
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", totalUnits, unitsSell, finalPrice, grossAmount, purchaseResidue, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06, paymentDate, paymentAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 247
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", prefCurrency, currencyDesc, paymentMethod1, holderCharges, holderTax, companyCharges, companyTax, reportCharges, reportTax, totalCharges, gstTaxTotal, bankCode, payeeAccountNumber, accountName, remainingBalance, remBalIndDesc, transfereeHolder, transfereeClass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Rights Real Time Sale SmokeTest")]
        [NUnit.Framework.CategoryAttribute("TS_TradingSystem")]
        [NUnit.Framework.CategoryAttribute("RightsPlanSales")]
        [NUnit.Framework.CategoryAttribute("31035")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTestTradingRightsReal")]
        [NUnit.Framework.TestCaseAttribute("ExercisePartial_Test5", "NAB2_AUTO", "N", "M", "3383", "CLS.GAP", "ORMSAUUAT", "Y", "0.00", "", "C", "ESOXR", "ORD", "VIC", "123451234", "", "I0036535547", "", "", "", "", "", "", "", "", "", "", "1000", "899", "P", "C", "C", "USD", "N", "4000.000000", "3900.000000", "1", "30.00", "1000.000000", "899.000000", "26970.00", "", "", "", "", "80.91", "100.00", "40.00", "18.09", "26731.00", "", "", "C", "C", "20/08/2015", "10", "00", "20/08/2015", "1000.000000", "899.000000", "26970.00", "30.000000", "30.000000", "30.000000", "26970.00", "", "220.91", "", "18.09", "", "26731.00", "80.91", "100.00", "", "", "", "40.00", "", "", "1", "26731.00", "", "", "", "", "", "", "", "", "220.91", "18.09", "", "", "", "", "", "", "TSSAL", "RGT5", "NDF", "PRS", "1", "1000.000000", "", "", "20/08/2015", "20/08/2015", "S", "S", "", "Settled", "30.000000", "1", "1000.000000", "26731.00", "Y", "Cheque For", "USD", "899.000000", "Sell Partial", "S", "SALE", "Settled", "1", "1000.000000", "26731.00", "20/08/2015", "20/08/2015", "ESSOPT", "", "1.000000", "99999999999.000000", "10:00", "ORD", "VIC", "Market", "", "", "", "", "", "01", "", "20/08/2015", "US DOLLAR", "Foreign/Unpres", "220.91", "18.09", "R", "R", "TH", "/PRS", "", "", "", "101.000000", "Issuer", "I0036535547", "ORD", "RPRS", "1000.000000", "26731.00", null)]
        public virtual void RightsRealTimeSaleSmokeTest(
                    string exerciseType, 
                    string cOY, 
                    string multi_Cert, 
                    string onMarketTrade, 
                    string brokerCode, 
                    string brokerAccountID, 
                    string connectionCode, 
                    string realTimeTrading, 
                    string topupPercentage, 
                    string sellSelected, 
                    string option, 
                    string tranType, 
                    string @class, 
                    string reg, 
                    string worldLinkNumber, 
                    string transNumber, 
                    string searchName, 
                    string sellAll01, 
                    string exerciseUnits01, 
                    string units01, 
                    string sellAll02, 
                    string exerciseUnits02, 
                    string units02, 
                    string sellAll03, 
                    string exerciseUnits03, 
                    string units03, 
                    string sellAll04, 
                    string exerciseUnits04, 
                    string units04, 
                    string sellOption, 
                    string remainingBalInd, 
                    string paymentMethod, 
                    string prefCurrency, 
                    string notificationReqdInd, 
                    string balance, 
                    string availBalance, 
                    string durationType, 
                    string estMarketValue, 
                    string unitsExercise, 
                    string unitsSell, 
                    string marketValue, 
                    string purchResidueAmt, 
                    string federalTaxWithheld, 
                    string optionCost, 
                    string loanAmt, 
                    string chargeAmount1, 
                    string chargeAmount2, 
                    string chargeAmount3, 
                    string totalGst, 
                    string estimatedProceeds, 
                    string confirmUnits, 
                    string confirmWarningFlag5, 
                    string menuSelection, 
                    string confirmStatus, 
                    string tradeDate, 
                    string tradeTimeHH, 
                    string tradeTimeMM, 
                    string settlementDate, 
                    string totalUnits, 
                    string unitsTraded, 
                    string totalCost, 
                    string finalPrice, 
                    string tradePrice, 
                    string priceATAudit, 
                    string grossAmount, 
                    string purchaseResidue, 
                    string holderCharges1, 
                    string loanAmount, 
                    string gst, 
                    string taxWithheld, 
                    string nettAmount, 
                    string chargeAmount01, 
                    string chargeAmount02, 
                    string chargeAmount03, 
                    string chargeAmount04, 
                    string chargeAmount05, 
                    string chargeAmount06, 
                    string localChqCount, 
                    string localChqNettAmount, 
                    string foreignChqCount, 
                    string foreignChqNettAmt, 
                    string wireCount, 
                    string wireNettAmount, 
                    string directBankingCount, 
                    string directBankNettAmt, 
                    string employerCount, 
                    string employerNettAmount, 
                    string companyCharges, 
                    string companyTax, 
                    string holderCharges, 
                    string holderTax, 
                    string reportCharges, 
                    string reportTax, 
                    string paymentAccount, 
                    string bankType, 
                    string branchNumber, 
                    string accountNumber, 
                    string paymentAccount1, 
                    string orderNO, 
                    string ident, 
                    string classCode, 
                    string nbrTrades, 
                    string tradeGrossAmount, 
                    string tradeFrom, 
                    string tradeTO, 
                    string settlementFrom, 
                    string settlementTO, 
                    string menuSelection1, 
                    string confirmStatus1, 
                    string tradingID, 
                    string status, 
                    string price, 
                    string transCount, 
                    string transTotal, 
                    string moneyTotal, 
                    string applyTaxInd, 
                    string paymentMethodDesc, 
                    string currency, 
                    string sellUnits, 
                    string orderType, 
                    string bulkType, 
                    string bulkTypeDesc, 
                    string statusDesc, 
                    string totalCount, 
                    string orderTransUnits, 
                    string totalMoney, 
                    string reqdSettlementDate, 
                    string actualSettlementDate, 
                    string reconciliationCode, 
                    string cshtrnReference, 
                    string minimumDeal, 
                    string maximumDeal, 
                    string cutOffTime, 
                    string counterpartyClass, 
                    string counterRegisterCode, 
                    string orderType1, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string action, 
                    string locateArgument, 
                    string paymentDate, 
                    string currencyDesc, 
                    string paymentMethod1, 
                    string totalCharges, 
                    string gstTaxTotal, 
                    string menuSelection2, 
                    string confirmStatus2, 
                    string action1, 
                    string locateArgument1, 
                    string bankCode, 
                    string payeeAccountNumber, 
                    string accountName, 
                    string remainingBalance, 
                    string remBalIndDesc, 
                    string transfereeHolder, 
                    string transfereeClass, 
                    string tradeControlCode, 
                    string tradeUnits, 
                    string transMoney, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TS_TradingSystem",
                    "RightsPlanSales",
                    "31035",
                    "FullSmokeTest",
                    "SmokeTestTradingRightsReal"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rights Real Time Sale SmokeTest", @__tags);
#line 259
this.ScenarioSetup(scenarioInfo);
#line 260
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 261
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 262
  testRunner.And("I go to \"Company Options\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 263
  testRunner.And(string.Format("In HKS01516 I set the Multi-Cert Flag to \"{0}\"", multi_Cert), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
  testRunner.And("I go to \"Trading Control Codes\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
  testRunner.And(string.Format("In TRD24000 I select the Trade Control Code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 266
  testRunner.And(string.Format("In TRD24001 I perform a Change for On Market Trade \"{0}\", \"{1}\", \"{2}\", \"{3}\", \"{" +
                        "4}\" and Top Up \"{5}\", \"{6}\" and Remaining Balance Options \"{7}\", \"{8}\", \"{9}\", \"" +
                        "{10}\" and World Link Number \"{11}\"", onMarketTrade, brokerCode, brokerAccountID, connectionCode, realTimeTrading, topupPercentage, sellSelected, option, tranType, @class, reg, worldLinkNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 267
  testRunner.And(string.Format("I go to the Trading system Sales and trade control code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 268
  testRunner.And(string.Format("In TRS00701 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", transNumber, searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 270
 testRunner.When(string.Format("In TRS00702 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\"", sellOption, remainingBalInd, paymentMethod, prefCurrency, notificationReqdInd, balance, availBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 271
  testRunner.And(string.Format("In TRS00707 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\"", sellAll01, exerciseUnits01, units01, sellAll02, exerciseUnits02, units02, sellAll03, exerciseUnits03, units03, sellAll04, exerciseUnits04, units04), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
  testRunner.And(string.Format("In TRS00511 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", durationType, estMarketValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 273
  testRunner.And(string.Format("In TRS00704 I Verify Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" " +
                        "\"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\"", unitsExercise, unitsSell, estMarketValue, marketValue, purchResidueAmt, federalTaxWithheld, optionCost, chargeAmount1, chargeAmount2, chargeAmount3, totalGst, estimatedProceeds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
  testRunner.And(string.Format("In TRS00703 I Add Postal Transaction Entry details as \"<ExerciseUnits>\" \"{0}\" \"{1" +
                        "}\"", confirmUnits, confirmWarningFlag5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 275
  testRunner.And(string.Format("In TRD00401 I Change Order Status to \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\"", menuSelection, confirmStatus, tradeDate, tradeTimeHH, tradeTimeMM, settlementDate, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 276
 testRunner.Then(string.Format("In TRD004CS I Verify Change Order Status details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", unitsTraded, totalCost, finalPrice, tradePrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 277
  testRunner.And(string.Format("In TRD004CS I Verify Change Order Status details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
 testRunner.When(string.Format("In TRD00101 I Run the Generate Output Job as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" " +
                        "\"{6}\" \"{7}\" \"{8}\" \"{9}\"", paymentAccount1, orderNO, ident, classCode, nbrTrades, tradeGrossAmount, tradeFrom, tradeTO, settlementFrom, settlementTO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX"});
            table29.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT"});
#line 279
  testRunner.And("I wait for  GenerateOutput job to complete", ((string)(null)), table29, "And ");
#line 282
  testRunner.And(string.Format("In TRD00401 I Apply Exercise Transaction as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"" +
                        "{6}\"", menuSelection2, confirmStatus2, tradeDate, tradeTimeHH, tradeTimeMM, settlementDate, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 283
  testRunner.And(string.Format("In TRD00401 I Force Settle the Order as \"{0}\" \"{1}\"", menuSelection1, confirmStatus1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 284
 testRunner.Then(string.Format("In TRS01010 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\"", tradingID, status, price, classCode, transCount, transTotal, moneyTotal, settlementDate, applyTaxInd, paymentMethod, paymentMethodDesc, currency, sellUnits, orderType, tradeUnits, transMoney), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 285
  testRunner.And(string.Format("In TRDSCH02 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" " +
                        "\"{17}\" \"{18}\"", tradingID, bulkType, bulkTypeDesc, statusDesc, totalCount, orderTransUnits, totalMoney, tradeDate, reqdSettlementDate, actualSettlementDate, finalPrice, reconciliationCode, cshtrnReference, minimumDeal, maximumDeal, cutOffTime, counterpartyClass, counterRegisterCode, orderType1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 286
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\"", unitsTraded, totalCost, finalPrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 287
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 288
  testRunner.And("I go the Main Menu From Trading System", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 291
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action1, locateArgument1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 293
 testRunner.Then(string.Format("In ENSTRD48 I should see trading history summary as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        "", line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 294
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 295
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", tradeUnits, unitsSell, finalPrice, grossAmount, purchaseResidue, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06, paymentDate, paymentAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 296
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", prefCurrency, currencyDesc, paymentMethod1, holderCharges, holderTax, companyCharges, companyTax, reportCharges, reportTax, totalCharges, gstTaxTotal, bankCode, payeeAccountNumber, accountName, remainingBalance, remBalIndDesc, transfereeHolder, transfereeClass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Investor Trade Real Time Sale SmokeTest")]
        [NUnit.Framework.CategoryAttribute("TS_TradingSystem")]
        [NUnit.Framework.CategoryAttribute("InvestorPlanSales")]
        [NUnit.Framework.CategoryAttribute("31188")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTestTradingORDReal")]
        [NUnit.Framework.TestCaseAttribute("SellPartial", "NAB2_AUTO", "I0035535926", "P", "40", "D", "AUD", "E", "782.000000", "782.000000", "1", "30.00", "40.000000", "1200.00", "", "", "", "3.60", "100.00", "10.00", "10.36", "1076.04", "N", "TIWUQI.KOD._test@computershare.com", "40.000000", "Y", "C", "C", "20/08/2015", "10", "00", "20/08/2015", "40.000000", "40.000000", "1200.00", "30.000000", "30.000000", "30.000000", "1200.00", "", "113.60", "", "", "10.36", "", "1076.04", "3.60", "100.00", "", "10.00", "", "", "", "", "", "", "", "", "1", "1076.04", "", "", "", "", "113.60", "10.36", "", "", "", "", "", "", "ITNAB", "ORD2", "NDF", "ORD", "1", "40.000000", "", "", "20/08/2015", "20/08/2015", "S", "S", "", "Settled", "30.000000", "1", "40.000000", "1076.04", "Y", "Dir-Credit", "AUD", "40.000000", "Sell Partial", "S", "SALE", "Settled", "1", "40.000000", "1076.04", "20/08/2015", "20/08/2015", "INVMSW", "1533", "1.000000", "99999999999999.999900", "10:00", "ORD", "VIC", "Market", "ORD Sale     RORD0000003  79269012 20/08/15 Set           40.000000       1076.04" +
            "      30.000000", "", "", "", "", "01", "", "20/08/2015", "AUSTRALIAN DOLLAR", "Direct Banking", "113.60", "10.36", "083-054", "000000000234567800", "T C C CIW", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "40.000000", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "RORD", "40.000000", "1076.04", null)]
        public virtual void InvestorTradeRealTimeSaleSmokeTest(
                    string saleType, 
                    string cOY, 
                    string searchName, 
                    string sellOption, 
                    string units, 
                    string paymentMethod, 
                    string prefCurrency, 
                    string notificationReqdInd, 
                    string balance, 
                    string availBalance, 
                    string durationType, 
                    string estMarketValue, 
                    string unitsSell, 
                    string marketValue, 
                    string purchResidueAmt, 
                    string federalTaxWithheld, 
                    string loanAmt, 
                    string chargeAmount1, 
                    string chargeAmount2, 
                    string chargeAmount3, 
                    string totalGst, 
                    string estimatedProceeds, 
                    string overrideEmailInd, 
                    string emailAddress, 
                    string confirmUnits, 
                    string confirmWarningFlag5, 
                    string menuSelection, 
                    string confirmStatus, 
                    string tradeDate, 
                    string tradeTimeHH, 
                    string tradeTimeMM, 
                    string settlementDate, 
                    string totalUnits, 
                    string unitsTraded, 
                    string totalCost, 
                    string finalPrice, 
                    string tradePrice, 
                    string priceATAudit, 
                    string grossAmount, 
                    string purchaseResidue, 
                    string holderCharges1, 
                    string loanAmount, 
                    string optionCost, 
                    string gst, 
                    string taxWithheld, 
                    string nettAmount, 
                    string chargeAmount01, 
                    string chargeAmount02, 
                    string chargeAmount03, 
                    string chargeAmount04, 
                    string chargeAmount05, 
                    string chargeAmount06, 
                    string localChqCount, 
                    string localChqNettAmount, 
                    string foreignChqCount, 
                    string foreignChqNettAmt, 
                    string wireCount, 
                    string wireNettAmount, 
                    string directBankingCount, 
                    string directBankNettAmt, 
                    string employerCount, 
                    string employerNettAmount, 
                    string companyCharges, 
                    string companyTax, 
                    string holderCharges, 
                    string holderTax, 
                    string reportCharges, 
                    string reportTax, 
                    string paymentAccount, 
                    string bankType, 
                    string branchNumber, 
                    string accountNumber, 
                    string paymentAccount1, 
                    string orderNO, 
                    string ident, 
                    string classCode, 
                    string nbrTrades, 
                    string tradeGrossAmount, 
                    string tradeFrom, 
                    string tradeTO, 
                    string settlementFrom, 
                    string settlementTO, 
                    string menuSelection1, 
                    string confirmStatus1, 
                    string tradingID, 
                    string status, 
                    string price, 
                    string transCount, 
                    string transTotal, 
                    string moneyTotal, 
                    string applyTaxInd, 
                    string paymentMethodDesc, 
                    string currency, 
                    string sellUnits, 
                    string orderType, 
                    string bulkType, 
                    string bulkTypeDesc, 
                    string statusDesc, 
                    string totalCount, 
                    string orderTransUnits, 
                    string totalMoney, 
                    string reqdSettlementDate, 
                    string actualSettlementDate, 
                    string reconciliationCode, 
                    string cshtrnReference, 
                    string minimumDeal, 
                    string maximumDeal, 
                    string cutOffTime, 
                    string counterpartyClass, 
                    string counterRegisterCode, 
                    string orderType1, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string action, 
                    string locateArgument, 
                    string paymentDate, 
                    string currencyDesc, 
                    string paymentMethod1, 
                    string totalCharges, 
                    string gstTaxTotal, 
                    string bankCode, 
                    string payeeAccountNumber, 
                    string accountName, 
                    string cover01, 
                    string cover02, 
                    string cover03, 
                    string cover04, 
                    string cover05, 
                    string cover06, 
                    string cover07, 
                    string cover08, 
                    string cover09, 
                    string cover10, 
                    string cover11, 
                    string cover12, 
                    string cover13, 
                    string cover14, 
                    string cover15, 
                    string units1, 
                    string sellAll01, 
                    string units01, 
                    string sellAll02, 
                    string units02, 
                    string sellAll03, 
                    string units03, 
                    string sellAll04, 
                    string units04, 
                    string sellAll05, 
                    string units05, 
                    string sellAll06, 
                    string units06, 
                    string sellAll07, 
                    string units07, 
                    string sellAll08, 
                    string units08, 
                    string sellAll09, 
                    string units09, 
                    string remainingBalance, 
                    string remBalIndDesc, 
                    string transfereeHolder, 
                    string transfereeClass, 
                    string tradeControlCode, 
                    string tradeUnits, 
                    string transMoney, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TS_TradingSystem",
                    "InvestorPlanSales",
                    "31188",
                    "FullSmokeTest",
                    "SmokeTestTradingORDReal"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Investor Trade Real Time Sale SmokeTest", @__tags);
#line 308
this.ScenarioSetup(scenarioInfo);
#line 309
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 310
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 313
  testRunner.And(string.Format("I go to the Trading system Sales and trade control code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 314
  testRunner.And(string.Format("In TRS00501 I Add Postal Transaction Entry details as \"{0}\"", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 315
  testRunner.And(string.Format("In TRS00502 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\"", sellOption, units, paymentMethod, prefCurrency, notificationReqdInd, balance, availBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 316
  testRunner.And(string.Format("In TRS00507 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}" +
                        "\" \"{17}\"", sellAll01, units01, sellAll02, units02, sellAll03, units03, sellAll04, units04, sellAll05, units05, sellAll06, units06, sellAll07, units07, sellAll08, units08, sellAll09, units09), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 317
  testRunner.And(string.Format("In TRS00511 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", durationType, estMarketValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 318
  testRunner.And(string.Format("In TRS00513 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\"", cover01, cover02, cover03, cover04, cover05, cover06, cover07, cover08, cover09, cover10, cover11, cover12, cover13, cover14, cover15), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 319
  testRunner.And(string.Format("In TRS00504 I Verify Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" " +
                        "\"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\"", unitsSell, estMarketValue, marketValue, purchResidueAmt, federalTaxWithheld, loanAmt, chargeAmount1, chargeAmount2, chargeAmount3, totalGst, estimatedProceeds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 320
  testRunner.And(string.Format("In TRS00512 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", overrideEmailInd, emailAddress), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 321
  testRunner.And(string.Format("In TRS00503 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", confirmUnits, confirmWarningFlag5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 322
  testRunner.And(string.Format("In TRD00401 I Change Order Status to \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\"", menuSelection, confirmStatus, tradeDate, tradeTimeHH, tradeTimeMM, settlementDate, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 323
 testRunner.Then(string.Format("In TRD004CS I Verify Change Order Status details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", unitsTraded, totalCost, finalPrice, tradePrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 324
  testRunner.And(string.Format("In TRD004CS I Verify Change Order Status details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 325
 testRunner.When(string.Format("In TRD00101 I Run the Generate Output Job as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" " +
                        "\"{6}\" \"{7}\" \"{8}\" \"{9}\"", paymentAccount1, orderNO, ident, classCode, nbrTrades, tradeGrossAmount, tradeFrom, tradeTO, settlementFrom, settlementTO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX"});
            table30.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT"});
#line 326
  testRunner.And("I wait for  GenerateOutput job to complete", ((string)(null)), table30, "And ");
#line 329
  testRunner.And(string.Format("In TRD00401 I Force Settle the Order as \"{0}\" \"{1}\"", menuSelection1, confirmStatus1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 330
 testRunner.Then(string.Format("In TRS01010 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\"", tradingID, status, price, classCode, transCount, transTotal, moneyTotal, settlementDate, applyTaxInd, paymentMethod, paymentMethodDesc, currency, sellUnits, orderType, tradeUnits, transMoney), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 331
  testRunner.And(string.Format("In TRDSCH02 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" " +
                        "\"{17}\" \"{18}\"", tradingID, bulkType, bulkTypeDesc, statusDesc, totalCount, orderTransUnits, totalMoney, tradeDate, reqdSettlementDate, actualSettlementDate, finalPrice, reconciliationCode, cshtrnReference, minimumDeal, maximumDeal, cutOffTime, counterpartyClass, counterRegisterCode, orderType1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 332
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\"", unitsTraded, totalCost, finalPrice, priceATAudit, grossAmount, purchaseResidue, holderCharges1, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 333
  testRunner.And(string.Format("In TRDSCHCS I Verify Transaction Enquiry details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}" +
                        "\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\"" +
                        " \"{17}\" \"{18}\"", localChqCount, localChqNettAmount, foreignChqCount, foreignChqNettAmt, wireCount, wireNettAmount, directBankingCount, directBankNettAmt, employerCount, employerNettAmount, companyCharges, companyTax, holderCharges, holderTax, reportCharges, reportTax, bankType, branchNumber, accountNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 334
  testRunner.And("I go the Main Menu From Trading System", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 336
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 337
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table31.AddRow(new string[] {
                        "Action",
                        "TH"});
            table31.AddRow(new string[] {
                        "Locate Argument",
                        "/ORD"});
#line 338
  testRunner.And("I enter the following details as the Locate action:", ((string)(null)), table31, "And ");
#line 342
 testRunner.Then(string.Format("In ENSTRD48 I should see trading history summary as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        "", line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 343
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 344
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", tradeUnits, unitsSell, finalPrice, grossAmount, purchaseResidue, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06, paymentDate, paymentAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 345
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", prefCurrency, currencyDesc, paymentMethod1, holderCharges, holderTax, companyCharges, companyTax, reportCharges, reportTax, totalCharges, gstTaxTotal, bankCode, payeeAccountNumber, accountName, remainingBalance, remBalIndDesc, transfereeHolder, transfereeClass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Options Transfers SmokeTest")]
        [NUnit.Framework.CategoryAttribute("TS_TradingSystem")]
        [NUnit.Framework.CategoryAttribute("OptionsTransfers")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTestTradingOptionsTransfer")]
        [NUnit.Framework.TestCaseAttribute("HoldAll_Multi_N_Test1", "NAB2_AUTO", "N", "C", "ESOXH", "ORD", "VIC", "", "I0036534427", "Y", "", "", "", "", "", "", "", "", "", "", "", "A", "C", "", "", "N", "4000.000000", "4000.000000", "", "", "", "A", "A", "20/08/2015", "10", "00", "", "30.000000", "TSSAL", "TOP1", "NDF", "OPT", "1", "1000.000000", "", "", "20/08/2015", "20/08/2015", "S", "S", "", "Settled", "30.000000", "1", "1000.000000", "10881.20", "Y", "", "AUD", "1000.000000", "Transfer All", "T", "TRADE", "Settled", "1", "1000.000000", "10881.20", "20/08/2015", "20/08/2015", "", "", "1.000000", "99999999999999.990000", "", "", "", "", "", "", "", "", "", "01", "", "1000.000000", "30000.00", "", "", "19000.00", "10.80", "", "19118.80", "90.00", "18.00", "", "", "", "", "", "", "", "", "108.00", "10.80", "", "", "", "", "108.00", "10.80", "TH", "/OPT", "", "", "", "1000.000000", "Issuer", "I0036534427", "ORD", "TOPT", "1000.000000", "", null)]
        public virtual void OptionsTransfersSmokeTest(
                    string exerciseType, 
                    string cOY, 
                    string multi_Cert, 
                    string option, 
                    string tranType, 
                    string @class, 
                    string reg, 
                    string transNumber, 
                    string searchName, 
                    string sellAll01, 
                    string exerciseUnits01, 
                    string units01, 
                    string sellAll02, 
                    string exerciseUnits02, 
                    string units02, 
                    string sellAll03, 
                    string exerciseUnits03, 
                    string units03, 
                    string sellAll04, 
                    string exerciseUnits04, 
                    string units04, 
                    string transferOption, 
                    string remainingBalInd, 
                    string paymentMethod, 
                    string prefCurrency, 
                    string notificationReqdInd, 
                    string balance, 
                    string availBalance, 
                    string exerciseUnits, 
                    string confirmUnits, 
                    string confirmWarningFlag5, 
                    string menuSelection, 
                    string confirmStatus, 
                    string tradeDate, 
                    string tradeTimeHH, 
                    string tradeTimeMM, 
                    string settlementDate, 
                    string finalPrice, 
                    string paymentAccount1, 
                    string orderNO, 
                    string ident, 
                    string classCode, 
                    string nbrTrades, 
                    string tradeGrossAmount, 
                    string tradeFrom, 
                    string tradeTO, 
                    string settlementFrom, 
                    string settlementTO, 
                    string menuSelection1, 
                    string confirmStatus1, 
                    string tradingID, 
                    string status, 
                    string price, 
                    string transCount, 
                    string transTotal, 
                    string moneyTotal, 
                    string applyTaxInd, 
                    string paymentMethodDesc, 
                    string currency, 
                    string sellUnits, 
                    string orderType, 
                    string bulkType, 
                    string bulkTypeDesc, 
                    string statusDesc, 
                    string totalCount, 
                    string orderTransUnits, 
                    string totalMoney, 
                    string reqdSettlementDate, 
                    string actualSettlementDate, 
                    string reconciliationCode, 
                    string cshtrnReference, 
                    string minimumDeal, 
                    string maximumDeal, 
                    string cutOffTime, 
                    string counterpartyClass, 
                    string counterRegisterCode, 
                    string orderType1, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string action, 
                    string locateArgument, 
                    string unitsSell, 
                    string grossAmount, 
                    string purchaseResidue, 
                    string loanAmount, 
                    string optionCost, 
                    string gst, 
                    string taxWithheld, 
                    string nettAmount, 
                    string chargeAmount01, 
                    string chargeAmount02, 
                    string chargeAmount03, 
                    string chargeAmount04, 
                    string chargeAmount05, 
                    string chargeAmount06, 
                    string paymentDate, 
                    string paymentAccount, 
                    string currencyDesc, 
                    string paymentMethod1, 
                    string holderCharges, 
                    string holderTax, 
                    string companyCharges, 
                    string companyTax, 
                    string reportCharges, 
                    string reportTax, 
                    string totalCharges, 
                    string gstTaxTotal, 
                    string action1, 
                    string locateArgument1, 
                    string bankCode, 
                    string payeeAccountNumber, 
                    string accountName, 
                    string remainingBalance, 
                    string remBalIndDesc, 
                    string transfereeHolder, 
                    string transfereeClass, 
                    string tradeControlCode, 
                    string tradeUnits, 
                    string tradeMoney, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TS_TradingSystem",
                    "OptionsTransfers",
                    "FullSmokeTest",
                    "SmokeTestTradingOptionsTransfer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Options Transfers SmokeTest", @__tags);
#line 356
this.ScenarioSetup(scenarioInfo);
#line 357
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 358
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 359
  testRunner.And("I go to \"Company Options\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 360
  testRunner.And(string.Format("In HKS01516 I set the Multi-Cert Flag to \"{0}\"", multi_Cert), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 361
  testRunner.And("I go to \"Trading Control Codes\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 362
  testRunner.And(string.Format("In TRD24000 I select the Trade Control Code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 363
  testRunner.And(string.Format("In TRD24001 I perform a Change for Remaining Balance Options \"{0}\" \"{1}\" \"{2}\" \"{" +
                        "3}\"", option, tranType, @class, reg), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 364
  testRunner.And(string.Format("I go to the Trading system Transfers and trade control code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 365
  testRunner.And(string.Format("In TRS00701 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", transNumber, searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 366
  testRunner.And(string.Format("In TRS00702 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\"", transferOption, remainingBalInd, paymentMethod, prefCurrency, notificationReqdInd, balance, availBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 367
  testRunner.And(string.Format("In TRS00707 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\"", sellAll01, exerciseUnits01, units01, sellAll02, exerciseUnits02, units02, sellAll03, exerciseUnits03, units03, sellAll04, exerciseUnits04, units04), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 368
  testRunner.And(string.Format("In TRS00703 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\"", exerciseUnits, confirmUnits, confirmWarningFlag5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 369
  testRunner.And(string.Format("In TRD00401 I Change Transfer Order Status to \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\"" +
                        "", menuSelection, confirmStatus, tradeDate, tradeTimeHH, tradeTimeMM, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 370
 testRunner.When(string.Format("In TRD00101 I Run the Generate Output Job as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" " +
                        "\"{6}\" \"{7}\" \"{8}\" \"{9}\"", paymentAccount1, orderNO, ident, classCode, nbrTrades, tradeGrossAmount, tradeFrom, tradeTO, settlementFrom, settlementTO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX"});
            table32.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT"});
#line 371
  testRunner.And("I wait for  GenerateOutput job to complete", ((string)(null)), table32, "And ");
#line 374
  testRunner.And(string.Format("In TRD00401 I Force Settle the Order as \"{0}\" \"{1}\"", menuSelection1, confirmStatus1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 375
 testRunner.Then(string.Format("In TRS01010 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"<TransMoney>\"" +
                        "", tradingID, status, price, classCode, transCount, transTotal, moneyTotal, settlementDate, applyTaxInd, paymentMethod, paymentMethodDesc, currency, sellUnits, orderType, tradeUnits), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 376
  testRunner.And(string.Format("In TRDSCH02 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" " +
                        "\"{17}\" \"{18}\"", tradingID, bulkType, bulkTypeDesc, statusDesc, totalCount, orderTransUnits, totalMoney, tradeDate, reqdSettlementDate, actualSettlementDate, finalPrice, reconciliationCode, cshtrnReference, minimumDeal, maximumDeal, cutOffTime, counterpartyClass, counterRegisterCode, orderType1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 377
  testRunner.And("I go the Main Menu From Trading System", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 378
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 379
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 380
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action1, locateArgument1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 381
 testRunner.Then(string.Format("In ENSTRD48 I should see trading history summary as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        "", line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 382
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 383
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", tradeUnits, unitsSell, finalPrice, grossAmount, purchaseResidue, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06, paymentDate, paymentAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 384
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", prefCurrency, currencyDesc, paymentMethod1, holderCharges, holderTax, companyCharges, companyTax, reportCharges, reportTax, totalCharges, gstTaxTotal, bankCode, payeeAccountNumber, accountName, remainingBalance, remBalIndDesc, transfereeHolder, transfereeClass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Rights Transfers SmokeTest")]
        [NUnit.Framework.CategoryAttribute("TS_TradingSystem")]
        [NUnit.Framework.CategoryAttribute("RightsTransfers")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTestTradingRightsTransfer")]
        [NUnit.Framework.TestCaseAttribute("HoldSpec_Multi_N_Test2", "NAB2_AUTO", "N", "C", "ESOXH", "ORD", "VIC", "", "I0036535768", "", "", "", "", "999", "", "", "", "", "", "", "", "S", "C", "", "", "N", "4000.000000", "3900.000000", "", "", "", "A", "A", "20/08/2015", "10", "00", "", "30.000000", "TSSAL", "TRT2", "NDF", "PRS", "1", "999.000000", "", "", "20/08/2015", "20/08/2015", "S", "S", "", "Settled", "30.000000", "1", "999.000000", "29851.30", "Y", "", "AUD", "999.000000", "Tran Specific", "T", "TRADE", "Settled", "1", "999.000000", "29851.30", "20/08/2015", "20/08/2015", "", "", "1.000000", "99999999999999.990000", "", "", "", "", "", "", "", "", "", "01", "", "999.000000", "29970.00", "", "", "", "10.79", "", "118.70", "89.91", "18.00", "", "", "", "", "", "", "", "", "107.91", "10.79", "", "", "", "", "107.91", "10.79", "TH", "/PRS", "", "", "", "999.000000", "Issuer", "I0036535768", "ORD", "TPRS", "999.000000", "", null)]
        public virtual void RightsTransfersSmokeTest(
                    string exerciseType, 
                    string cOY, 
                    string multi_Cert, 
                    string option, 
                    string tranType, 
                    string @class, 
                    string reg, 
                    string transNumber, 
                    string searchName, 
                    string sellAll01, 
                    string exerciseUnits01, 
                    string units01, 
                    string sellAll02, 
                    string exerciseUnits02, 
                    string units02, 
                    string sellAll03, 
                    string exerciseUnits03, 
                    string units03, 
                    string sellAll04, 
                    string exerciseUnits04, 
                    string units04, 
                    string transferOption, 
                    string remainingBalInd, 
                    string paymentMethod, 
                    string prefCurrency, 
                    string notificationReqdInd, 
                    string balance, 
                    string availBalance, 
                    string exerciseUnits, 
                    string confirmUnits, 
                    string confirmWarningFlag5, 
                    string menuSelection, 
                    string confirmStatus, 
                    string tradeDate, 
                    string tradeTimeHH, 
                    string tradeTimeMM, 
                    string settlementDate, 
                    string finalPrice, 
                    string paymentAccount1, 
                    string orderNO, 
                    string ident, 
                    string classCode, 
                    string nbrTrades, 
                    string tradeGrossAmount, 
                    string tradeFrom, 
                    string tradeTO, 
                    string settlementFrom, 
                    string settlementTO, 
                    string menuSelection1, 
                    string confirmStatus1, 
                    string tradingID, 
                    string status, 
                    string price, 
                    string transCount, 
                    string transTotal, 
                    string moneyTotal, 
                    string applyTaxInd, 
                    string paymentMethodDesc, 
                    string currency, 
                    string sellUnits, 
                    string orderType, 
                    string bulkType, 
                    string bulkTypeDesc, 
                    string statusDesc, 
                    string totalCount, 
                    string orderTransUnits, 
                    string totalMoney, 
                    string reqdSettlementDate, 
                    string actualSettlementDate, 
                    string reconciliationCode, 
                    string cshtrnReference, 
                    string minimumDeal, 
                    string maximumDeal, 
                    string cutOffTime, 
                    string counterpartyClass, 
                    string counterRegisterCode, 
                    string orderType1, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string action, 
                    string locateArgument, 
                    string unitsSell, 
                    string grossAmount, 
                    string purchaseResidue, 
                    string loanAmount, 
                    string optionCost, 
                    string gst, 
                    string taxWithheld, 
                    string nettAmount, 
                    string chargeAmount01, 
                    string chargeAmount02, 
                    string chargeAmount03, 
                    string chargeAmount04, 
                    string chargeAmount05, 
                    string chargeAmount06, 
                    string paymentDate, 
                    string paymentAccount, 
                    string currencyDesc, 
                    string paymentMethod1, 
                    string holderCharges, 
                    string holderTax, 
                    string companyCharges, 
                    string companyTax, 
                    string reportCharges, 
                    string reportTax, 
                    string totalCharges, 
                    string gstTaxTotal, 
                    string action1, 
                    string locateArgument1, 
                    string bankCode, 
                    string payeeAccountNumber, 
                    string accountName, 
                    string remainingBalance, 
                    string remBalIndDesc, 
                    string transfereeHolder, 
                    string transfereeClass, 
                    string tradeControlCode, 
                    string tradeUnits, 
                    string tradeMoney, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TS_TradingSystem",
                    "RightsTransfers",
                    "FullSmokeTest",
                    "SmokeTestTradingRightsTransfer"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rights Transfers SmokeTest", @__tags);
#line 396
this.ScenarioSetup(scenarioInfo);
#line 397
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 398
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 399
  testRunner.And("I go to \"Company Options\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 400
  testRunner.And(string.Format("In HKS01516 I set the Multi-Cert Flag to \"{0}\"", multi_Cert), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 401
  testRunner.And("I go to \"Trading Control Codes\" Control Code Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 402
  testRunner.And(string.Format("In TRD24000 I select the Trade Control Code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 403
  testRunner.And(string.Format("In TRD24001 I perform a Change for Remaining Balance Options \"{0}\" \"{1}\" \"{2}\" \"{" +
                        "3}\"", option, tranType, @class, reg), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 404
  testRunner.And(string.Format("I go to the Trading system Transfers and trade control code \"{0}\"", tradeControlCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 405
  testRunner.And(string.Format("In TRS00701 I Add Postal Transaction Entry details as \"{0}\" \"{1}\"", transNumber, searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 406
  testRunner.And(string.Format("In TRS00702 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\"", transferOption, remainingBalInd, paymentMethod, prefCurrency, notificationReqdInd, balance, availBalance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 407
  testRunner.And(string.Format("In TRS00707 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4" +
                        "}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\"", sellAll01, exerciseUnits01, units01, sellAll02, exerciseUnits02, units02, sellAll03, exerciseUnits03, units03, sellAll04, exerciseUnits04, units04), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 408
  testRunner.And(string.Format("In TRS00703 I Add Postal Transaction Entry details as \"{0}\" \"{1}\" \"{2}\"", exerciseUnits, confirmUnits, confirmWarningFlag5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 409
  testRunner.And(string.Format("In TRD00401 I Change Transfer Order Status to \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\"" +
                        "", menuSelection, confirmStatus, tradeDate, tradeTimeHH, tradeTimeMM, finalPrice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 410
 testRunner.When(string.Format("In TRD00101 I Run the Generate Output Job as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" " +
                        "\"{6}\" \"{7}\" \"{8}\" \"{9}\"", paymentAccount1, orderNO, ident, classCode, nbrTrades, tradeGrossAmount, tradeFrom, tradeTO, settlementFrom, settlementTO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "PassCriteria",
                        "timeout",
                        "FailCriteria",
                        "PassCriteriaLNX",
                        "FailCriteriaLNX"});
            table33.AddRow(new string[] {
                        "completion",
                        "240",
                        "error",
                        "DONE",
                        "EXIT"});
#line 411
  testRunner.And("I wait for  GenerateOutput job to complete", ((string)(null)), table33, "And ");
#line 414
  testRunner.And(string.Format("In TRD00401 I Force Settle the Order as \"{0}\" \"{1}\"", menuSelection1, confirmStatus1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 415
 testRunner.Then(string.Format("In TRS01010 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"<TransMoney>\"" +
                        "", tradingID, status, price, classCode, transCount, transTotal, moneyTotal, settlementDate, applyTaxInd, paymentMethod, paymentMethodDesc, currency, sellUnits, orderType, tradeUnits), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 416
  testRunner.And(string.Format("In TRDSCH02 I Verify Transaction Enquiry details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        " \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" " +
                        "\"{17}\" \"{18}\"", tradingID, bulkType, bulkTypeDesc, statusDesc, totalCount, orderTransUnits, totalMoney, tradeDate, reqdSettlementDate, actualSettlementDate, finalPrice, reconciliationCode, cshtrnReference, minimumDeal, maximumDeal, cutOffTime, counterpartyClass, counterRegisterCode, orderType1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 417
  testRunner.And("I go the Main Menu From Trading System", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 418
 testRunner.When(string.Format("In SELCOY01 I select the company as \"{0}\"", cOY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 419
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 420
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action1, locateArgument1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 421
 testRunner.Then(string.Format("In ENSTRD48 I should see trading history summary as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"" +
                        "", line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 422
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 423
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details1 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", tradeUnits, unitsSell, finalPrice, grossAmount, purchaseResidue, loanAmount, optionCost, gst, taxWithheld, nettAmount, chargeAmount01, chargeAmount02, chargeAmount03, chargeAmount04, chargeAmount05, chargeAmount06, paymentDate, paymentAccount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 424
  testRunner.And(string.Format("In ENSTRDSH I Verify Trade History details2 as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}" +
                        "\"", prefCurrency, currencyDesc, paymentMethod1, holderCharges, holderTax, companyCharges, companyTax, reportCharges, reportTax, totalCharges, gstTaxTotal, bankCode, payeeAccountNumber, accountName, remainingBalance, remBalIndDesc, transfereeHolder, transfereeClass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TestCase29579_IRCHG_Transaction")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("OL_Online")]
        [NUnit.Framework.CategoryAttribute("CPU_AUTO")]
        [NUnit.Framework.CategoryAttribute("35812")]
        [NUnit.Framework.CategoryAttribute("OL_HKT_HousekeepingTransactions")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.TestCaseAttribute("Test1", "IRCHG", "42415", "I0030047974", "FP", "VIC", "VICTORIA", "NSW", "NEW SOUTH WALES", "R", "/FP", "FP /ORDINARY FULLY PAID SHARES", "NSW UNCERTIF\'D   18/02/00 CTFXI  909/10141589            500  X0007165048", "", "", "", "", "", "", "", "", null)]
        public virtual void TestCase29579_IRCHG_Transaction(
                    string test, 
                    string selCode, 
                    string transNumber, 
                    string fromNameKey, 
                    string classCode, 
                    string oldRegisterCode, 
                    string oldRegisterDesc, 
                    string newRegisterCode, 
                    string nRegisterDesc, 
                    string action, 
                    string locateArgument, 
                    string certificateLine1, 
                    string certificateLine2, 
                    string certificateLine3, 
                    string certificateLine4, 
                    string certificateLine5, 
                    string certificateLine6, 
                    string certificateLine7, 
                    string certificateLine8, 
                    string certificateLine9, 
                    string certificateLine10, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "OL_Online",
                    "CPU_AUTO",
                    "35812",
                    "OL_HKT_HousekeepingTransactions",
                    "FullSmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TestCase29579_IRCHG_Transaction", @__tags);
#line 436
this.ScenarioSetup(scenarioInfo);
#line 438
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 439
 testRunner.When("In SELCOY01 I select the company: \"CPU_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 440
  testRunner.And("In MNS00101 I click on: \"online data entry system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 441
  testRunner.And("In OLS00101 I Click on: \"housekeeping transactions\" with in the online data entry" +
                    " system menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelCode"});
            table34.AddRow(new string[] {
                        string.Format("{0}", selCode)});
#line 442
  testRunner.And("In SELTRN20 I continue with the following details:", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransNumber",
                        "FromNameKey",
                        "ClassCode"});
            table35.AddRow(new string[] {
                        string.Format("{0}", transNumber),
                        string.Format("{0}", fromNameKey),
                        string.Format("{0}", classCode)});
#line 445
  testRunner.And("In OLS03402 I continue with the following details:", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "FromNameKey",
                        "ClassCode",
                        "OldRegisterCode",
                        "OldRegisterDesc",
                        "NewRegisterCode"});
            table36.AddRow(new string[] {
                        string.Format("{0}", fromNameKey),
                        string.Format("{0}", classCode),
                        string.Format("{0}", oldRegisterCode),
                        string.Format("{0}", oldRegisterDesc),
                        string.Format("{0}", newRegisterCode)});
#line 448
  testRunner.And("In OLS03405 I continue with the following details:", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "FromNameKey",
                        "ClassCode",
                        "OldRegisterCode",
                        "OldRegisterDesc",
                        "NewRegisterCode",
                        "NRegisterDesc"});
            table37.AddRow(new string[] {
                        string.Format("{0}", fromNameKey),
                        string.Format("{0}", classCode),
                        string.Format("{0}", oldRegisterCode),
                        string.Format("{0}", oldRegisterDesc),
                        string.Format("{0}", newRegisterCode),
                        string.Format("{0}", nRegisterDesc)});
#line 451
  testRunner.And("In OLS03408 I verify the following details:", ((string)(null)), table37, "And ");
#line 454
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 455
 testRunner.When("In SELCOY01 I select the company: \"CPU_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 456
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", fromNameKey), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 457
  testRunner.And(string.Format("I enter the following details as the Locate action \"{0}\" \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "CertificateLine1",
                        "CertificateLine2",
                        "CertificateLine3",
                        "CertificateLine4",
                        "CertificateLine5",
                        "CertificateLine6",
                        "CertificateLine7",
                        "CertificateLine8",
                        "CertificateLine9",
                        "CertificateLine10"});
            table38.AddRow(new string[] {
                        string.Format("{0}", certificateLine1),
                        string.Format("{0}", certificateLine2),
                        string.Format("{0}", certificateLine3),
                        string.Format("{0}", certificateLine4),
                        string.Format("{0}", certificateLine5),
                        string.Format("{0}", certificateLine6),
                        string.Format("{0}", certificateLine7),
                        string.Format("{0}", certificateLine8),
                        string.Format("{0}", certificateLine9),
                        string.Format("{0}", certificateLine10)});
#line 458
 testRunner.Then("In ENS01013 I should see Register details as:", ((string)(null)), table38, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TestCase31324_BCCHG Transaction")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("OL_Online")]
        [NUnit.Framework.CategoryAttribute("CPU_AUTO")]
        [NUnit.Framework.CategoryAttribute("31324")]
        [NUnit.Framework.CategoryAttribute("OL_HKT_HousekeepingTransactions")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.TestCaseAttribute("Test2", "BCCHG", "X0053284990", "3664", "11948885", "S", "3383", "1543", "FP", "VIC", "3383", "1543", "R", "/FP", ">", "", "E00029344        3383", "E00029344        1543", "", "", null)]
        public virtual void TestCase31324_BCCHGTransaction(
                    string test, 
                    string selCode, 
                    string holderIdentifier, 
                    string runNumber, 
                    string transferNumber, 
                    string buyORSell, 
                    string oldBrokerCode, 
                    string newBrokerCode, 
                    string classCode, 
                    string registerCode, 
                    string cBrokerCode, 
                    string nBrokerCode, 
                    string action, 
                    string locateArgument, 
                    string action1, 
                    string extraCertDetails1, 
                    string extraCertDetails2, 
                    string extraCertDetails3, 
                    string extraCertDetails4, 
                    string extraCertDetails5, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "OL_Online",
                    "CPU_AUTO",
                    "31324",
                    "OL_HKT_HousekeepingTransactions",
                    "FullSmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TestCase31324_BCCHG Transaction", @__tags);
#line 473
this.ScenarioSetup(scenarioInfo);
#line 475
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 476
 testRunner.When("In SELCOY01 I select the company: \"CPU_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 477
  testRunner.And("In MNS00101 I click on: \"online data entry system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 478
  testRunner.And("In OLS00101 I Click on: \"housekeeping transactions\" with in the online data entry" +
                    " system menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelCode"});
            table39.AddRow(new string[] {
                        string.Format("{0}", selCode)});
#line 479
  testRunner.And("In SELTRN20 I continue with the following details:", ((string)(null)), table39, "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "HolderIdentifier",
                        "RunNumber",
                        "TransferNumber",
                        "BuyORSell",
                        "OldBrokerCode",
                        "NewBrokerCode"});
            table40.AddRow(new string[] {
                        string.Format("{0}", holderIdentifier),
                        string.Format("{0}", runNumber),
                        string.Format("{0}", transferNumber),
                        string.Format("{0}", buyORSell),
                        string.Format("{0}", oldBrokerCode),
                        string.Format("{0}", newBrokerCode)});
#line 482
  testRunner.And("In OLS03705 I continue with the following details:", ((string)(null)), table40, "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "ClassCode",
                        "RegisterCode",
                        "TransferNumber",
                        "CBrokerCode",
                        "NBrokerCode"});
            table41.AddRow(new string[] {
                        string.Format("{0}", classCode),
                        string.Format("{0}", registerCode),
                        string.Format("{0}", transferNumber),
                        string.Format("{0}", cBrokerCode),
                        string.Format("{0}", nBrokerCode)});
#line 485
  testRunner.And("In OLS03706 I verify the following details:", ((string)(null)), table41, "And ");
#line 488
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 489
 testRunner.When("In SELCOY01 I select the company: \"CPU_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 490
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", holderIdentifier), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 491
  testRunner.And(string.Format("I enter the following details as the Locate action \"{0}\" \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 492
  testRunner.And(string.Format("I enter the following details as the Locate action \"{0}\" \"{1}\"", action1, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "ExtraCertDetails1",
                        "ExtraCertDetails2",
                        "ExtraCertDetails3",
                        "ExtraCertDetails4",
                        "ExtraCertDetails5"});
            table42.AddRow(new string[] {
                        string.Format("{0}", extraCertDetails1),
                        string.Format("{0}", extraCertDetails2),
                        string.Format("{0}", extraCertDetails3),
                        string.Format("{0}", extraCertDetails4),
                        string.Format("{0}", extraCertDetails5)});
#line 493
  testRunner.And("In ENS01053 I verify the following details:", ((string)(null)), table42, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DividendplanIntention_Transactions")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("OL_Online")]
        [NUnit.Framework.CategoryAttribute("ANZ_AUTO")]
        [NUnit.Framework.CategoryAttribute("21093")]
        [NUnit.Framework.CategoryAttribute("21094")]
        [NUnit.Framework.CategoryAttribute("OL_DPM_DividendPlanMaintenance")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.TestCaseAttribute("Test1", "DIVIT", "s", "X0012230125", "U", "", "42420", "", "P", "", "", "", "", "30", "", "", "", "", "F", "", "", "", "", "", "", "", "", "", "D", "", "DI", "", "BOP1  1   BOP                                                              Y", "", "", "", "BOP5  5   BONUS PLAN   NON PARTICIPANT", "DRP1  1   DRP          20/07/15            7929      9865    F             N", "DPN2  2   DRP PLAN     NON PARTICIPANT", "DPN3  3   DRP PLAN     NON PARTICIPANT", "DPN4  4   DRP PLAN     NON PARTICIPANT", "DPN5  5   DRP PLAN     NON PARTICIPANT", null)]
        public virtual void DividendplanIntention_Transactions(
                    string test, 
                    string selCode, 
                    string action, 
                    string searchData, 
                    string action1, 
                    string searchData1, 
                    string transNumber, 
                    string date, 
                    string bspOpt1, 
                    string bspOpt2, 
                    string bspOpt3, 
                    string bspOpt4, 
                    string bspOpt5, 
                    string bspLev1, 
                    string bspLev2, 
                    string bspLev3, 
                    string bspLev4, 
                    string bspLev5, 
                    string drpOpt1, 
                    string drpOpt2, 
                    string drpOpt3, 
                    string drpOpt4, 
                    string drpOpt5, 
                    string drpLev1, 
                    string drpLev2, 
                    string drpLev3, 
                    string drpLev4, 
                    string drpLev5, 
                    string sourceOption, 
                    string confirm, 
                    string action2, 
                    string locateArgument, 
                    string bspLine1, 
                    string bspLine2, 
                    string bspLine3, 
                    string bspLine4, 
                    string bspLine5, 
                    string drpLine1, 
                    string drpLine2, 
                    string drpLine3, 
                    string drpLine4, 
                    string drpLine5, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "OL_Online",
                    "ANZ_AUTO",
                    "21093",
                    "21094",
                    "OL_DPM_DividendPlanMaintenance",
                    "FullSmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DividendplanIntention_Transactions", @__tags);
#line 508
this.ScenarioSetup(scenarioInfo);
#line 511
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 512
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 513
  testRunner.And("In MNS00101 I click on: \"online data entry system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 514
  testRunner.And("In OLS00101 I Click on: \"dividend plan maintenance\" with in the online data entry" +
                    " system menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelCode"});
            table43.AddRow(new string[] {
                        string.Format("{0}", selCode)});
#line 515
  testRunner.And("In SELTRN20 I continue with the following details:", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "SearchData"});
            table44.AddRow(new string[] {
                        string.Format("{0}", action),
                        string.Format("{0}", searchData)});
#line 518
  testRunner.And("In OLS01511 I continue with the following details:", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action",
                        "SearchData"});
            table45.AddRow(new string[] {
                        string.Format("{0}", action1),
                        string.Format("{0}", searchData1)});
#line 521
  testRunner.And("In OLS01511 I continue with the following details:", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransNumber",
                        "Date",
                        "BspOpt1",
                        "BspOpt2",
                        "BspOpt3",
                        "BspOpt4",
                        "BspOpt5",
                        "BspLev1",
                        "BspLev2",
                        "BspLev3",
                        "BspLev4",
                        "BspLev5",
                        "DrpOpt1",
                        "DrpOpt2",
                        "DrpOpt3",
                        "DrpOpt4",
                        "DrpOpt5",
                        "DrpLev1",
                        "DrpLev2",
                        "DrpLev3",
                        "DrpLev4",
                        "DrpLev5",
                        "SourceOption"});
            table46.AddRow(new string[] {
                        string.Format("{0}", transNumber),
                        string.Format("{0}", date),
                        string.Format("{0}", bspOpt1),
                        string.Format("{0}", bspOpt2),
                        string.Format("{0}", bspOpt3),
                        string.Format("{0}", bspOpt4),
                        string.Format("{0}", bspOpt5),
                        string.Format("{0}", bspLev1),
                        string.Format("{0}", bspLev2),
                        string.Format("{0}", bspLev3),
                        string.Format("{0}", bspLev4),
                        string.Format("{0}", bspLev5),
                        string.Format("{0}", drpOpt1),
                        string.Format("{0}", drpOpt2),
                        string.Format("{0}", drpOpt3),
                        string.Format("{0}", drpOpt4),
                        string.Format("{0}", drpOpt5),
                        string.Format("{0}", drpLev1),
                        string.Format("{0}", drpLev2),
                        string.Format("{0}", drpLev3),
                        string.Format("{0}", drpLev4),
                        string.Format("{0}", drpLev5),
                        string.Format("{0}", sourceOption)});
#line 524
  testRunner.And("In OLS01501 I continue with the following details:", ((string)(null)), table46, "And ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "Confirm"});
            table47.AddRow(new string[] {
                        string.Format("{0}", confirm)});
#line 527
  testRunner.And("In OLS01502 I continue with the following details:", ((string)(null)), table47, "And ");
#line 530
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 531
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 532
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 533
  testRunner.And(string.Format("I enter the following details as the Locate action \"{0}\" \"{1}\"", action2, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "BspLine1",
                        "BspLine2",
                        "BspLine3",
                        "BspLine4",
                        "BspLine5",
                        "SourceOption",
                        "DrpLine1",
                        "DrpLine2",
                        "DrpLine3",
                        "DrpLine4",
                        "DrpLine5"});
            table48.AddRow(new string[] {
                        string.Format("{0}", bspLine1),
                        string.Format("{0}", bspLine2),
                        string.Format("{0}", bspLine3),
                        string.Format("{0}", bspLine4),
                        string.Format("{0}", bspLine5),
                        string.Format("{0}", sourceOption),
                        string.Format("{0}", drpLine1),
                        string.Format("{0}", drpLine2),
                        string.Format("{0}", drpLine3),
                        string.Format("{0}", drpLine4),
                        string.Format("{0}", drpLine5)});
#line 534
 testRunner.Then("In ENS01060 I verify the following details:", ((string)(null)), table48, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Testcase21334_MNYIN_Transaction")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("OL_Online")]
        [NUnit.Framework.CategoryAttribute("ANZ_AUTO")]
        [NUnit.Framework.CategoryAttribute("21334")]
        [NUnit.Framework.CategoryAttribute("OL_DPM_DividendPlanMaintenance")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.TestCaseAttribute("Test3", "MNYIN", "42425", "", "66.66", "DRP1", "X0012230125", "DRP", "Z", "DRP RESIDUAL (ORD)", "19/07/2015", "C", "/Z", "Z  /DRP RESIDUAL (ORD)", "*MR MONEY L/OVER 19/07/15         66.66", "**** Total for MONEY L/OVER            66.66", "", "", "", "", "", "", "", null)]
        public virtual void Testcase21334_MNYIN_Transaction(
                    string test, 
                    string selCode, 
                    string transNumber, 
                    string lodgeDate, 
                    string totalUnits, 
                    string buyPlan, 
                    string buyer, 
                    string buyPlanDesc, 
                    string buyClass, 
                    string buyClassDesc, 
                    string buyDate, 
                    string action, 
                    string locateArgument, 
                    string certificateLine1, 
                    string certificateLine2, 
                    string certificateLine3, 
                    string certificateLine4, 
                    string certificateLine5, 
                    string certificateLine6, 
                    string certificateLine7, 
                    string certificateLine8, 
                    string certificateLine9, 
                    string certificateLine10, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "OL_Online",
                    "ANZ_AUTO",
                    "21334",
                    "OL_DPM_DividendPlanMaintenance",
                    "FullSmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testcase21334_MNYIN_Transaction", @__tags);
#line 550
this.ScenarioSetup(scenarioInfo);
#line 552
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 553
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 554
  testRunner.And("In MNS00101 I click on: \"online data entry system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 555
  testRunner.And("In OLS00101 I Click on: \"dividend plan maintenance\" with in the online data entry" +
                    " system menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelCode"});
            table49.AddRow(new string[] {
                        string.Format("{0}", selCode)});
#line 556
  testRunner.And("In SELTRN20 I continue with the following details:", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransNumber",
                        "LodgeDate",
                        "TotalUnits",
                        "BuyPlan",
                        "Buyer"});
            table50.AddRow(new string[] {
                        string.Format("{0}", transNumber),
                        string.Format("{0}", lodgeDate),
                        string.Format("{0}", totalUnits),
                        string.Format("{0}", buyPlan),
                        string.Format("{0}", buyer)});
#line 559
  testRunner.And("In OLS05001 I continue with the following details:", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "BuyPlan",
                        "BuyPlanDesc",
                        "BuyClass",
                        "BuyClassDesc",
                        "Buyer",
                        "BuyDate"});
            table51.AddRow(new string[] {
                        string.Format("{0}", buyPlan),
                        string.Format("{0}", buyPlanDesc),
                        string.Format("{0}", buyClass),
                        string.Format("{0}", buyClassDesc),
                        string.Format("{0}", buyer),
                        string.Format("{0}", buyDate)});
#line 562
  testRunner.And("In OLS05002 I continue with the following details:", ((string)(null)), table51, "And ");
#line 565
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 566
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 567
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", buyer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 568
  testRunner.And(string.Format("I enter the following details as the Locate action \"{0}\" \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "CertificateLine1",
                        "CertificateLine2",
                        "CertificateLine3",
                        "CertificateLine4",
                        "CertificateLine5",
                        "CertificateLine6",
                        "CertificateLine7",
                        "CertificateLine8",
                        "CertificateLine9",
                        "CertificateLine10"});
            table52.AddRow(new string[] {
                        string.Format("{0}", certificateLine1),
                        string.Format("{0}", certificateLine2),
                        string.Format("{0}", certificateLine3),
                        string.Format("{0}", certificateLine4),
                        string.Format("{0}", certificateLine5),
                        string.Format("{0}", certificateLine6),
                        string.Format("{0}", certificateLine7),
                        string.Format("{0}", certificateLine8),
                        string.Format("{0}", certificateLine9),
                        string.Format("{0}", certificateLine10)});
#line 569
 testRunner.Then("In ENS01012 I should see Register details as:", ((string)(null)), table52, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 35219: 1_LPE. Lapse Options - Employee Initiated")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("NAB2_AUTO")]
        [NUnit.Framework.CategoryAttribute("35219")]
        [NUnit.Framework.CategoryAttribute("EP_EmployeePlanProcessing")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.TestCaseAttribute("OPT-Partial", "OPT", "312020", "20/08/2015", "N", "500", "I0036135191", "", "250", "", "250", "", "500", "500", "ESOB", "/OPT", "EXECUTIVE SHARE OPTION PLAN #2", "13A EE   01/01/2013 HK Def         1000         750           0         750      " +
            "     0           0           0         250", "14A EX   01/02/2014 HK Def         1000         750           0         750      " +
            "     0           0           0         250", "", "** Totals        2000        1500           0        1500           0           0" +
            "           0         500", null)]
        public virtual void TestCase352191_LPE_LapseOptions_EmployeeInitiated(
                    string test, 
                    string classCode, 
                    string transNumber, 
                    string transDate, 
                    string lapseCancelAll, 
                    string totalUnits, 
                    string searchName, 
                    string unvested1, 
                    string vested1, 
                    string unvested2, 
                    string vested2, 
                    string totalUnvested, 
                    string totalVested, 
                    string grandTotal, 
                    string action, 
                    string locateArgument, 
                    string planDesc, 
                    string bLine1, 
                    string bLine2, 
                    string bLine3, 
                    string bLine4, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "NAB2_AUTO",
                    "35219",
                    "EP_EmployeePlanProcessing",
                    "FullSmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 35219: 1_LPE. Lapse Options - Employee Initiated", @__tags);
#line 584
this.ScenarioSetup(scenarioInfo);
#line 586
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 587
 testRunner.When("In SELCOY01 I select the company: \"NAB2_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 588
  testRunner.And(string.Format("I go to the Employee Scheme Processing Menu \"{0}\"", classCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 589
  testRunner.And("In EOL00107 I Click on \"lapse cancellation processing\" Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 590
  testRunner.And("In EOL00132 I Click on \"lapse options employee initiated\" Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 591
  testRunner.And(string.Format("In EOL02801 I Perform Options Lapse Transaction as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" " +
                        "\"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\"", transNumber, transDate, lapseCancelAll, totalUnits, searchName, unvested1, vested1, unvested2, vested2, totalUnvested, totalVested, grandTotal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 592
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 593
 testRunner.When("In SELCOY01 I select the company: \"NAB2_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 594
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 595
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 596
 testRunner.Then(string.Format("In ENSESS24 I should see Options Balance as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\"", classCode, planDesc, bLine1, bLine2, bLine3, bLine4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 35313: 1_RVE. ESS Option Exercise Reversal")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("NAB2_AUTO")]
        [NUnit.Framework.CategoryAttribute("35313")]
        [NUnit.Framework.CategoryAttribute("EP_EmployeePlanProcessing")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.TestCaseAttribute("OPT-EE", "OPT", "EE", "13A", "312041", "1000", "7841", "79269020", "I0035984992", "ESOB", "/OPT", "EXECUTIVE SHARE OPTION PLAN #2", "13A EE   01/01/2013 HK Def         1000           0           0           0      " +
            "     0        1000           0           0", "", "** Totals        1000           0           0           0           0        1000" +
            "           0           0", "", "13A EE   01/01/2013 HK Def         1000        1000           0        1000      " +
            "     0           0           0           0", "", "** Totals        1000        1000           0        1000           0           0" +
            "           0           0", "", null)]
        public virtual void TestCase353131_RVE_ESSOptionExerciseReversal(
                    string test, 
                    string classCode, 
                    string selection, 
                    string registerCode, 
                    string transNumber, 
                    string totalUnits, 
                    string rvsalRunNumber, 
                    string rvsalTransNumber, 
                    string searchName, 
                    string action, 
                    string locateArgument, 
                    string planDesc, 
                    string beforeLine1, 
                    string beforeLine2, 
                    string beforeLine3, 
                    string beforeLine4, 
                    string bLine1, 
                    string bLine2, 
                    string bLine3, 
                    string bLine4, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "NAB2_AUTO",
                    "35313",
                    "EP_EmployeePlanProcessing",
                    "FullSmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 35313: 1_RVE. ESS Option Exercise Reversal", @__tags);
#line 609
this.ScenarioSetup(scenarioInfo);
#line 611
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 612
 testRunner.When("In SELCOY01 I select the company: \"NAB2_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 613
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 614
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 615
 testRunner.Then(string.Format("In ENSESS24 I should see Options Balance as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\"", classCode, planDesc, beforeLine1, beforeLine2, beforeLine3, beforeLine4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 616
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 617
 testRunner.When("In SELCOY01 I select the company: \"NAB2_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 618
  testRunner.And(string.Format("I go to the Employee Scheme Processing Menu \"{0}\"", classCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 619
  testRunner.And("In EOL00107 I Click on \"ess option exercise reversal\" Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 620
  testRunner.And(string.Format("In EOL00401 I perform Exercise Reversal Transaction as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{" +
                        "4}\" \"{5}\"", selection, registerCode, transNumber, totalUnits, rvsalRunNumber, rvsalTransNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 621
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 622
 testRunner.When("In SELCOY01 I select the company: \"NAB2_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 623
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 624
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 625
 testRunner.Then(string.Format("In ENSESS24 I should see Options Balance as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\"", classCode, planDesc, bLine1, bLine2, bLine3, bLine4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 35346: 1_ADD. Add Holder Event")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("NAB2_AUTO")]
        [NUnit.Framework.CategoryAttribute("35346")]
        [NUnit.Framework.CategoryAttribute("EP_EmployeePlanProcessing")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.TestCaseAttribute("Options Plan", "OPT", "4", "UPD", "ADD", "312045", "I0033504021", "21A", "21A", "20150501EE", "20150501EX", "1000", "1000", "1000", "1000", "Y", "Y", "2000", "2000", "EETD", "/OPT", "EXECUTIVE SHARE OPTION PLAN #2", "21A  EX     01/05/2015  01/01/2020  DS5    V            0.000000                 " +
            "    No", "21A  EE     01/05/2015  01/01/2020  DS5    V            0.000000                 " +
            "    No", "", "", "", "2000", "2000", "V/DS5  21A  EX   01/01/2020  01/05/2015  Current   Not Recvd   Not Actioned    E", "V/DS5  21A  EE   01/01/2020  01/05/2015  Current   Not Recvd   Not Actioned    E", "", "", "", "ESEH", null)]
        public virtual void TestCase353461_ADD_AddHolderEvent(
                    string test, 
                    string classCode, 
                    string eventNumber, 
                    string selection, 
                    string selection1, 
                    string transNumber, 
                    string searchName, 
                    string registerCode1, 
                    string registerCode2, 
                    string certID1, 
                    string certID2, 
                    string eventUnits1, 
                    string eventUnits2, 
                    string currentBal1, 
                    string currentBal2, 
                    string selectionInd1, 
                    string selectionInd2, 
                    string totEventUnits, 
                    string totCurrentBal, 
                    string action, 
                    string locateArgument, 
                    string schemeName, 
                    string detailLine1, 
                    string detailLine2, 
                    string detailLine3, 
                    string detailLine4, 
                    string detailLine5, 
                    string totEventUnits1, 
                    string totCurrentBal1, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string action1, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "NAB2_AUTO",
                    "35346",
                    "EP_EmployeePlanProcessing",
                    "FullSmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 35346: 1_ADD. Add Holder Event", @__tags);
#line 638
this.ScenarioSetup(scenarioInfo);
#line 640
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 641
 testRunner.When("In SELCOY01 I select the company: \"NAB2_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 642
  testRunner.And(string.Format("I go to the Employee Scheme Processing Menu \"{0}\"", classCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 643
  testRunner.And("In EOL00107 I Click on \"event processing\" Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 644
  testRunner.And(string.Format("In EOL03301 I Add Event details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\" \"{7}" +
                        "\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"{17}\" \"{18}\"", eventNumber, selection, selection1, transNumber, searchName, registerCode1, registerCode2, certID1, certID2, eventUnits1, eventUnits2, currentBal1, currentBal2, selectionInd1, selectionInd2, totEventUnits, totCurrentBal, totEventUnits1, totCurrentBal1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 645
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 646
 testRunner.When("In SELCOY01 I select the company: \"NAB2_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 647
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 648
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 649
 testRunner.Then(string.Format("In ENSESS51 In should see Event Tax Details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\"", classCode, schemeName, detailLine1, detailLine2, detailLine3, detailLine4, detailLine5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 650
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action1, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 651
 testRunner.Then(string.Format("In ENSESS40 I should see Event History Details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"" +
                        "{5}\" \"{6}\"", classCode, schemeName, line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 36805: 6_ELA. Add Holder Election Details")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("NAB2_AUTO")]
        [NUnit.Framework.CategoryAttribute("36805")]
        [NUnit.Framework.CategoryAttribute("EP_EmployeePlanProcessing")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTestTemp")]
        [NUnit.Framework.TestCaseAttribute("OPT-Exer-Sell All1", "OPT", "4", "UPD", "ELA", "24729", "I0035120696", "A", "2000", "", "D", "21A", "21A", "20150501EE", "20150501EX", "1000", "1000", "1000", "1000", "", "", "2000", "2000", "", "EETD", "/OPT", "EXECUTIVE SHARE OPTION PLAN #2", "21A  EX     01/05/2015  01/01/2020  DS5    V            0.000000                 " +
            "    No", "21A  EE     01/05/2015  01/01/2020  DS5    V            0.000000                 " +
            "    No", "", "", "", "ESEH", "V/DS5  21A  EX   01/01/2020  01/05/2015  Current   Received    Not Actioned    E " +
            "     Exer-Sell All       Direct Credit", "V/DS5  21A  EE   01/01/2020  01/05/2015  Current   Received    Not Actioned    E " +
            "     Exer-Sell All       Direct Credit", "", "", "", "", null)]
        public virtual void TestCase368056_ELA_AddHolderElectionDetails(
                    string test, 
                    string classCode, 
                    string eventNumber, 
                    string selection, 
                    string menuItem, 
                    string transNumber, 
                    string searchName, 
                    string disposalChoice, 
                    string exerciseUnits, 
                    string partialUnits, 
                    string pymtMthd, 
                    string registerCode1, 
                    string registerCode2, 
                    string certID1, 
                    string certID2, 
                    string eventUnits1, 
                    string eventUnits2, 
                    string exerciseBal1, 
                    string exerciseBal2, 
                    string currentBal1, 
                    string currentBal2, 
                    string totEventUnits, 
                    string totExerciseUnits, 
                    string totCurrentBal, 
                    string action, 
                    string locateArgument, 
                    string schemeName, 
                    string detailLine1, 
                    string detailLine2, 
                    string detailLine3, 
                    string detailLine4, 
                    string detailLine5, 
                    string action1, 
                    string line1, 
                    string line2, 
                    string line3, 
                    string line4, 
                    string line5, 
                    string currencyCode, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "NAB2_AUTO",
                    "36805",
                    "EP_EmployeePlanProcessing",
                    "FullSmokeTest",
                    "SmokeTestTemp"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 36805: 6_ELA. Add Holder Election Details", @__tags);
#line 665
this.ScenarioSetup(scenarioInfo);
#line 666
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 667
 testRunner.When("In SELCOY01 I select the company: \"NAB2_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 668
  testRunner.And(string.Format("I go to the Employee Scheme Processing Menu \"{0}\"", classCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 669
  testRunner.And("In EOL00107 I Click on \"event processing\" Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 670
  testRunner.And(string.Format("In EOL00135 I Select Menu item as \"{0}\" \"{1}\" \"{2}\"", eventNumber, selection, menuItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 671
  testRunner.And(string.Format("In EOL03401 I Select Holder as \"{0}\" \"{1}\"", transNumber, searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 672
  testRunner.And(string.Format("In EOL03401 I Add/Modify Event Election Details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" " +
                        "\"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"{12}\" \"{13}\" \"{14}\" \"{15}\" \"{16}\" \"" +
                        "{17}\"", disposalChoice, exerciseUnits, partialUnits, pymtMthd, currencyCode, registerCode1, registerCode2, certID1, certID2, eventUnits1, eventUnits2, exerciseBal1, exerciseBal2, currentBal1, currentBal2, totEventUnits, totExerciseUnits, totCurrentBal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 673
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 674
 testRunner.When("In SELCOY01 I select the company: \"NAB2_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 675
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", searchName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 676
  testRunner.And(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 677
 testRunner.Then(string.Format("In ENSESS51 In should see Event Tax Details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}" +
                        "\" \"{6}\"", classCode, schemeName, detailLine1, detailLine2, detailLine3, detailLine4, detailLine5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 678
 testRunner.When(string.Format("I enter the following details as the locatActions \"{0}\"  \"{1}\"", action1, locateArgument), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 679
 testRunner.Then(string.Format("In ENSESS40 I should see Event History Details as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"" +
                        "{5}\" \"{6}\"", classCode, schemeName, line1, line2, line3, line4, line5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 16961: 04_A action with Extra Details_Dot")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("EnquiryTest")]
        [NUnit.Framework.CategoryAttribute("NAB_AUTO")]
        [NUnit.Framework.CategoryAttribute("16961")]
        [NUnit.Framework.CategoryAttribute("EN_E_DisplayActions")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        [NUnit.Framework.CategoryAttribute("SmokeTestTemp")]
        [NUnit.Framework.TestCaseAttribute("I0030124936", "24/06/1996", "23/07/2001", "24/06/1996", "6", "5284", "0", "0", "I0033340800", "", null)]
        public virtual void TestCase1696104_AActionWithExtraDetails_Dot(string hIN, string holderOnDate, string holderOffDate, string holderAddedDate, string version, string runLastChange, string lastBalDump, string lastPaymentDump, string mergeTo, string mergeFrom, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "EnquiryTest",
                    "NAB_AUTO",
                    "16961",
                    "EN_E_DisplayActions",
                    "FullSmokeTest",
                    "SmokeTestTemp"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 16961: 04_A action with Extra Details_Dot", @__tags);
#line 693
this.ScenarioSetup(scenarioInfo);
#line 694
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 695
 testRunner.When("In SELCOY01 I select the company: \"NAB_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 696
  testRunner.And(string.Format("I go to the Enquiry system and Search {0}", hIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table53.AddRow(new string[] {
                        "Action",
                        "A"});
            table53.AddRow(new string[] {
                        "Locate Argument",
                        ""});
#line 697
  testRunner.And("I enter the following details as the Locate action:", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table54.AddRow(new string[] {
                        "Action",
                        "."});
            table54.AddRow(new string[] {
                        "Locate Argument",
                        ""});
#line 701
  testRunner.And("I enter the following details as the Locate action:", ((string)(null)), table54, "And ");
#line 705
 testRunner.Then(string.Format("In ENS01052 I should see NameAddress Extra Details as below \"{0}\" \"{1}\" \"{2}\" \"{3" +
                        "}\" \"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\"", hIN, holderOnDate, holderOffDate, holderAddedDate, version, runLastChange, lastBalDump, lastPaymentDump, mergeTo, mergeFrom), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table55.AddRow(new string[] {
                        "Action",
                        ">"});
            table55.AddRow(new string[] {
                        "Locate Argument",
                        ""});
#line 706
 testRunner.When("I enter the following details as the Locate action:", ((string)(null)), table55, "When ");
#line 710
 testRunner.Then(string.Format("In ENS01052 I should see NameAddress Extra Details as below \"{0}\" \"{1}\" \"{2}\" \"{3" +
                        "}\" \"{4}\" \"{5}\" \"{6}\" \"{7}\" \"{8}\" \"{9}\"", hIN, holderOnDate, holderOffDate, holderAddedDate, version, runLastChange, lastBalDump, lastPaymentDump, mergeTo, mergeFrom), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
