// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SCRIPAU.Automation.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OL_NegativeTest")]
    public partial class OL_NegativeTestFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OL_NegativeTest.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OL_NegativeTest", "Ensure OL_NegativeTest functionality covered", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 18133: 05 - Search by Holder not on Files")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("OL_NegativeTest")]
        [NUnit.Framework.CategoryAttribute("17477")]
        [NUnit.Framework.CategoryAttribute("NAB_AUTO")]
        [NUnit.Framework.TestCaseAttribute("Test1", "Enter a Holder ID or Holder Name for a search", "", null)]
        [NUnit.Framework.TestCaseAttribute("Test2", "The code you are searching for is not on file.", "C19", null)]
        [NUnit.Framework.TestCaseAttribute("Test3", "The code you are searching for is not on file.", "C345345", null)]
        [NUnit.Framework.TestCaseAttribute("Test4", "The code you are searching for is not on file.", "^&$%&^", null)]
        public virtual void TestCase1813305_SearchByHolderNotOnFiles(string test, string errorMessage, string searchData, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "OL_NegativeTest",
                    "17477",
                    "NAB_AUTO"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 18133: 05 - Search by Holder not on Files", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.When("In SELCOY01 I select the company: \"NAB_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
  testRunner.And("I go to the Static Details Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
  testRunner.And(string.Format("OLS01101 I Search the holder as \"{0}\"", searchData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.Then(string.Format("I should see the below ErrorMessage \"{0}\"", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 20162: 01 - Charity Election(CY) - Add when Company is not enable for c" +
            "harity")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("OL_NegativeTest")]
        [NUnit.Framework.CategoryAttribute("20162")]
        [NUnit.Framework.CategoryAttribute("CPU_AUTO")]
        [NUnit.Framework.CategoryAttribute("FullSmokeTest")]
        public virtual void TestCase2016201_CharityElectionCY_AddWhenCompanyIsNotEnableForCharity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 20162: 01 - Charity Election(CY) - Add when Company is not enable for c" +
                    "harity", new string[] {
                        "winformsTest",
                        "OL_NegativeTest",
                        "20162",
                        "CPU_AUTO",
                        "FullSmokeTest"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.When("In SELCOY01 I select the company: \"CPU_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
  testRunner.And("I go to the Static Details Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Action",
                        "S"});
            table1.AddRow(new string[] {
                        "UpdateOption",
                        "X0028384483"});
#line 32
  testRunner.And("In OLS01101 I enter following details as the update option as below:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "Action",
                        "U"});
            table2.AddRow(new string[] {
                        "UpdateOption",
                        "CY"});
#line 36
  testRunner.And("In OLS01101 I enter following details as the update option as below:", ((string)(null)), table2, "And ");
#line 40
 testRunner.Then("I expect to see error with text \"This company does NOT process Charity Elections." +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 20164: 02 - Charity Election (CY) -Add  to a holder without any holding" +
            "s")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("OL_NegativeTest")]
        [NUnit.Framework.CategoryAttribute("20164")]
        [NUnit.Framework.CategoryAttribute("ANZ_AUTO")]
        public virtual void TestCase2016402_CharityElectionCY_AddToAHolderWithoutAnyHoldings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 20164: 02 - Charity Election (CY) -Add  to a holder without any holding" +
                    "s", new string[] {
                        "winformsTest",
                        "OL_NegativeTest",
                        "20164",
                        "ANZ_AUTO"});
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
  testRunner.And("I go to the Static Details Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Action",
                        "S"});
            table3.AddRow(new string[] {
                        "UpdateOption",
                        "I7777777704"});
#line 50
  testRunner.And("In OLS01101 I enter following details as the update option as below:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Action",
                        "U"});
            table4.AddRow(new string[] {
                        "UpdateOption",
                        "CY"});
#line 54
  testRunner.And("In OLS01101 I enter following details as the update option as below:", ((string)(null)), table4, "And ");
#line 58
 testRunner.Then("I expect to see error with text \"This holder does not hold any class(es) that can" +
                    "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 20168: 03 - Charity Election(CY) - Error messages related to class on O" +
            "LS03501 form")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("OL_NegativeTest")]
        [NUnit.Framework.CategoryAttribute("20168")]
        [NUnit.Framework.CategoryAttribute("ANZ_AUTO")]
        [NUnit.Framework.TestCaseAttribute("Test1", "S", "X0058145238", "U", "CY", "A", "EXS", "Class not enabled for Charity Elections.", null)]
        [NUnit.Framework.TestCaseAttribute("Test2", "S", "X0058145238", "U", "CY", "A", "DEF", "Holder does not have/had shares in the nominated class.", null)]
        [NUnit.Framework.TestCaseAttribute("Test3", "S", "X0058145238", "U", "CY", "A", "ORD", "Charity Election already exists for this class.", null)]
        [NUnit.Framework.TestCaseAttribute("Test4", "S", "X0058145238", "U", "CY", "A", "AAA", "Class does not exist on CLSCDE.", null)]
        [NUnit.Framework.TestCaseAttribute("Test5", "S", "X0058145238", "U", "CY", "A", "", "Class must be entered.", null)]
        [NUnit.Framework.TestCaseAttribute("Test6", "S", "X0058145238", "U", "CY", "U", "", "Class must be entered.", null)]
        [NUnit.Framework.TestCaseAttribute("Test7", "S", "I0012857535", "U", "CY", "U", "ORD", "Charity Election does not exist for the entered class.", null)]
        public virtual void TestCase2016803_CharityElectionCY_ErrorMessagesRelatedToClassOnOLS03501Form(string test, string action, string updateOption, string action1, string updateOption1, string action2, string actionClass, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "OL_NegativeTest",
                    "20168",
                    "ANZ_AUTO"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 20168: 03 - Charity Election(CY) - Error messages related to class on O" +
                    "LS03501 form", @__tags);
#line 64
this.ScenarioSetup(scenarioInfo);
#line 65
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
  testRunner.And("I go to the Static Details Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
  testRunner.And(string.Format("In OLS01101 I enter following details as the update option \"{0}\" \"{1}\"", action, updateOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
  testRunner.And(string.Format("In OLS01101 I enter following details as the update option \"{0}\" \"{1}\"", action1, updateOption1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
  testRunner.And(string.Format("In OLS03501 I Enter Action Details as \"{0}\" \"{1}\"", action2, actionClass), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.Then(string.Format("I should see the below ErrorMessage \"{0}\"", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 20457: 08 - Load, Change & Generate FIN - Error Validation for Load CSN" +
            " FIN (OLS01630)")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("OL_NegativeTest")]
        [NUnit.Framework.CategoryAttribute("20457")]
        [NUnit.Framework.CategoryAttribute("ANZ_AUTO")]
        [NUnit.Framework.TestCaseAttribute("L0332849123", "S", "U", "FL", "29300", "123", "", "New FIN does not equal re-entered FIN", null)]
        [NUnit.Framework.TestCaseAttribute("L0332849123", "S", "U", "FL", "29300", "", "236", "New FIN does not equal re-entered FIN", null)]
        [NUnit.Framework.TestCaseAttribute("L0332849123", "S", "U", "FL", "29300", "235", "236", "New FIN does not equal re-entered FIN", null)]
        public virtual void TestCase2045708_LoadChangeGenerateFIN_ErrorValidationForLoadCSNFINOLS01630(string updateOption, string action, string action1, string updateOption1, string tran, string loadFIN, string validateFIN, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "OL_NegativeTest",
                    "20457",
                    "ANZ_AUTO"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 20457: 08 - Load, Change & Generate FIN - Error Validation for Load CSN" +
                    " FIN (OLS01630)", @__tags);
#line 105
this.ScenarioSetup(scenarioInfo);
#line 106
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
  testRunner.And("I go to the Static Details Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
  testRunner.And(string.Format("In Online Data Entry System I enter search option as \"{0}\" \"{1}\"", action, updateOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
  testRunner.And(string.Format("In Online Data Entry System I enter search option as \"{0}\" \"{1}\"", action1, updateOption1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
  testRunner.And(string.Format("In OLS01630 I Enter CSN FIN Details as \"{0}\" \"<HIN>\" \"{1}\" \"{2}\"", tran, loadFIN, validateFIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.Then(string.Format("I should see the below ErrorMessage \"{0}\"", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 20459: 05 - Load, Change & Generate FIN - Error Validation for Change F" +
            "IN (OLS01610)")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("OL_NegativeTest")]
        [NUnit.Framework.CategoryAttribute("20459")]
        [NUnit.Framework.CategoryAttribute("ANZ_AUTO")]
        [NUnit.Framework.TestCaseAttribute("Test1", "L0332187643", "S", "U", "FC", "29300", "", "", "", "Old FIN number invalid", null)]
        [NUnit.Framework.TestCaseAttribute("Test2", "L0332187643", "S", "U", "FC", "29300", "112", "1", "", "FIN does not match verification.", null)]
        [NUnit.Framework.TestCaseAttribute("Test3", "L0332187643", "S", "U", "FC", "29300", "112", "", "123", "New FIN number is zero", null)]
        [NUnit.Framework.TestCaseAttribute("Test4", "L0332187643", "S", "U", "FC", "29300", "112", "112", "123", "FIN does not match verification.", null)]
        [NUnit.Framework.TestCaseAttribute("Test5", "L0332187643", "S", "U", "FC", "29300", "112", "112", "", "FIN does not match verification.", null)]
        [NUnit.Framework.TestCaseAttribute("Test6", "L0332187643", "S", "U", "FC", "29300", "55", "112", "112", "Old FIN number invalid", null)]
        public virtual void TestCase2045905_LoadChangeGenerateFIN_ErrorValidationForChangeFINOLS01610(string test, string updateOption, string action, string action1, string updateOption1, string tran, string oldFIN, string newFIN, string validateFIN, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "OL_NegativeTest",
                    "20459",
                    "ANZ_AUTO"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 20459: 05 - Load, Change & Generate FIN - Error Validation for Change F" +
                    "IN (OLS01610)", @__tags);
#line 124
this.ScenarioSetup(scenarioInfo);
#line 125
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 126
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
  testRunner.And("I go to the Static Details Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
  testRunner.And(string.Format("In Online Data Entry System I enter search option as \"{0}\" \"{1}\"", action, updateOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
  testRunner.And(string.Format("In Online Data Entry System I enter search option as \"{0}\" \"{1}\"", action1, updateOption1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
  testRunner.And(string.Format("In OLS01610 I Change FIN details as \"{0}\" \"{1}\" \"{2}\" \"{3}\"", tran, oldFIN, newFIN, validateFIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.Then(string.Format("I should see the below ErrorMessage \"{0}\"", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 20733: 02 - Overseas Wire Instruction (WR) - Error Validation for Form " +
            "OLS04204")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("OL_NegativeTest")]
        [NUnit.Framework.CategoryAttribute("20733")]
        [NUnit.Framework.CategoryAttribute("ANZ_AUTO")]
        [NUnit.Framework.TestCaseAttribute("Test1", "GB", "X0044348586", "S", "U", "WR", "29607", "", "", "", "GBP", "", "", "", "", "", "", "BIC must be entered", null)]
        [NUnit.Framework.TestCaseAttribute("Test2", "GB", "X0044348586", "S", "U", "WR", "29607", "123", "", "", "GBP", "", "", "", "", "", "", "SWIFT code must be 8 or 11 characters", null)]
        [NUnit.Framework.TestCaseAttribute("Test3", "GB", "X0044348586", "S", "U", "WR", "29607", "RBSGB121", "", "", "GBP", "", "", "", "", "", "", "SWIFT code contains invalid characters", null)]
        [NUnit.Framework.TestCaseAttribute("Test4", "GB", "X0044348586", "S", "U", "WR", "29607", "RBOSGB12345", "24234234", "", "GBP", "", "", "", "", "", "", "IBAN validation cannot be performed", null)]
        [NUnit.Framework.TestCaseAttribute("Test5", "GB", "X0044348586", "S", "U", "WR", "29607", "RBOSGB12345", "", "", "GBP", "123546", "", "", "", "", "", "Bank code not on file", null)]
        [NUnit.Framework.TestCaseAttribute("Test6", "GB", "X0044348586", "S", "U", "WR", "29607", "RBOSGB12345", "", "", "GBP", "111111", "", "", "", "", "", "IBAN must be entered", null)]
        public virtual void TestCase2073302_OverseasWireInstructionWR_ErrorValidationForFormOLS04204(
                    string test, 
                    string countryCode, 
                    string updateOption, 
                    string action, 
                    string action1, 
                    string updateOption1, 
                    string tran, 
                    string sWIFTCode, 
                    string accountNumber, 
                    string accountName, 
                    string paymentCurrency, 
                    string bankCode, 
                    string bankName, 
                    string bankAddress1, 
                    string bankAddress2, 
                    string bankAddress3, 
                    string bankAddress4, 
                    string errorMessage, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "OL_NegativeTest",
                    "20733",
                    "ANZ_AUTO"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 20733: 02 - Overseas Wire Instruction (WR) - Error Validation for Form " +
                    "OLS04204", @__tags);
#line 164
this.ScenarioSetup(scenarioInfo);
#line 165
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 166
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 167
  testRunner.And("I go to the Static Details Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
  testRunner.And(string.Format("In Online Data Entry System I enter search option as \"{0}\" \"{1}\"", action, updateOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
  testRunner.And(string.Format("In Online Data Entry System I enter search option as \"{0}\" \"{1}\"", action1, updateOption1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
  testRunner.And(string.Format("In OLS04204 I add Wire Instructions as \"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\" \"{5}\" \"{6}\" " +
                        "\"{7}\" \"{8}\" \"{9}\" \"{10}\" \"{11}\" \"<Phone>\"", tran, countryCode, sWIFTCode, accountNumber, accountName, paymentCurrency, bankCode, bankName, bankAddress1, bankAddress2, bankAddress3, bankAddress4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 171
 testRunner.Then(string.Format("I should see the below ErrorMessage \"{0}\"", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 20707: 01 - Unconfirmed Deceased (UD) - not allowed with Holder Type CO" +
            "Y")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("OL_NegativeTest")]
        [NUnit.Framework.CategoryAttribute("20707")]
        [NUnit.Framework.CategoryAttribute("WES_AUTO")]
        [NUnit.Framework.TestCaseAttribute("X0032957455", "S", "U", "UD", "Cannot perform this transaction for COY Holders", null)]
        [NUnit.Framework.TestCaseAttribute("I0130613497", "S", "U", "UD", "Cannot perform this transaction for COY Holders", null)]
        public virtual void TestCase2070701_UnconfirmedDeceasedUD_NotAllowedWithHolderTypeCOY(string updateOption, string action, string action1, string updateOption1, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "OL_NegativeTest",
                    "20707",
                    "WES_AUTO"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 20707: 01 - Unconfirmed Deceased (UD) - not allowed with Holder Type CO" +
                    "Y", @__tags);
#line 187
this.ScenarioSetup(scenarioInfo);
#line 188
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 189
 testRunner.When("In SELCOY01 I select the company: \"WES_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 190
  testRunner.And("I go to the Static Details Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
  testRunner.And(string.Format("In Online Data Entry System I enter search option as \"{0}\" \"{1}\"", action, updateOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
  testRunner.And(string.Format("In Online Data Entry System I enter search option as \"{0}\" \"{1}\"", action1, updateOption1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
 testRunner.Then(string.Format("I should see the below ErrorMessage \"{0}\"", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 30716: 03 - OLS030 | Verify Lost SRN Replacement (ISLST) Warning Messag" +
            "e")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("CPU_AUTO")]
        [NUnit.Framework.CategoryAttribute("30716")]
        [NUnit.Framework.CategoryAttribute("OL_SDM_StaticDetailMaintenance")]
        [NUnit.Framework.TestCaseAttribute("Test1", "ISLST", "12222", "X0065502925", "Holder \"X0065502925\" is not an Issuer Sponsored holder", null)]
        [NUnit.Framework.TestCaseAttribute("Test2", "ISLST", "12222", "C0000001698", "Holder \"C0000001698\" is not an Issuer Sponsored holder", null)]
        public virtual void TestCase3071603_OLS030VerifyLostSRNReplacementISLSTWarningMessage(string test, string selCode, string tranNumber, string fromNameKey, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "CPU_AUTO",
                    "30716",
                    "OL_SDM_StaticDetailMaintenance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 30716: 03 - OLS030 | Verify Lost SRN Replacement (ISLST) Warning Messag" +
                    "e", @__tags);
#line 203
this.ScenarioSetup(scenarioInfo);
#line 204
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 205
 testRunner.When("In SELCOY01 I select the company: \"CPU_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 206
  testRunner.And("In MNS00101 I click on: \"online data entry system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
  testRunner.And("In OLS00101 I Click on: \"uncertificated transactions\" with in the online data ent" +
                    "ry system menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelCode"});
            table5.AddRow(new string[] {
                        string.Format("{0}", selCode)});
#line 208
  testRunner.And("In SELTRN20 I continue with the following details:", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "TranNumber",
                        "FromNameKey"});
            table6.AddRow(new string[] {
                        string.Format("{0}", tranNumber),
                        string.Format("{0}", fromNameKey)});
#line 211
  testRunner.And("IN OLS03001 I continue with the following details:", ((string)(null)), table6, "And ");
#line 214
 testRunner.Then(string.Format("I should see the below ErrorMessage \"{0}\"", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 19400: 05 - Confirmed Deceased (CD) - Error Validations for Deceased St" +
            "atus (OLS06801)")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("WES_AUTO")]
        [NUnit.Framework.CategoryAttribute("19400")]
        [NUnit.Framework.CategoryAttribute("OL_SDM_StaticDetailMaintenance")]
        [NUnit.Framework.TestCaseAttribute("S", "I0131544880", "U", "CD", "2222", "S", "Please enter either: <space>, C, U", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0131544880", "U", "CD", "2222", "", "Please reverse Unconfirmed Deceased with a UD transaction.", null)]
        public virtual void TestCase1940005_ConfirmedDeceasedCD_ErrorValidationsForDeceasedStatusOLS06801(string action, string updateOption, string action1, string updateOption1, string trans, string knownStatus1, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "WES_AUTO",
                    "19400",
                    "OL_SDM_StaticDetailMaintenance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 19400: 05 - Confirmed Deceased (CD) - Error Validations for Deceased St" +
                    "atus (OLS06801)", @__tags);
#line 225
this.ScenarioSetup(scenarioInfo);
#line 226
testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 227
 testRunner.When("In SELCOY01 I select the company: \"WES_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 228
  testRunner.And("I go to the Static Details Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
  testRunner.And(string.Format("In OLS01101 I enter following details as the update option \"{0}\" \"{1}\"", action, updateOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
  testRunner.And(string.Format("In OLS01102 I enter following details as the update option \"{0}\" \"{1}\"", action1, updateOption1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "KnownName1",
                        "KnownStatus1",
                        "TransNumber"});
            table7.AddRow(new string[] {
                        "<KnownName1>",
                        string.Format("{0}", knownStatus1),
                        string.Format("{0}", trans)});
#line 231
  testRunner.And("In OLS06801 I enter below for negative tests", ((string)(null)), table7, "And ");
#line 235
 testRunner.Then(string.Format("I should see the below ErrorMessage \"{0}\"", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 20606: 02 - ZAF Taxpayer Details(ZA) - Error Message Validations OLS029" +
            "01")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("WES_AUTO")]
        [NUnit.Framework.CategoryAttribute("20606")]
        [NUnit.Framework.CategoryAttribute("OL_SDM_StaticDetailMaintenance")]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Country of Tax Residence must be entered", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "", "ABC", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Domicile/Tax code not on file", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "ABC", "NZL", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Internal Status entered in not a valid status", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "A", "", "NZL", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Please enter either: <space>, N, Y", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "", "NZL", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Tax Reference must be populated", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "", "NZL", "", "", "", "", "", "", "", "", "11111", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Tax Reference Type must be populated if", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "", "NZL", "", "", "", "", "", "", "", "", "11111", "ABC", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Unknown Tax Reference Type supplied", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "", "NZL", "", "", "", "", "", "", "", "", "AV11111", "TFN", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Tax Reference must be numeric", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "", "NZL", "", "", "", "", "", "", "", "", "11111", "TFN", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Date of Birth must be populated", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "", "NZL", "", "", "", "", "", "", "", "", "11111", "TFN", "", "", "01/01/1980", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Declaration Name must be populated", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "", "NZL", "", "", "", "", "", "", "", "", "11111", "TFN", "", "", "01/01/1980", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Test", "", "", "", "", "", "", "", "", "Declaration Date must be populated", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "", "NZL", "", "", "", "", "", "", "", "", "11111", "TFN", "", "", "01/01/1980", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Test", "IPL", "", "01/01/2015", "", "", "", "", "", "Declaration Capacity entered in not valid", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "", "NZL", "", "", "", "", "", "", "", "", "11111", "TFN", "", "", "01/01/1980", "", "", "", "", "", "", "", "", "", "K", "", "", "", "", "Test", "", "", "01/01/2015", "", "", "", "", "", "Exemption Code entered in not valid", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "", "NZL", "", "", "", "", "", "", "", "", "11111", "TFN", "", "", "01/01/1980", "", "", "", "", "", "", "", "", "", "", "", "KKK", "", "", "Test", "", "", "01/01/2015", "", "", "", "", "", "The Country of Issue entered is not valid", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "I", "8010", "", "", "", "NZL", "", "", "", "", "", "", "", "", "11111", "TFN", "", "", "01/01/1980", "", "", "", "", "", "", "", "", "", "", "", "", "UNM", "", "Test", "", "", "01/01/2015", "", "", "", "", "", "Certification Status entered in not a valid status", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "P", "8010", "", "", "", "NZL", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Trading Name is mandatory when the", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "P", "8010", "", "", "", "NZL", "Test", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Test", "", "", "01/01/2015", "", "", "", "", "", "Undertaking Name must be populated", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "P", "8010", "", "", "", "NZL", "Test", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Test", "", "", "01/01/2015", "UTest", "", "", "", "", "Undertaking Date must be populated", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "P", "8010", "", "", "", "NZL", "Test", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Test", "", "", "01/01/2015", "UTest", "OPO", "", "", "", "Undertaking Capacity entered in not valid", null)]
        [NUnit.Framework.TestCaseAttribute("S", "I0010342449", "U", "ZA", "P", "8010", "", "", "", "NZL", "Test", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Test", "", "", "01/01/2015", "UTest", "", "", "01/02/2015", "", "Signature Date must be populated", null)]
        public virtual void TestCase2060602_ZAFTaxpayerDetailsZA_ErrorMessageValidationsOLS02901(
                    string action, 
                    string updateOption, 
                    string action1, 
                    string updateOption1, 
                    string iNNatureOFPerson, 
                    string transNumber, 
                    string custodianReference, 
                    string intermediaryInd, 
                    string otherStatus, 
                    string taxCode, 
                    string tradingName1, 
                    string benAddrName, 
                    string benAddrLine1, 
                    string benAddrLine2, 
                    string benAddrLine3, 
                    string benAddrLine4, 
                    string benAddrLine5, 
                    string benAddrPC, 
                    string taxReference, 
                    string taxRefType, 
                    string iDReference, 
                    string iDReferenceType, 
                    string dateBirth, 
                    string phone, 
                    string email, 
                    string retName, 
                    string retLine1, 
                    string retLine2, 
                    string retLine3, 
                    string retLine4, 
                    string retLine5, 
                    string retAddrPC, 
                    string exemptionCode, 
                    string exemptionCodeDesc, 
                    string ctryOFIssue, 
                    string certStatus, 
                    string certStatusDesc, 
                    string decName, 
                    string decCapCode, 
                    string decCapacity, 
                    string decDate, 
                    string undName, 
                    string undCapCode, 
                    string undCapacity, 
                    string undDate, 
                    string sigDate, 
                    string errorMessage, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "WES_AUTO",
                    "20606",
                    "OL_SDM_StaticDetailMaintenance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 20606: 02 - ZAF Taxpayer Details(ZA) - Error Message Validations OLS029" +
                    "01", @__tags);
#line 247
this.ScenarioSetup(scenarioInfo);
#line 248
    testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 249
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 250
  testRunner.And("I go to the Static Details Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
  testRunner.And(string.Format("In OLS01101 I enter following details as the update option \"{0}\" \"{1}\"", action, updateOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
  testRunner.And(string.Format("In OLS01102 I enter following details as the update option \"{0}\" \"{1}\"", action1, updateOption1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "INNatureOFPerson"});
            table8.AddRow(new string[] {
                        string.Format("{0}", iNNatureOFPerson)});
#line 253
  testRunner.And("In OLS02901 I enter Nature Of Person as follows", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransNumber",
                        "CustodianReference",
                        "IntermediaryInd",
                        "OtherStatus",
                        "TaxCode",
                        "TradingName1",
                        "BenAddrName",
                        "BenAddrLine1",
                        "BenAddrLine2",
                        "BenAddrLine3",
                        "BenAddrLine4",
                        "BenAddrLine5",
                        "BenAddrPC",
                        "TaxReference",
                        "TaxRefType",
                        "IDReference",
                        "IDReferenceType",
                        "DateBirth",
                        "Phone",
                        "Email",
                        "RetName",
                        "RetLine1",
                        "RetLine2",
                        "RetLine3",
                        "RetLine4",
                        "RetLine5",
                        "RetAddrPC",
                        "ExemptionCode",
                        "ExemptionCodeDesc",
                        "CtryOFIssue",
                        "CertStatus",
                        "CertStatusDesc",
                        "DecName",
                        "DecCapCode",
                        "DecCapacity",
                        "DecDate",
                        "UndName",
                        "UndCapCode",
                        "UndCapacity",
                        "UndDate",
                        "SigDate"});
            table9.AddRow(new string[] {
                        string.Format("{0}", transNumber),
                        string.Format("{0}", custodianReference),
                        string.Format("{0}", intermediaryInd),
                        string.Format("{0}", otherStatus),
                        string.Format("{0}", taxCode),
                        string.Format("{0}", tradingName1),
                        string.Format("{0}", benAddrName),
                        string.Format("{0}", benAddrLine1),
                        string.Format("{0}", benAddrLine2),
                        string.Format("{0}", benAddrLine3),
                        string.Format("{0}", benAddrLine4),
                        string.Format("{0}", benAddrLine5),
                        string.Format("{0}", benAddrPC),
                        string.Format("{0}", taxReference),
                        string.Format("{0}", taxRefType),
                        string.Format("{0}", iDReference),
                        string.Format("{0}", iDReferenceType),
                        string.Format("{0}", dateBirth),
                        string.Format("{0}", phone),
                        string.Format("{0}", email),
                        string.Format("{0}", retName),
                        string.Format("{0}", retLine1),
                        string.Format("{0}", retLine2),
                        string.Format("{0}", retLine3),
                        string.Format("{0}", retLine4),
                        string.Format("{0}", retLine5),
                        string.Format("{0}", retAddrPC),
                        string.Format("{0}", exemptionCode),
                        string.Format("{0}", exemptionCodeDesc),
                        string.Format("{0}", ctryOFIssue),
                        string.Format("{0}", certStatus),
                        string.Format("{0}", certStatusDesc),
                        string.Format("{0}", decName),
                        string.Format("{0}", decCapCode),
                        string.Format("{0}", decCapacity),
                        string.Format("{0}", decDate),
                        string.Format("{0}", undName),
                        string.Format("{0}", undCapCode),
                        string.Format("{0}", undCapacity),
                        string.Format("{0}", undDate),
                        string.Format("{0}", sigDate)});
#line 256
     testRunner.And("In OLS02901 I enter all the following details", ((string)(null)), table9, "And ");
#line 260
 testRunner.Then(string.Format("I should see the below ErrorMessage \"{0}\"", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 19657: 03 - IRL Taxpayer Details (IR) - Error Message Validations OLS02" +
            "801")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("WES_AUTO")]
        [NUnit.Framework.CategoryAttribute("19657")]
        [NUnit.Framework.CategoryAttribute("OL_SDM_StaticDetailMaintenance")]
        [NUnit.Framework.TestCaseAttribute("IND", "9006", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Country of Tax Residence must be entered", null)]
        [NUnit.Framework.TestCaseAttribute("IND", "9006", "", "", "", "OOO", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Domicile/Tax code not on file", null)]
        [NUnit.Framework.TestCaseAttribute("IND", "9006", "111", "", "", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Custodian Ref not found", null)]
        [NUnit.Framework.TestCaseAttribute("IND", "9006", "", "", "PPP", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Internal Status entered in not a valid status", null)]
        [NUnit.Framework.TestCaseAttribute("IND", "9006", "", "", "", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Tax Reference must be populated", null)]
        [NUnit.Framework.TestCaseAttribute("IND", "9006", "", "", "", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1111111", "", "", "", "", "", "", "", "", "", "", "", "Tax Reference Type must be populated if", null)]
        [NUnit.Framework.TestCaseAttribute("IND", "9006", "", "", "", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1111111", "MMM", "", "", "", "", "", "", "", "", "", "", "Tax Reference Type must be TFN", null)]
        [NUnit.Framework.TestCaseAttribute("IND", "9006", "", "", "", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1111111", "TFN", "", "", "", "", "", "", "", "", "", "", "Date of Birth must be populated", null)]
        [NUnit.Framework.TestCaseAttribute("IND", "9006", "", "", "", "NZL", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1111111", "TFN", "", "", "", "", "", "", "", "", "", "", "Tax Reference Type must be IRD", null)]
        [NUnit.Framework.TestCaseAttribute("IND", "9006", "", "", "", "NZL", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "A111111", "IRD", "", "", "", "", "", "", "", "", "", "", "Tax Reference must be numeric", null)]
        [NUnit.Framework.TestCaseAttribute("IND", "9006", "", "", "", "NZL", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1111111", "IRD", "", "", "", "", "", "", "", "", "", "", "Internal Status or Certification Status", null)]
        [NUnit.Framework.TestCaseAttribute("IND", "9006", "", "", "", "USA", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "A111111", "TFN", "", "", "", "", "", "", "", "", "", "", "Tax Reference Type must be TRN", null)]
        [NUnit.Framework.TestCaseAttribute("COY", "9006", "", "", "", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Internal Status or Certification Status", null)]
        [NUnit.Framework.TestCaseAttribute("COY", "9006", "", "", "", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "MMM", "", "Certification Status entered in not a valid status", null)]
        [NUnit.Framework.TestCaseAttribute("COY", "9006", "", "", "", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "2015", "", "", "31/05/2015", "", "", "UNC", "", "DWT Expiry Date not 5 years from Signatory Date", null)]
        [NUnit.Framework.TestCaseAttribute("PRT", "9006", "", "", "", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Tax Reference must be populated", null)]
        [NUnit.Framework.TestCaseAttribute("PRT", "9006", "", "", "", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1111111", "TFN", "", "", "", "", "", "", "", "", "", "", "Signatory Name must be populated", null)]
        [NUnit.Framework.TestCaseAttribute("PRT", "9006", "", "", "", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1111111", "TFN", "", "", "", "Test", "", "", "", "", "", "", "Signatory Capacity must be populated", null)]
        [NUnit.Framework.TestCaseAttribute("PRT", "9006", "", "", "", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "1111111", "TFN", "", "", "", "Test", "PPP", "", "", "", "", "", "Capacity Type entered in not a valid type", null)]
        [NUnit.Framework.TestCaseAttribute("TST", "9006", "", "", "", "AUS", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Tax Reference must be populated", null)]
        public virtual void TestCase1965703_IRLTaxpayerDetailsIR_ErrorMessageValidationsOLS02801(
                    string enityType, 
                    string transNumber, 
                    string custodianReference, 
                    string intermediaryInd, 
                    string otherStatus, 
                    string taxCode, 
                    string mailAddrName, 
                    string mailAddrLine1, 
                    string mailAddrLine2, 
                    string mailAddrLine3, 
                    string mailAddrLine4, 
                    string mailAddrLine5, 
                    string mailAddrPostcode, 
                    string benAddrName, 
                    string benAddrLine1, 
                    string benAddrLine2, 
                    string benAddrLine3, 
                    string benAddrLine4, 
                    string benAddrLine5, 
                    string benAddrPC, 
                    string retName, 
                    string retLine1, 
                    string retLine2, 
                    string retLine3, 
                    string retLine4, 
                    string retLine5, 
                    string retAddrPC, 
                    string taxReference, 
                    string taxRefType, 
                    string dateBirth, 
                    string prevName, 
                    string dwtExpiryCcyy, 
                    string sigName, 
                    string sigCapType, 
                    string sigDate, 
                    string sigPhone, 
                    string certFileRef, 
                    string certStatus, 
                    string certDwtRef, 
                    string errorMessage, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "WES_AUTO",
                    "19657",
                    "OL_SDM_StaticDetailMaintenance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 19657: 03 - IRL Taxpayer Details (IR) - Error Message Validations OLS02" +
                    "801", @__tags);
#line 290
this.ScenarioSetup(scenarioInfo);
#line 291
  testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 292
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 293
  testRunner.And("I go to the Static Details Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 294
  testRunner.And("In OLS01101 I enter following details as the update option \"S\" \"I0010342449\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 295
  testRunner.And("In OLS01102 I enter following details as the update option \"U\" \"IR\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 296
  testRunner.And(string.Format("In OLS02801 I enter Enity Type \"{0}\"", enityType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransNumber",
                        "CustodianReference",
                        "IntermediaryInd",
                        "OtherStatus",
                        "TaxCode",
                        "MailAddrName",
                        "MailAddrLine1",
                        "MailAddrLine2",
                        "MailAddrLine3",
                        "MailAddrLine4",
                        "MailAddrLine5",
                        "MailAddrPostcode",
                        "BenAddrName",
                        "BenAddrLine1",
                        "BenAddrLine2",
                        "BenAddrLine3",
                        "BenAddrLine4",
                        "BenAddrLine5",
                        "BenAddrPC",
                        "RetName",
                        "RetLine1",
                        "RetLine2",
                        "RetLine3",
                        "RetLine4",
                        "RetLine5",
                        "RetAddrPC",
                        "TaxReference",
                        "TaxRefType",
                        "DateBirth",
                        "PrevName",
                        "DwtExpiryCcyy",
                        "SigName",
                        "SigCapType",
                        "SigDate",
                        "SigPhone",
                        "CertFileRef",
                        "CertStatus",
                        "CertDwtRef"});
            table10.AddRow(new string[] {
                        string.Format("{0}", transNumber),
                        string.Format("{0}", custodianReference),
                        string.Format("{0}", intermediaryInd),
                        string.Format("{0}", otherStatus),
                        string.Format("{0}", taxCode),
                        string.Format("{0}", mailAddrName),
                        string.Format("{0}", mailAddrLine1),
                        string.Format("{0}", mailAddrLine2),
                        string.Format("{0}", mailAddrLine3),
                        string.Format("{0}", mailAddrLine4),
                        string.Format("{0}", mailAddrLine5),
                        string.Format("{0}", mailAddrPostcode),
                        string.Format("{0}", benAddrName),
                        string.Format("{0}", benAddrLine1),
                        string.Format("{0}", benAddrLine2),
                        string.Format("{0}", benAddrLine3),
                        string.Format("{0}", benAddrLine4),
                        string.Format("{0}", benAddrLine5),
                        string.Format("{0}", benAddrPC),
                        string.Format("{0}", retName),
                        string.Format("{0}", retLine1),
                        string.Format("{0}", retLine2),
                        string.Format("{0}", retLine3),
                        string.Format("{0}", retLine4),
                        string.Format("{0}", retLine5),
                        string.Format("{0}", retAddrPC),
                        string.Format("{0}", taxReference),
                        string.Format("{0}", taxRefType),
                        string.Format("{0}", dateBirth),
                        string.Format("{0}", prevName),
                        string.Format("{0}", dwtExpiryCcyy),
                        string.Format("{0}", sigName),
                        string.Format("{0}", sigCapType),
                        string.Format("{0}", sigDate),
                        string.Format("{0}", sigPhone),
                        string.Format("{0}", certFileRef),
                        string.Format("{0}", certStatus),
                        string.Format("{0}", certDwtRef)});
#line 297
  testRunner.And("In OLS02801 I enter all the following details", ((string)(null)), table10, "And ");
#line 301
 testRunner.Then(string.Format("I should see the below ErrorMessage \"{0}\"", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Case 29743: 02 - OLSCRT | DSURC - CERT DECD SURVIVORSHIP Transaction- Error " +
            "Validations for OLSCRTBF")]
        [NUnit.Framework.CategoryAttribute("winformsTest")]
        [NUnit.Framework.CategoryAttribute("WES_AUTO")]
        [NUnit.Framework.CategoryAttribute("29743")]
        [NUnit.Framework.CategoryAttribute("OL_SDM_StaticDetailMaintenance")]
        [NUnit.Framework.TestCaseAttribute("Test1", "DSURC", "8815", "350", "ORD", "W152434", "", "VIC", "", "W152434", "", "", "", "", "350", "", "", "", "", "VIC", "", "C0000465922", "", "500", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Transfer units + hold units + reissue bal", null)]
        [NUnit.Framework.TestCaseAttribute("Test2", "DSURC", "8815", "350", "ORD", "W152434", "", "VIC", "", "W152434", "", "", "", "", "350", "", "", "", "", "VIC", "", "C0000465922", "", "300", "", "", "", "", "", "", "", "", "", "", "", "50", "", "", "", "", "", "Must enter a value", null)]
        [NUnit.Framework.TestCaseAttribute("Test3", "DSURC", "8815", "350", "ORD", "W152434", "", "VIC", "", "W152434", "", "", "", "", "350", "", "", "", "", "VIC", "", "C0000465922", "", "300", "", "", "", "", "", "", "", "", "", "", "", "50", "dfadsfa", "", "", "", "", "Invalid certificate number", null)]
        [NUnit.Framework.TestCaseAttribute("Test4", "DSURC", "8815", "350", "ORD", "W152434", "", "VIC", "", "W152434", "", "", "", "", "350", "", "", "", "", "VIC", "", "C0000465922", "", "300", "", "", "", "", "", "", "", "", "", "", "", "", "", "50", "", "50", "1", "Cannot enter splits when reissue balance.", null)]
        [NUnit.Framework.TestCaseAttribute("Test5", "DSURC", "8815", "350", "ORD", "W152434", "", "VIC", "", "W152434", "", "", "", "", "350", "", "", "", "", "VIC", "", "C0000465922", "", "350", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "S", "50", "1", "Split units do NOT add to buy units.", null)]
        public virtual void TestCase2974302_OLSCRTDSURC_CERTDECDSURVIVORSHIPTransaction_ErrorValidationsForOLSCRTBF(
                    string test, 
                    string selCode, 
                    string transNumber, 
                    string totalUnits, 
                    string sellClass, 
                    string sellCertID, 
                    string sellHolderID, 
                    string sellReg, 
                    string sellBroker, 
                    string sellCert1, 
                    string sellCert2, 
                    string sellCert3, 
                    string sellCert4, 
                    string sellCert5, 
                    string sellUnits1, 
                    string sellUnits2, 
                    string sellUnits3, 
                    string sellUnits4, 
                    string sellUnits5, 
                    string buyReg, 
                    string buyBroker, 
                    string buySearchName, 
                    string buyReference, 
                    string transferUnits, 
                    string buyTransDate, 
                    string buyCertID, 
                    string buyInstructions1, 
                    string buyInstructions2, 
                    string buyInstructions3, 
                    string buyInstructions4, 
                    string buyInstructions5, 
                    string buySplitNbr1To51, 
                    string buySplitNbr1To52, 
                    string buySplitUnits1To51, 
                    string buySplitUnits1To52, 
                    string holdBalance, 
                    string markingNumber, 
                    string reissueBal, 
                    string reissTOSellBroker, 
                    string buySplitUnits1To53, 
                    string buySplitNbr1To53, 
                    string errorMessage, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "winformsTest",
                    "WES_AUTO",
                    "29743",
                    "OL_SDM_StaticDetailMaintenance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Case 29743: 02 - OLSCRT | DSURC - CERT DECD SURVIVORSHIP Transaction- Error " +
                    "Validations for OLSCRTBF", @__tags);
#line 331
this.ScenarioSetup(scenarioInfo);
#line 332
 testRunner.Given("I have connected to WinForms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 333
 testRunner.When("In SELCOY01 I select the company: \"ANZ_AUTO\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 334
  testRunner.And("In MNS00101 I click on: \"online data entry system\" within the System Menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 335
  testRunner.And("In OLS00101 I Click on: \"standard transactions\" with in the online data entry sys" +
                    "tem menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "SelCode"});
            table11.AddRow(new string[] {
                        string.Format("{0}", selCode)});
#line 336
  testRunner.And("In SELTRN20 I continue with the following details:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransNumber",
                        "TotalUnits",
                        "SellClass",
                        "SellCertID",
                        "SellHolderID",
                        "SellReg",
                        "SellBroker"});
            table12.AddRow(new string[] {
                        string.Format("{0}", transNumber),
                        string.Format("{0}", totalUnits),
                        string.Format("{0}", sellClass),
                        string.Format("{0}", sellCertID),
                        string.Format("{0}", sellHolderID),
                        string.Format("{0}", sellReg),
                        string.Format("{0}", sellBroker)});
#line 339
  testRunner.And("IN OLSCRTSC I continue with the following details:", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "SellCert1",
                        "SellCert2",
                        "SellCert3",
                        "SellCert4",
                        "SellCert5",
                        "SellUnits1",
                        "SellUnits2",
                        "SellUnits3",
                        "SellUnits4",
                        "SellUnits5",
                        "BuyReg",
                        "BuyBroker",
                        "BuySearchName",
                        "BuyReference"});
            table13.AddRow(new string[] {
                        string.Format("{0}", sellCert1),
                        string.Format("{0}", sellCert2),
                        string.Format("{0}", sellCert3),
                        string.Format("{0}", sellCert4),
                        string.Format("{0}", sellCert5),
                        string.Format("{0}", sellUnits1),
                        string.Format("{0}", sellUnits2),
                        string.Format("{0}", sellUnits3),
                        string.Format("{0}", sellUnits4),
                        string.Format("{0}", sellUnits5),
                        string.Format("{0}", buyReg),
                        string.Format("{0}", buyBroker),
                        string.Format("{0}", buySearchName),
                        string.Format("{0}", buyReference)});
#line 342
  testRunner.And("IN OLSCRTTC I continue with the following details:", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "TransferUnits",
                        "BuyTransDate",
                        "BuyCertID",
                        "BuyInstructions1",
                        "BuyInstructions2",
                        "BuyInstructions3",
                        "BuyInstructions4",
                        "BuyInstructions5",
                        "BuySplitNbr1to51",
                        "BuySplitNbr1to52",
                        "BuySplitUnits1to51",
                        "BuySplitUnits1to52",
                        "HoldBalance",
                        "MarkingNumber",
                        "ReissueBal",
                        "ReissTOSellBroker",
                        "BuySplitUnits1to53",
                        "BuySplitNbr1to53"});
            table14.AddRow(new string[] {
                        string.Format("{0}", transferUnits),
                        string.Format("{0}", buyTransDate),
                        string.Format("{0}", buyCertID),
                        string.Format("{0}", buyInstructions1),
                        string.Format("{0}", buyInstructions2),
                        string.Format("{0}", buyInstructions3),
                        string.Format("{0}", buyInstructions4),
                        string.Format("{0}", buyInstructions5),
                        string.Format("{0}", buySplitNbr1To51),
                        string.Format("{0}", buySplitNbr1To52),
                        string.Format("{0}", buySplitUnits1To51),
                        string.Format("{0}", buySplitUnits1To52),
                        string.Format("{0}", holdBalance),
                        string.Format("{0}", markingNumber),
                        string.Format("{0}", reissueBal),
                        string.Format("{0}", reissTOSellBroker),
                        string.Format("{0}", buySplitUnits1To53),
                        string.Format("{0}", buySplitNbr1To53)});
#line 345
  testRunner.And("IN OLSCRTBF I continue with the following details:", ((string)(null)), table14, "And ");
#line 348
 testRunner.Then(string.Format("I should see the below ErrorMessage \"{0}\"", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
